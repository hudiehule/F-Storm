/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.storm.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-12-08")
public class StormTopology implements org.apache.thrift.TBase<StormTopology, StormTopology._Fields>, java.io.Serializable, Cloneable, Comparable<StormTopology> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StormTopology");

  private static final org.apache.thrift.protocol.TField SPOUTS_FIELD_DESC = new org.apache.thrift.protocol.TField("spouts", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField BOLTS_FIELD_DESC = new org.apache.thrift.protocol.TField("bolts", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField ACC_BOLTS_FIELD_DESC = new org.apache.thrift.protocol.TField("accBolts", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField STATE_SPOUTS_FIELD_DESC = new org.apache.thrift.protocol.TField("state_spouts", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField WORKER_HOOKS_FIELD_DESC = new org.apache.thrift.protocol.TField("worker_hooks", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StormTopologyStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StormTopologyTupleSchemeFactory());
  }

  public Map<String,SpoutSpec> spouts; // required
  public Map<String,Bolt> bolts; // required
  public Map<String,AccBolt> accBolts; // required
  public Map<String,StateSpoutSpec> state_spouts; // required
  public List<ByteBuffer> worker_hooks; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SPOUTS((short)1, "spouts"),
    BOLTS((short)2, "bolts"),
    ACC_BOLTS((short)3, "accBolts"),
    STATE_SPOUTS((short)4, "state_spouts"),
    WORKER_HOOKS((short)5, "worker_hooks");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SPOUTS
          return SPOUTS;
        case 2: // BOLTS
          return BOLTS;
        case 3: // ACC_BOLTS
          return ACC_BOLTS;
        case 4: // STATE_SPOUTS
          return STATE_SPOUTS;
        case 5: // WORKER_HOOKS
          return WORKER_HOOKS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.WORKER_HOOKS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SPOUTS, new org.apache.thrift.meta_data.FieldMetaData("spouts", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SpoutSpec.class))));
    tmpMap.put(_Fields.BOLTS, new org.apache.thrift.meta_data.FieldMetaData("bolts", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Bolt.class))));
    tmpMap.put(_Fields.ACC_BOLTS, new org.apache.thrift.meta_data.FieldMetaData("accBolts", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AccBolt.class))));
    tmpMap.put(_Fields.STATE_SPOUTS, new org.apache.thrift.meta_data.FieldMetaData("state_spouts", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StateSpoutSpec.class))));
    tmpMap.put(_Fields.WORKER_HOOKS, new org.apache.thrift.meta_data.FieldMetaData("worker_hooks", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StormTopology.class, metaDataMap);
  }

  public StormTopology() {
  }

  public StormTopology(
    Map<String,SpoutSpec> spouts,
    Map<String,Bolt> bolts,
    Map<String,AccBolt> accBolts,
    Map<String,StateSpoutSpec> state_spouts)
  {
    this();
    this.spouts = spouts;
    this.bolts = bolts;
    this.accBolts = accBolts;
    this.state_spouts = state_spouts;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StormTopology(StormTopology other) {
    if (other.isSetSpouts()) {
      Map<String,SpoutSpec> __this__spouts = new HashMap<String,SpoutSpec>(other.spouts.size());
      for (Map.Entry<String, SpoutSpec> other_element : other.spouts.entrySet()) {

        String other_element_key = other_element.getKey();
        SpoutSpec other_element_value = other_element.getValue();

        String __this__spouts_copy_key = other_element_key;

        SpoutSpec __this__spouts_copy_value = new SpoutSpec(other_element_value);

        __this__spouts.put(__this__spouts_copy_key, __this__spouts_copy_value);
      }
      this.spouts = __this__spouts;
    }
    if (other.isSetBolts()) {
      Map<String,Bolt> __this__bolts = new HashMap<String,Bolt>(other.bolts.size());
      for (Map.Entry<String, Bolt> other_element : other.bolts.entrySet()) {

        String other_element_key = other_element.getKey();
        Bolt other_element_value = other_element.getValue();

        String __this__bolts_copy_key = other_element_key;

        Bolt __this__bolts_copy_value = new Bolt(other_element_value);

        __this__bolts.put(__this__bolts_copy_key, __this__bolts_copy_value);
      }
      this.bolts = __this__bolts;
    }
    if (other.isSetAccBolts()) {
      Map<String,AccBolt> __this__accBolts = new HashMap<String,AccBolt>(other.accBolts.size());
      for (Map.Entry<String, AccBolt> other_element : other.accBolts.entrySet()) {

        String other_element_key = other_element.getKey();
        AccBolt other_element_value = other_element.getValue();

        String __this__accBolts_copy_key = other_element_key;

        AccBolt __this__accBolts_copy_value = new AccBolt(other_element_value);

        __this__accBolts.put(__this__accBolts_copy_key, __this__accBolts_copy_value);
      }
      this.accBolts = __this__accBolts;
    }
    if (other.isSetState_spouts()) {
      Map<String,StateSpoutSpec> __this__state_spouts = new HashMap<String,StateSpoutSpec>(other.state_spouts.size());
      for (Map.Entry<String, StateSpoutSpec> other_element : other.state_spouts.entrySet()) {

        String other_element_key = other_element.getKey();
        StateSpoutSpec other_element_value = other_element.getValue();

        String __this__state_spouts_copy_key = other_element_key;

        StateSpoutSpec __this__state_spouts_copy_value = new StateSpoutSpec(other_element_value);

        __this__state_spouts.put(__this__state_spouts_copy_key, __this__state_spouts_copy_value);
      }
      this.state_spouts = __this__state_spouts;
    }
    if (other.isSetWorker_hooks()) {
      List<ByteBuffer> __this__worker_hooks = new ArrayList<ByteBuffer>(other.worker_hooks);
      this.worker_hooks = __this__worker_hooks;
    }
  }

  public StormTopology deepCopy() {
    return new StormTopology(this);
  }

  @Override
  public void clear() {
    this.spouts = null;
    this.bolts = null;
    this.accBolts = null;
    this.state_spouts = null;
    this.worker_hooks = null;
  }

  public int getSpoutsSize() {
    return (this.spouts == null) ? 0 : this.spouts.size();
  }

  public void putToSpouts(String key, SpoutSpec val) {
    if (this.spouts == null) {
      this.spouts = new HashMap<String,SpoutSpec>();
    }
    this.spouts.put(key, val);
  }

  public Map<String,SpoutSpec> getSpouts() {
    return this.spouts;
  }

  public StormTopology setSpouts(Map<String,SpoutSpec> spouts) {
    this.spouts = spouts;
    return this;
  }

  public void unsetSpouts() {
    this.spouts = null;
  }

  /** Returns true if field spouts is set (has been assigned a value) and false otherwise */
  public boolean isSetSpouts() {
    return this.spouts != null;
  }

  public void setSpoutsIsSet(boolean value) {
    if (!value) {
      this.spouts = null;
    }
  }

  public int getBoltsSize() {
    return (this.bolts == null) ? 0 : this.bolts.size();
  }

  public void putToBolts(String key, Bolt val) {
    if (this.bolts == null) {
      this.bolts = new HashMap<String,Bolt>();
    }
    this.bolts.put(key, val);
  }

  public Map<String,Bolt> getBolts() {
    return this.bolts;
  }

  public StormTopology setBolts(Map<String,Bolt> bolts) {
    this.bolts = bolts;
    return this;
  }

  public void unsetBolts() {
    this.bolts = null;
  }

  /** Returns true if field bolts is set (has been assigned a value) and false otherwise */
  public boolean isSetBolts() {
    return this.bolts != null;
  }

  public void setBoltsIsSet(boolean value) {
    if (!value) {
      this.bolts = null;
    }
  }

  public int getAccBoltsSize() {
    return (this.accBolts == null) ? 0 : this.accBolts.size();
  }

  public void putToAccBolts(String key, AccBolt val) {
    if (this.accBolts == null) {
      this.accBolts = new HashMap<String,AccBolt>();
    }
    this.accBolts.put(key, val);
  }

  public Map<String,AccBolt> getAccBolts() {
    return this.accBolts;
  }

  public StormTopology setAccBolts(Map<String,AccBolt> accBolts) {
    this.accBolts = accBolts;
    return this;
  }

  public void unsetAccBolts() {
    this.accBolts = null;
  }

  /** Returns true if field accBolts is set (has been assigned a value) and false otherwise */
  public boolean isSetAccBolts() {
    return this.accBolts != null;
  }

  public void setAccBoltsIsSet(boolean value) {
    if (!value) {
      this.accBolts = null;
    }
  }

  public int getState_spoutsSize() {
    return (this.state_spouts == null) ? 0 : this.state_spouts.size();
  }

  public void putToState_spouts(String key, StateSpoutSpec val) {
    if (this.state_spouts == null) {
      this.state_spouts = new HashMap<String,StateSpoutSpec>();
    }
    this.state_spouts.put(key, val);
  }

  public Map<String,StateSpoutSpec> getState_spouts() {
    return this.state_spouts;
  }

  public StormTopology setState_spouts(Map<String,StateSpoutSpec> state_spouts) {
    this.state_spouts = state_spouts;
    return this;
  }

  public void unsetState_spouts() {
    this.state_spouts = null;
  }

  /** Returns true if field state_spouts is set (has been assigned a value) and false otherwise */
  public boolean isSetState_spouts() {
    return this.state_spouts != null;
  }

  public void setState_spoutsIsSet(boolean value) {
    if (!value) {
      this.state_spouts = null;
    }
  }

  public int getWorker_hooksSize() {
    return (this.worker_hooks == null) ? 0 : this.worker_hooks.size();
  }

  public java.util.Iterator<ByteBuffer> getWorker_hooksIterator() {
    return (this.worker_hooks == null) ? null : this.worker_hooks.iterator();
  }

  public void addToWorker_hooks(ByteBuffer elem) {
    if (this.worker_hooks == null) {
      this.worker_hooks = new ArrayList<ByteBuffer>();
    }
    this.worker_hooks.add(elem);
  }

  public List<ByteBuffer> getWorker_hooks() {
    return this.worker_hooks;
  }

  public StormTopology setWorker_hooks(List<ByteBuffer> worker_hooks) {
    this.worker_hooks = worker_hooks;
    return this;
  }

  public void unsetWorker_hooks() {
    this.worker_hooks = null;
  }

  /** Returns true if field worker_hooks is set (has been assigned a value) and false otherwise */
  public boolean isSetWorker_hooks() {
    return this.worker_hooks != null;
  }

  public void setWorker_hooksIsSet(boolean value) {
    if (!value) {
      this.worker_hooks = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SPOUTS:
      if (value == null) {
        unsetSpouts();
      } else {
        setSpouts((Map<String,SpoutSpec>)value);
      }
      break;

    case BOLTS:
      if (value == null) {
        unsetBolts();
      } else {
        setBolts((Map<String,Bolt>)value);
      }
      break;

    case ACC_BOLTS:
      if (value == null) {
        unsetAccBolts();
      } else {
        setAccBolts((Map<String,AccBolt>)value);
      }
      break;

    case STATE_SPOUTS:
      if (value == null) {
        unsetState_spouts();
      } else {
        setState_spouts((Map<String,StateSpoutSpec>)value);
      }
      break;

    case WORKER_HOOKS:
      if (value == null) {
        unsetWorker_hooks();
      } else {
        setWorker_hooks((List<ByteBuffer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SPOUTS:
      return getSpouts();

    case BOLTS:
      return getBolts();

    case ACC_BOLTS:
      return getAccBolts();

    case STATE_SPOUTS:
      return getState_spouts();

    case WORKER_HOOKS:
      return getWorker_hooks();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SPOUTS:
      return isSetSpouts();
    case BOLTS:
      return isSetBolts();
    case ACC_BOLTS:
      return isSetAccBolts();
    case STATE_SPOUTS:
      return isSetState_spouts();
    case WORKER_HOOKS:
      return isSetWorker_hooks();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StormTopology)
      return this.equals((StormTopology)that);
    return false;
  }

  public boolean equals(StormTopology that) {
    if (that == null)
      return false;

    boolean this_present_spouts = true && this.isSetSpouts();
    boolean that_present_spouts = true && that.isSetSpouts();
    if (this_present_spouts || that_present_spouts) {
      if (!(this_present_spouts && that_present_spouts))
        return false;
      if (!this.spouts.equals(that.spouts))
        return false;
    }

    boolean this_present_bolts = true && this.isSetBolts();
    boolean that_present_bolts = true && that.isSetBolts();
    if (this_present_bolts || that_present_bolts) {
      if (!(this_present_bolts && that_present_bolts))
        return false;
      if (!this.bolts.equals(that.bolts))
        return false;
    }

    boolean this_present_accBolts = true && this.isSetAccBolts();
    boolean that_present_accBolts = true && that.isSetAccBolts();
    if (this_present_accBolts || that_present_accBolts) {
      if (!(this_present_accBolts && that_present_accBolts))
        return false;
      if (!this.accBolts.equals(that.accBolts))
        return false;
    }

    boolean this_present_state_spouts = true && this.isSetState_spouts();
    boolean that_present_state_spouts = true && that.isSetState_spouts();
    if (this_present_state_spouts || that_present_state_spouts) {
      if (!(this_present_state_spouts && that_present_state_spouts))
        return false;
      if (!this.state_spouts.equals(that.state_spouts))
        return false;
    }

    boolean this_present_worker_hooks = true && this.isSetWorker_hooks();
    boolean that_present_worker_hooks = true && that.isSetWorker_hooks();
    if (this_present_worker_hooks || that_present_worker_hooks) {
      if (!(this_present_worker_hooks && that_present_worker_hooks))
        return false;
      if (!this.worker_hooks.equals(that.worker_hooks))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_spouts = true && (isSetSpouts());
    list.add(present_spouts);
    if (present_spouts)
      list.add(spouts);

    boolean present_bolts = true && (isSetBolts());
    list.add(present_bolts);
    if (present_bolts)
      list.add(bolts);

    boolean present_accBolts = true && (isSetAccBolts());
    list.add(present_accBolts);
    if (present_accBolts)
      list.add(accBolts);

    boolean present_state_spouts = true && (isSetState_spouts());
    list.add(present_state_spouts);
    if (present_state_spouts)
      list.add(state_spouts);

    boolean present_worker_hooks = true && (isSetWorker_hooks());
    list.add(present_worker_hooks);
    if (present_worker_hooks)
      list.add(worker_hooks);

    return list.hashCode();
  }

  @Override
  public int compareTo(StormTopology other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSpouts()).compareTo(other.isSetSpouts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpouts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spouts, other.spouts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBolts()).compareTo(other.isSetBolts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBolts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bolts, other.bolts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccBolts()).compareTo(other.isSetAccBolts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccBolts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accBolts, other.accBolts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState_spouts()).compareTo(other.isSetState_spouts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState_spouts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state_spouts, other.state_spouts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorker_hooks()).compareTo(other.isSetWorker_hooks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorker_hooks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.worker_hooks, other.worker_hooks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StormTopology(");
    boolean first = true;

    sb.append("spouts:");
    if (this.spouts == null) {
      sb.append("null");
    } else {
      sb.append(this.spouts);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bolts:");
    if (this.bolts == null) {
      sb.append("null");
    } else {
      sb.append(this.bolts);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accBolts:");
    if (this.accBolts == null) {
      sb.append("null");
    } else {
      sb.append(this.accBolts);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("state_spouts:");
    if (this.state_spouts == null) {
      sb.append("null");
    } else {
      sb.append(this.state_spouts);
    }
    first = false;
    if (isSetWorker_hooks()) {
      if (!first) sb.append(", ");
      sb.append("worker_hooks:");
      if (this.worker_hooks == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.worker_hooks, sb);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (spouts == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'spouts' was not present! Struct: " + toString());
    }
    if (bolts == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'bolts' was not present! Struct: " + toString());
    }
    if (accBolts == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'accBolts' was not present! Struct: " + toString());
    }
    if (state_spouts == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'state_spouts' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StormTopologyStandardSchemeFactory implements SchemeFactory {
    public StormTopologyStandardScheme getScheme() {
      return new StormTopologyStandardScheme();
    }
  }

  private static class StormTopologyStandardScheme extends StandardScheme<StormTopology> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StormTopology struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SPOUTS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map44 = iprot.readMapBegin();
                struct.spouts = new HashMap<String,SpoutSpec>(2*_map44.size);
                String _key45;
                SpoutSpec _val46;
                for (int _i47 = 0; _i47 < _map44.size; ++_i47)
                {
                  _key45 = iprot.readString();
                  _val46 = new SpoutSpec();
                  _val46.read(iprot);
                  struct.spouts.put(_key45, _val46);
                }
                iprot.readMapEnd();
              }
              struct.setSpoutsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BOLTS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map48 = iprot.readMapBegin();
                struct.bolts = new HashMap<String,Bolt>(2*_map48.size);
                String _key49;
                Bolt _val50;
                for (int _i51 = 0; _i51 < _map48.size; ++_i51)
                {
                  _key49 = iprot.readString();
                  _val50 = new Bolt();
                  _val50.read(iprot);
                  struct.bolts.put(_key49, _val50);
                }
                iprot.readMapEnd();
              }
              struct.setBoltsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ACC_BOLTS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map52 = iprot.readMapBegin();
                struct.accBolts = new HashMap<String,AccBolt>(2*_map52.size);
                String _key53;
                AccBolt _val54;
                for (int _i55 = 0; _i55 < _map52.size; ++_i55)
                {
                  _key53 = iprot.readString();
                  _val54 = new AccBolt();
                  _val54.read(iprot);
                  struct.accBolts.put(_key53, _val54);
                }
                iprot.readMapEnd();
              }
              struct.setAccBoltsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STATE_SPOUTS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map56 = iprot.readMapBegin();
                struct.state_spouts = new HashMap<String,StateSpoutSpec>(2*_map56.size);
                String _key57;
                StateSpoutSpec _val58;
                for (int _i59 = 0; _i59 < _map56.size; ++_i59)
                {
                  _key57 = iprot.readString();
                  _val58 = new StateSpoutSpec();
                  _val58.read(iprot);
                  struct.state_spouts.put(_key57, _val58);
                }
                iprot.readMapEnd();
              }
              struct.setState_spoutsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // WORKER_HOOKS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list60 = iprot.readListBegin();
                struct.worker_hooks = new ArrayList<ByteBuffer>(_list60.size);
                ByteBuffer _elem61;
                for (int _i62 = 0; _i62 < _list60.size; ++_i62)
                {
                  _elem61 = iprot.readBinary();
                  struct.worker_hooks.add(_elem61);
                }
                iprot.readListEnd();
              }
              struct.setWorker_hooksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StormTopology struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.spouts != null) {
        oprot.writeFieldBegin(SPOUTS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.spouts.size()));
          for (Map.Entry<String, SpoutSpec> _iter63 : struct.spouts.entrySet())
          {
            oprot.writeString(_iter63.getKey());
            _iter63.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.bolts != null) {
        oprot.writeFieldBegin(BOLTS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.bolts.size()));
          for (Map.Entry<String, Bolt> _iter64 : struct.bolts.entrySet())
          {
            oprot.writeString(_iter64.getKey());
            _iter64.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.accBolts != null) {
        oprot.writeFieldBegin(ACC_BOLTS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.accBolts.size()));
          for (Map.Entry<String, AccBolt> _iter65 : struct.accBolts.entrySet())
          {
            oprot.writeString(_iter65.getKey());
            _iter65.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.state_spouts != null) {
        oprot.writeFieldBegin(STATE_SPOUTS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.state_spouts.size()));
          for (Map.Entry<String, StateSpoutSpec> _iter66 : struct.state_spouts.entrySet())
          {
            oprot.writeString(_iter66.getKey());
            _iter66.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.worker_hooks != null) {
        if (struct.isSetWorker_hooks()) {
          oprot.writeFieldBegin(WORKER_HOOKS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.worker_hooks.size()));
            for (ByteBuffer _iter67 : struct.worker_hooks)
            {
              oprot.writeBinary(_iter67);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StormTopologyTupleSchemeFactory implements SchemeFactory {
    public StormTopologyTupleScheme getScheme() {
      return new StormTopologyTupleScheme();
    }
  }

  private static class StormTopologyTupleScheme extends TupleScheme<StormTopology> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StormTopology struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.spouts.size());
        for (Map.Entry<String, SpoutSpec> _iter68 : struct.spouts.entrySet())
        {
          oprot.writeString(_iter68.getKey());
          _iter68.getValue().write(oprot);
        }
      }
      {
        oprot.writeI32(struct.bolts.size());
        for (Map.Entry<String, Bolt> _iter69 : struct.bolts.entrySet())
        {
          oprot.writeString(_iter69.getKey());
          _iter69.getValue().write(oprot);
        }
      }
      {
        oprot.writeI32(struct.accBolts.size());
        for (Map.Entry<String, AccBolt> _iter70 : struct.accBolts.entrySet())
        {
          oprot.writeString(_iter70.getKey());
          _iter70.getValue().write(oprot);
        }
      }
      {
        oprot.writeI32(struct.state_spouts.size());
        for (Map.Entry<String, StateSpoutSpec> _iter71 : struct.state_spouts.entrySet())
        {
          oprot.writeString(_iter71.getKey());
          _iter71.getValue().write(oprot);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetWorker_hooks()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetWorker_hooks()) {
        {
          oprot.writeI32(struct.worker_hooks.size());
          for (ByteBuffer _iter72 : struct.worker_hooks)
          {
            oprot.writeBinary(_iter72);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StormTopology struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TMap _map73 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.spouts = new HashMap<String,SpoutSpec>(2*_map73.size);
        String _key74;
        SpoutSpec _val75;
        for (int _i76 = 0; _i76 < _map73.size; ++_i76)
        {
          _key74 = iprot.readString();
          _val75 = new SpoutSpec();
          _val75.read(iprot);
          struct.spouts.put(_key74, _val75);
        }
      }
      struct.setSpoutsIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map77 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.bolts = new HashMap<String,Bolt>(2*_map77.size);
        String _key78;
        Bolt _val79;
        for (int _i80 = 0; _i80 < _map77.size; ++_i80)
        {
          _key78 = iprot.readString();
          _val79 = new Bolt();
          _val79.read(iprot);
          struct.bolts.put(_key78, _val79);
        }
      }
      struct.setBoltsIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map81 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.accBolts = new HashMap<String,AccBolt>(2*_map81.size);
        String _key82;
        AccBolt _val83;
        for (int _i84 = 0; _i84 < _map81.size; ++_i84)
        {
          _key82 = iprot.readString();
          _val83 = new AccBolt();
          _val83.read(iprot);
          struct.accBolts.put(_key82, _val83);
        }
      }
      struct.setAccBoltsIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map85 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.state_spouts = new HashMap<String,StateSpoutSpec>(2*_map85.size);
        String _key86;
        StateSpoutSpec _val87;
        for (int _i88 = 0; _i88 < _map85.size; ++_i88)
        {
          _key86 = iprot.readString();
          _val87 = new StateSpoutSpec();
          _val87.read(iprot);
          struct.state_spouts.put(_key86, _val87);
        }
      }
      struct.setState_spoutsIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list89 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.worker_hooks = new ArrayList<ByteBuffer>(_list89.size);
          ByteBuffer _elem90;
          for (int _i91 = 0; _i91 < _list89.size; ++_i91)
          {
            _elem90 = iprot.readBinary();
            struct.worker_hooks.add(_elem90);
          }
        }
        struct.setWorker_hooksIsSet(true);
      }
    }
  }

}

