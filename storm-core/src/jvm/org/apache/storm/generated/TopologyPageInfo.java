/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.storm.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-12-08")
public class TopologyPageInfo implements org.apache.thrift.TBase<TopologyPageInfo, TopologyPageInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TopologyPageInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TopologyPageInfo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField UPTIME_SECS_FIELD_DESC = new org.apache.thrift.protocol.TField("uptime_secs", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField NUM_TASKS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_tasks", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField NUM_WORKERS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_workers", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField NUM_EXECUTORS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_executors", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField NUM_FPGA_DEVICES_FIELD_DESC = new org.apache.thrift.protocol.TField("num_fpga_devices", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField NUM_GPU_DEVICES_FIELD_DESC = new org.apache.thrift.protocol.TField("num_gpu_devices", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField TOPOLOGY_CONF_FIELD_DESC = new org.apache.thrift.protocol.TField("topology_conf", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField ID_TO_SPOUT_AGG_STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("id_to_spout_agg_stats", org.apache.thrift.protocol.TType.MAP, (short)11);
  private static final org.apache.thrift.protocol.TField ID_TO_BOLT_AGG_STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("id_to_bolt_agg_stats", org.apache.thrift.protocol.TType.MAP, (short)12);
  private static final org.apache.thrift.protocol.TField ID_TO_ACC_BOLT_AGG_STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("id_to_accBolt_agg_stats", org.apache.thrift.protocol.TType.MAP, (short)13);
  private static final org.apache.thrift.protocol.TField SCHED_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("sched_status", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField TOPOLOGY_STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("topology_stats", org.apache.thrift.protocol.TType.STRUCT, (short)15);
  private static final org.apache.thrift.protocol.TField OWNER_FIELD_DESC = new org.apache.thrift.protocol.TField("owner", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField DEBUG_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("debug_options", org.apache.thrift.protocol.TType.STRUCT, (short)17);
  private static final org.apache.thrift.protocol.TField REPLICATION_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("replication_count", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField REQUESTED_MEMONHEAP_FIELD_DESC = new org.apache.thrift.protocol.TField("requested_memonheap", org.apache.thrift.protocol.TType.DOUBLE, (short)521);
  private static final org.apache.thrift.protocol.TField REQUESTED_MEMOFFHEAP_FIELD_DESC = new org.apache.thrift.protocol.TField("requested_memoffheap", org.apache.thrift.protocol.TType.DOUBLE, (short)522);
  private static final org.apache.thrift.protocol.TField REQUESTED_CPU_FIELD_DESC = new org.apache.thrift.protocol.TField("requested_cpu", org.apache.thrift.protocol.TType.DOUBLE, (short)523);
  private static final org.apache.thrift.protocol.TField REQUESTED_FPGA_DEVICE_FIELD_DESC = new org.apache.thrift.protocol.TField("requested_fpga_device", org.apache.thrift.protocol.TType.DOUBLE, (short)524);
  private static final org.apache.thrift.protocol.TField REQUESTED_GPU_DEVICE_FIELD_DESC = new org.apache.thrift.protocol.TField("requested_gpu_device", org.apache.thrift.protocol.TType.DOUBLE, (short)525);
  private static final org.apache.thrift.protocol.TField ASSIGNED_MEMONHEAP_FIELD_DESC = new org.apache.thrift.protocol.TField("assigned_memonheap", org.apache.thrift.protocol.TType.DOUBLE, (short)526);
  private static final org.apache.thrift.protocol.TField ASSIGNED_MEMOFFHEAP_FIELD_DESC = new org.apache.thrift.protocol.TField("assigned_memoffheap", org.apache.thrift.protocol.TType.DOUBLE, (short)527);
  private static final org.apache.thrift.protocol.TField ASSIGNED_CPU_FIELD_DESC = new org.apache.thrift.protocol.TField("assigned_cpu", org.apache.thrift.protocol.TType.DOUBLE, (short)528);
  private static final org.apache.thrift.protocol.TField ASSIGNED_FPGA_DEVICE_FIELD_DESC = new org.apache.thrift.protocol.TField("assigned_fpga_device", org.apache.thrift.protocol.TType.DOUBLE, (short)529);
  private static final org.apache.thrift.protocol.TField ASSIGNED_GPU_DEVICE_FIELD_DESC = new org.apache.thrift.protocol.TField("assigned_gpu_device", org.apache.thrift.protocol.TType.DOUBLE, (short)530);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TopologyPageInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TopologyPageInfoTupleSchemeFactory());
  }

  public String id; // required
  public String name; // optional
  public int uptime_secs; // optional
  public String status; // optional
  public int num_tasks; // optional
  public int num_workers; // optional
  public int num_executors; // optional
  public int num_fpga_devices; // optional
  public int num_gpu_devices; // optional
  public String topology_conf; // optional
  public Map<String,ComponentAggregateStats> id_to_spout_agg_stats; // optional
  public Map<String,ComponentAggregateStats> id_to_bolt_agg_stats; // optional
  public Map<String,ComponentAggregateStats> id_to_accBolt_agg_stats; // optional
  public String sched_status; // optional
  public TopologyStats topology_stats; // optional
  public String owner; // optional
  public DebugOptions debug_options; // optional
  public int replication_count; // optional
  public double requested_memonheap; // optional
  public double requested_memoffheap; // optional
  public double requested_cpu; // optional
  public double requested_fpga_device; // optional
  public double requested_gpu_device; // optional
  public double assigned_memonheap; // optional
  public double assigned_memoffheap; // optional
  public double assigned_cpu; // optional
  public double assigned_fpga_device; // optional
  public double assigned_gpu_device; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    UPTIME_SECS((short)3, "uptime_secs"),
    STATUS((short)4, "status"),
    NUM_TASKS((short)5, "num_tasks"),
    NUM_WORKERS((short)6, "num_workers"),
    NUM_EXECUTORS((short)7, "num_executors"),
    NUM_FPGA_DEVICES((short)8, "num_fpga_devices"),
    NUM_GPU_DEVICES((short)9, "num_gpu_devices"),
    TOPOLOGY_CONF((short)10, "topology_conf"),
    ID_TO_SPOUT_AGG_STATS((short)11, "id_to_spout_agg_stats"),
    ID_TO_BOLT_AGG_STATS((short)12, "id_to_bolt_agg_stats"),
    ID_TO_ACC_BOLT_AGG_STATS((short)13, "id_to_accBolt_agg_stats"),
    SCHED_STATUS((short)14, "sched_status"),
    TOPOLOGY_STATS((short)15, "topology_stats"),
    OWNER((short)16, "owner"),
    DEBUG_OPTIONS((short)17, "debug_options"),
    REPLICATION_COUNT((short)18, "replication_count"),
    REQUESTED_MEMONHEAP((short)521, "requested_memonheap"),
    REQUESTED_MEMOFFHEAP((short)522, "requested_memoffheap"),
    REQUESTED_CPU((short)523, "requested_cpu"),
    REQUESTED_FPGA_DEVICE((short)524, "requested_fpga_device"),
    REQUESTED_GPU_DEVICE((short)525, "requested_gpu_device"),
    ASSIGNED_MEMONHEAP((short)526, "assigned_memonheap"),
    ASSIGNED_MEMOFFHEAP((short)527, "assigned_memoffheap"),
    ASSIGNED_CPU((short)528, "assigned_cpu"),
    ASSIGNED_FPGA_DEVICE((short)529, "assigned_fpga_device"),
    ASSIGNED_GPU_DEVICE((short)530, "assigned_gpu_device");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // UPTIME_SECS
          return UPTIME_SECS;
        case 4: // STATUS
          return STATUS;
        case 5: // NUM_TASKS
          return NUM_TASKS;
        case 6: // NUM_WORKERS
          return NUM_WORKERS;
        case 7: // NUM_EXECUTORS
          return NUM_EXECUTORS;
        case 8: // NUM_FPGA_DEVICES
          return NUM_FPGA_DEVICES;
        case 9: // NUM_GPU_DEVICES
          return NUM_GPU_DEVICES;
        case 10: // TOPOLOGY_CONF
          return TOPOLOGY_CONF;
        case 11: // ID_TO_SPOUT_AGG_STATS
          return ID_TO_SPOUT_AGG_STATS;
        case 12: // ID_TO_BOLT_AGG_STATS
          return ID_TO_BOLT_AGG_STATS;
        case 13: // ID_TO_ACC_BOLT_AGG_STATS
          return ID_TO_ACC_BOLT_AGG_STATS;
        case 14: // SCHED_STATUS
          return SCHED_STATUS;
        case 15: // TOPOLOGY_STATS
          return TOPOLOGY_STATS;
        case 16: // OWNER
          return OWNER;
        case 17: // DEBUG_OPTIONS
          return DEBUG_OPTIONS;
        case 18: // REPLICATION_COUNT
          return REPLICATION_COUNT;
        case 521: // REQUESTED_MEMONHEAP
          return REQUESTED_MEMONHEAP;
        case 522: // REQUESTED_MEMOFFHEAP
          return REQUESTED_MEMOFFHEAP;
        case 523: // REQUESTED_CPU
          return REQUESTED_CPU;
        case 524: // REQUESTED_FPGA_DEVICE
          return REQUESTED_FPGA_DEVICE;
        case 525: // REQUESTED_GPU_DEVICE
          return REQUESTED_GPU_DEVICE;
        case 526: // ASSIGNED_MEMONHEAP
          return ASSIGNED_MEMONHEAP;
        case 527: // ASSIGNED_MEMOFFHEAP
          return ASSIGNED_MEMOFFHEAP;
        case 528: // ASSIGNED_CPU
          return ASSIGNED_CPU;
        case 529: // ASSIGNED_FPGA_DEVICE
          return ASSIGNED_FPGA_DEVICE;
        case 530: // ASSIGNED_GPU_DEVICE
          return ASSIGNED_GPU_DEVICE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __UPTIME_SECS_ISSET_ID = 0;
  private static final int __NUM_TASKS_ISSET_ID = 1;
  private static final int __NUM_WORKERS_ISSET_ID = 2;
  private static final int __NUM_EXECUTORS_ISSET_ID = 3;
  private static final int __NUM_FPGA_DEVICES_ISSET_ID = 4;
  private static final int __NUM_GPU_DEVICES_ISSET_ID = 5;
  private static final int __REPLICATION_COUNT_ISSET_ID = 6;
  private static final int __REQUESTED_MEMONHEAP_ISSET_ID = 7;
  private static final int __REQUESTED_MEMOFFHEAP_ISSET_ID = 8;
  private static final int __REQUESTED_CPU_ISSET_ID = 9;
  private static final int __REQUESTED_FPGA_DEVICE_ISSET_ID = 10;
  private static final int __REQUESTED_GPU_DEVICE_ISSET_ID = 11;
  private static final int __ASSIGNED_MEMONHEAP_ISSET_ID = 12;
  private static final int __ASSIGNED_MEMOFFHEAP_ISSET_ID = 13;
  private static final int __ASSIGNED_CPU_ISSET_ID = 14;
  private static final int __ASSIGNED_FPGA_DEVICE_ISSET_ID = 15;
  private static final int __ASSIGNED_GPU_DEVICE_ISSET_ID = 16;
  private int __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.NAME,_Fields.UPTIME_SECS,_Fields.STATUS,_Fields.NUM_TASKS,_Fields.NUM_WORKERS,_Fields.NUM_EXECUTORS,_Fields.NUM_FPGA_DEVICES,_Fields.NUM_GPU_DEVICES,_Fields.TOPOLOGY_CONF,_Fields.ID_TO_SPOUT_AGG_STATS,_Fields.ID_TO_BOLT_AGG_STATS,_Fields.ID_TO_ACC_BOLT_AGG_STATS,_Fields.SCHED_STATUS,_Fields.TOPOLOGY_STATS,_Fields.OWNER,_Fields.DEBUG_OPTIONS,_Fields.REPLICATION_COUNT,_Fields.REQUESTED_MEMONHEAP,_Fields.REQUESTED_MEMOFFHEAP,_Fields.REQUESTED_CPU,_Fields.REQUESTED_FPGA_DEVICE,_Fields.REQUESTED_GPU_DEVICE,_Fields.ASSIGNED_MEMONHEAP,_Fields.ASSIGNED_MEMOFFHEAP,_Fields.ASSIGNED_CPU,_Fields.ASSIGNED_FPGA_DEVICE,_Fields.ASSIGNED_GPU_DEVICE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPTIME_SECS, new org.apache.thrift.meta_data.FieldMetaData("uptime_secs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUM_TASKS, new org.apache.thrift.meta_data.FieldMetaData("num_tasks", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_WORKERS, new org.apache.thrift.meta_data.FieldMetaData("num_workers", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_EXECUTORS, new org.apache.thrift.meta_data.FieldMetaData("num_executors", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_FPGA_DEVICES, new org.apache.thrift.meta_data.FieldMetaData("num_fpga_devices", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_GPU_DEVICES, new org.apache.thrift.meta_data.FieldMetaData("num_gpu_devices", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOPOLOGY_CONF, new org.apache.thrift.meta_data.FieldMetaData("topology_conf", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID_TO_SPOUT_AGG_STATS, new org.apache.thrift.meta_data.FieldMetaData("id_to_spout_agg_stats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ComponentAggregateStats.class))));
    tmpMap.put(_Fields.ID_TO_BOLT_AGG_STATS, new org.apache.thrift.meta_data.FieldMetaData("id_to_bolt_agg_stats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ComponentAggregateStats.class))));
    tmpMap.put(_Fields.ID_TO_ACC_BOLT_AGG_STATS, new org.apache.thrift.meta_data.FieldMetaData("id_to_accBolt_agg_stats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ComponentAggregateStats.class))));
    tmpMap.put(_Fields.SCHED_STATUS, new org.apache.thrift.meta_data.FieldMetaData("sched_status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOPOLOGY_STATS, new org.apache.thrift.meta_data.FieldMetaData("topology_stats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TopologyStats.class)));
    tmpMap.put(_Fields.OWNER, new org.apache.thrift.meta_data.FieldMetaData("owner", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEBUG_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("debug_options", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DebugOptions.class)));
    tmpMap.put(_Fields.REPLICATION_COUNT, new org.apache.thrift.meta_data.FieldMetaData("replication_count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REQUESTED_MEMONHEAP, new org.apache.thrift.meta_data.FieldMetaData("requested_memonheap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REQUESTED_MEMOFFHEAP, new org.apache.thrift.meta_data.FieldMetaData("requested_memoffheap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REQUESTED_CPU, new org.apache.thrift.meta_data.FieldMetaData("requested_cpu", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REQUESTED_FPGA_DEVICE, new org.apache.thrift.meta_data.FieldMetaData("requested_fpga_device", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REQUESTED_GPU_DEVICE, new org.apache.thrift.meta_data.FieldMetaData("requested_gpu_device", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ASSIGNED_MEMONHEAP, new org.apache.thrift.meta_data.FieldMetaData("assigned_memonheap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ASSIGNED_MEMOFFHEAP, new org.apache.thrift.meta_data.FieldMetaData("assigned_memoffheap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ASSIGNED_CPU, new org.apache.thrift.meta_data.FieldMetaData("assigned_cpu", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ASSIGNED_FPGA_DEVICE, new org.apache.thrift.meta_data.FieldMetaData("assigned_fpga_device", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ASSIGNED_GPU_DEVICE, new org.apache.thrift.meta_data.FieldMetaData("assigned_gpu_device", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TopologyPageInfo.class, metaDataMap);
  }

  public TopologyPageInfo() {
  }

  public TopologyPageInfo(
    String id)
  {
    this();
    this.id = id;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TopologyPageInfo(TopologyPageInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.uptime_secs = other.uptime_secs;
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    this.num_tasks = other.num_tasks;
    this.num_workers = other.num_workers;
    this.num_executors = other.num_executors;
    this.num_fpga_devices = other.num_fpga_devices;
    this.num_gpu_devices = other.num_gpu_devices;
    if (other.isSetTopology_conf()) {
      this.topology_conf = other.topology_conf;
    }
    if (other.isSetId_to_spout_agg_stats()) {
      Map<String,ComponentAggregateStats> __this__id_to_spout_agg_stats = new HashMap<String,ComponentAggregateStats>(other.id_to_spout_agg_stats.size());
      for (Map.Entry<String, ComponentAggregateStats> other_element : other.id_to_spout_agg_stats.entrySet()) {

        String other_element_key = other_element.getKey();
        ComponentAggregateStats other_element_value = other_element.getValue();

        String __this__id_to_spout_agg_stats_copy_key = other_element_key;

        ComponentAggregateStats __this__id_to_spout_agg_stats_copy_value = new ComponentAggregateStats(other_element_value);

        __this__id_to_spout_agg_stats.put(__this__id_to_spout_agg_stats_copy_key, __this__id_to_spout_agg_stats_copy_value);
      }
      this.id_to_spout_agg_stats = __this__id_to_spout_agg_stats;
    }
    if (other.isSetId_to_bolt_agg_stats()) {
      Map<String,ComponentAggregateStats> __this__id_to_bolt_agg_stats = new HashMap<String,ComponentAggregateStats>(other.id_to_bolt_agg_stats.size());
      for (Map.Entry<String, ComponentAggregateStats> other_element : other.id_to_bolt_agg_stats.entrySet()) {

        String other_element_key = other_element.getKey();
        ComponentAggregateStats other_element_value = other_element.getValue();

        String __this__id_to_bolt_agg_stats_copy_key = other_element_key;

        ComponentAggregateStats __this__id_to_bolt_agg_stats_copy_value = new ComponentAggregateStats(other_element_value);

        __this__id_to_bolt_agg_stats.put(__this__id_to_bolt_agg_stats_copy_key, __this__id_to_bolt_agg_stats_copy_value);
      }
      this.id_to_bolt_agg_stats = __this__id_to_bolt_agg_stats;
    }
    if (other.isSetId_to_accBolt_agg_stats()) {
      Map<String,ComponentAggregateStats> __this__id_to_accBolt_agg_stats = new HashMap<String,ComponentAggregateStats>(other.id_to_accBolt_agg_stats.size());
      for (Map.Entry<String, ComponentAggregateStats> other_element : other.id_to_accBolt_agg_stats.entrySet()) {

        String other_element_key = other_element.getKey();
        ComponentAggregateStats other_element_value = other_element.getValue();

        String __this__id_to_accBolt_agg_stats_copy_key = other_element_key;

        ComponentAggregateStats __this__id_to_accBolt_agg_stats_copy_value = new ComponentAggregateStats(other_element_value);

        __this__id_to_accBolt_agg_stats.put(__this__id_to_accBolt_agg_stats_copy_key, __this__id_to_accBolt_agg_stats_copy_value);
      }
      this.id_to_accBolt_agg_stats = __this__id_to_accBolt_agg_stats;
    }
    if (other.isSetSched_status()) {
      this.sched_status = other.sched_status;
    }
    if (other.isSetTopology_stats()) {
      this.topology_stats = new TopologyStats(other.topology_stats);
    }
    if (other.isSetOwner()) {
      this.owner = other.owner;
    }
    if (other.isSetDebug_options()) {
      this.debug_options = new DebugOptions(other.debug_options);
    }
    this.replication_count = other.replication_count;
    this.requested_memonheap = other.requested_memonheap;
    this.requested_memoffheap = other.requested_memoffheap;
    this.requested_cpu = other.requested_cpu;
    this.requested_fpga_device = other.requested_fpga_device;
    this.requested_gpu_device = other.requested_gpu_device;
    this.assigned_memonheap = other.assigned_memonheap;
    this.assigned_memoffheap = other.assigned_memoffheap;
    this.assigned_cpu = other.assigned_cpu;
    this.assigned_fpga_device = other.assigned_fpga_device;
    this.assigned_gpu_device = other.assigned_gpu_device;
  }

  public TopologyPageInfo deepCopy() {
    return new TopologyPageInfo(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.name = null;
    setUptime_secsIsSet(false);
    this.uptime_secs = 0;
    this.status = null;
    setNum_tasksIsSet(false);
    this.num_tasks = 0;
    setNum_workersIsSet(false);
    this.num_workers = 0;
    setNum_executorsIsSet(false);
    this.num_executors = 0;
    setNum_fpga_devicesIsSet(false);
    this.num_fpga_devices = 0;
    setNum_gpu_devicesIsSet(false);
    this.num_gpu_devices = 0;
    this.topology_conf = null;
    this.id_to_spout_agg_stats = null;
    this.id_to_bolt_agg_stats = null;
    this.id_to_accBolt_agg_stats = null;
    this.sched_status = null;
    this.topology_stats = null;
    this.owner = null;
    this.debug_options = null;
    setReplication_countIsSet(false);
    this.replication_count = 0;
    setRequested_memonheapIsSet(false);
    this.requested_memonheap = 0.0;
    setRequested_memoffheapIsSet(false);
    this.requested_memoffheap = 0.0;
    setRequested_cpuIsSet(false);
    this.requested_cpu = 0.0;
    setRequested_fpga_deviceIsSet(false);
    this.requested_fpga_device = 0.0;
    setRequested_gpu_deviceIsSet(false);
    this.requested_gpu_device = 0.0;
    setAssigned_memonheapIsSet(false);
    this.assigned_memonheap = 0.0;
    setAssigned_memoffheapIsSet(false);
    this.assigned_memoffheap = 0.0;
    setAssigned_cpuIsSet(false);
    this.assigned_cpu = 0.0;
    setAssigned_fpga_deviceIsSet(false);
    this.assigned_fpga_device = 0.0;
    setAssigned_gpu_deviceIsSet(false);
    this.assigned_gpu_device = 0.0;
  }

  public String getId() {
    return this.id;
  }

  public TopologyPageInfo setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public TopologyPageInfo setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getUptime_secs() {
    return this.uptime_secs;
  }

  public TopologyPageInfo setUptime_secs(int uptime_secs) {
    this.uptime_secs = uptime_secs;
    setUptime_secsIsSet(true);
    return this;
  }

  public void unsetUptime_secs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPTIME_SECS_ISSET_ID);
  }

  /** Returns true if field uptime_secs is set (has been assigned a value) and false otherwise */
  public boolean isSetUptime_secs() {
    return EncodingUtils.testBit(__isset_bitfield, __UPTIME_SECS_ISSET_ID);
  }

  public void setUptime_secsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPTIME_SECS_ISSET_ID, value);
  }

  public String getStatus() {
    return this.status;
  }

  public TopologyPageInfo setStatus(String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public int getNum_tasks() {
    return this.num_tasks;
  }

  public TopologyPageInfo setNum_tasks(int num_tasks) {
    this.num_tasks = num_tasks;
    setNum_tasksIsSet(true);
    return this;
  }

  public void unsetNum_tasks() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_TASKS_ISSET_ID);
  }

  /** Returns true if field num_tasks is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_tasks() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_TASKS_ISSET_ID);
  }

  public void setNum_tasksIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_TASKS_ISSET_ID, value);
  }

  public int getNum_workers() {
    return this.num_workers;
  }

  public TopologyPageInfo setNum_workers(int num_workers) {
    this.num_workers = num_workers;
    setNum_workersIsSet(true);
    return this;
  }

  public void unsetNum_workers() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_WORKERS_ISSET_ID);
  }

  /** Returns true if field num_workers is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_workers() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_WORKERS_ISSET_ID);
  }

  public void setNum_workersIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_WORKERS_ISSET_ID, value);
  }

  public int getNum_executors() {
    return this.num_executors;
  }

  public TopologyPageInfo setNum_executors(int num_executors) {
    this.num_executors = num_executors;
    setNum_executorsIsSet(true);
    return this;
  }

  public void unsetNum_executors() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_EXECUTORS_ISSET_ID);
  }

  /** Returns true if field num_executors is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_executors() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_EXECUTORS_ISSET_ID);
  }

  public void setNum_executorsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_EXECUTORS_ISSET_ID, value);
  }

  public int getNum_fpga_devices() {
    return this.num_fpga_devices;
  }

  public TopologyPageInfo setNum_fpga_devices(int num_fpga_devices) {
    this.num_fpga_devices = num_fpga_devices;
    setNum_fpga_devicesIsSet(true);
    return this;
  }

  public void unsetNum_fpga_devices() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_FPGA_DEVICES_ISSET_ID);
  }

  /** Returns true if field num_fpga_devices is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_fpga_devices() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_FPGA_DEVICES_ISSET_ID);
  }

  public void setNum_fpga_devicesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_FPGA_DEVICES_ISSET_ID, value);
  }

  public int getNum_gpu_devices() {
    return this.num_gpu_devices;
  }

  public TopologyPageInfo setNum_gpu_devices(int num_gpu_devices) {
    this.num_gpu_devices = num_gpu_devices;
    setNum_gpu_devicesIsSet(true);
    return this;
  }

  public void unsetNum_gpu_devices() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_GPU_DEVICES_ISSET_ID);
  }

  /** Returns true if field num_gpu_devices is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_gpu_devices() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_GPU_DEVICES_ISSET_ID);
  }

  public void setNum_gpu_devicesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_GPU_DEVICES_ISSET_ID, value);
  }

  public String getTopology_conf() {
    return this.topology_conf;
  }

  public TopologyPageInfo setTopology_conf(String topology_conf) {
    this.topology_conf = topology_conf;
    return this;
  }

  public void unsetTopology_conf() {
    this.topology_conf = null;
  }

  /** Returns true if field topology_conf is set (has been assigned a value) and false otherwise */
  public boolean isSetTopology_conf() {
    return this.topology_conf != null;
  }

  public void setTopology_confIsSet(boolean value) {
    if (!value) {
      this.topology_conf = null;
    }
  }

  public int getId_to_spout_agg_statsSize() {
    return (this.id_to_spout_agg_stats == null) ? 0 : this.id_to_spout_agg_stats.size();
  }

  public void putToId_to_spout_agg_stats(String key, ComponentAggregateStats val) {
    if (this.id_to_spout_agg_stats == null) {
      this.id_to_spout_agg_stats = new HashMap<String,ComponentAggregateStats>();
    }
    this.id_to_spout_agg_stats.put(key, val);
  }

  public Map<String,ComponentAggregateStats> getId_to_spout_agg_stats() {
    return this.id_to_spout_agg_stats;
  }

  public TopologyPageInfo setId_to_spout_agg_stats(Map<String,ComponentAggregateStats> id_to_spout_agg_stats) {
    this.id_to_spout_agg_stats = id_to_spout_agg_stats;
    return this;
  }

  public void unsetId_to_spout_agg_stats() {
    this.id_to_spout_agg_stats = null;
  }

  /** Returns true if field id_to_spout_agg_stats is set (has been assigned a value) and false otherwise */
  public boolean isSetId_to_spout_agg_stats() {
    return this.id_to_spout_agg_stats != null;
  }

  public void setId_to_spout_agg_statsIsSet(boolean value) {
    if (!value) {
      this.id_to_spout_agg_stats = null;
    }
  }

  public int getId_to_bolt_agg_statsSize() {
    return (this.id_to_bolt_agg_stats == null) ? 0 : this.id_to_bolt_agg_stats.size();
  }

  public void putToId_to_bolt_agg_stats(String key, ComponentAggregateStats val) {
    if (this.id_to_bolt_agg_stats == null) {
      this.id_to_bolt_agg_stats = new HashMap<String,ComponentAggregateStats>();
    }
    this.id_to_bolt_agg_stats.put(key, val);
  }

  public Map<String,ComponentAggregateStats> getId_to_bolt_agg_stats() {
    return this.id_to_bolt_agg_stats;
  }

  public TopologyPageInfo setId_to_bolt_agg_stats(Map<String,ComponentAggregateStats> id_to_bolt_agg_stats) {
    this.id_to_bolt_agg_stats = id_to_bolt_agg_stats;
    return this;
  }

  public void unsetId_to_bolt_agg_stats() {
    this.id_to_bolt_agg_stats = null;
  }

  /** Returns true if field id_to_bolt_agg_stats is set (has been assigned a value) and false otherwise */
  public boolean isSetId_to_bolt_agg_stats() {
    return this.id_to_bolt_agg_stats != null;
  }

  public void setId_to_bolt_agg_statsIsSet(boolean value) {
    if (!value) {
      this.id_to_bolt_agg_stats = null;
    }
  }

  public int getId_to_accBolt_agg_statsSize() {
    return (this.id_to_accBolt_agg_stats == null) ? 0 : this.id_to_accBolt_agg_stats.size();
  }

  public void putToId_to_accBolt_agg_stats(String key, ComponentAggregateStats val) {
    if (this.id_to_accBolt_agg_stats == null) {
      this.id_to_accBolt_agg_stats = new HashMap<String,ComponentAggregateStats>();
    }
    this.id_to_accBolt_agg_stats.put(key, val);
  }

  public Map<String,ComponentAggregateStats> getId_to_accBolt_agg_stats() {
    return this.id_to_accBolt_agg_stats;
  }

  public TopologyPageInfo setId_to_accBolt_agg_stats(Map<String,ComponentAggregateStats> id_to_accBolt_agg_stats) {
    this.id_to_accBolt_agg_stats = id_to_accBolt_agg_stats;
    return this;
  }

  public void unsetId_to_accBolt_agg_stats() {
    this.id_to_accBolt_agg_stats = null;
  }

  /** Returns true if field id_to_accBolt_agg_stats is set (has been assigned a value) and false otherwise */
  public boolean isSetId_to_accBolt_agg_stats() {
    return this.id_to_accBolt_agg_stats != null;
  }

  public void setId_to_accBolt_agg_statsIsSet(boolean value) {
    if (!value) {
      this.id_to_accBolt_agg_stats = null;
    }
  }

  public String getSched_status() {
    return this.sched_status;
  }

  public TopologyPageInfo setSched_status(String sched_status) {
    this.sched_status = sched_status;
    return this;
  }

  public void unsetSched_status() {
    this.sched_status = null;
  }

  /** Returns true if field sched_status is set (has been assigned a value) and false otherwise */
  public boolean isSetSched_status() {
    return this.sched_status != null;
  }

  public void setSched_statusIsSet(boolean value) {
    if (!value) {
      this.sched_status = null;
    }
  }

  public TopologyStats getTopology_stats() {
    return this.topology_stats;
  }

  public TopologyPageInfo setTopology_stats(TopologyStats topology_stats) {
    this.topology_stats = topology_stats;
    return this;
  }

  public void unsetTopology_stats() {
    this.topology_stats = null;
  }

  /** Returns true if field topology_stats is set (has been assigned a value) and false otherwise */
  public boolean isSetTopology_stats() {
    return this.topology_stats != null;
  }

  public void setTopology_statsIsSet(boolean value) {
    if (!value) {
      this.topology_stats = null;
    }
  }

  public String getOwner() {
    return this.owner;
  }

  public TopologyPageInfo setOwner(String owner) {
    this.owner = owner;
    return this;
  }

  public void unsetOwner() {
    this.owner = null;
  }

  /** Returns true if field owner is set (has been assigned a value) and false otherwise */
  public boolean isSetOwner() {
    return this.owner != null;
  }

  public void setOwnerIsSet(boolean value) {
    if (!value) {
      this.owner = null;
    }
  }

  public DebugOptions getDebug_options() {
    return this.debug_options;
  }

  public TopologyPageInfo setDebug_options(DebugOptions debug_options) {
    this.debug_options = debug_options;
    return this;
  }

  public void unsetDebug_options() {
    this.debug_options = null;
  }

  /** Returns true if field debug_options is set (has been assigned a value) and false otherwise */
  public boolean isSetDebug_options() {
    return this.debug_options != null;
  }

  public void setDebug_optionsIsSet(boolean value) {
    if (!value) {
      this.debug_options = null;
    }
  }

  public int getReplication_count() {
    return this.replication_count;
  }

  public TopologyPageInfo setReplication_count(int replication_count) {
    this.replication_count = replication_count;
    setReplication_countIsSet(true);
    return this;
  }

  public void unsetReplication_count() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPLICATION_COUNT_ISSET_ID);
  }

  /** Returns true if field replication_count is set (has been assigned a value) and false otherwise */
  public boolean isSetReplication_count() {
    return EncodingUtils.testBit(__isset_bitfield, __REPLICATION_COUNT_ISSET_ID);
  }

  public void setReplication_countIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPLICATION_COUNT_ISSET_ID, value);
  }

  public double getRequested_memonheap() {
    return this.requested_memonheap;
  }

  public TopologyPageInfo setRequested_memonheap(double requested_memonheap) {
    this.requested_memonheap = requested_memonheap;
    setRequested_memonheapIsSet(true);
    return this;
  }

  public void unsetRequested_memonheap() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTED_MEMONHEAP_ISSET_ID);
  }

  /** Returns true if field requested_memonheap is set (has been assigned a value) and false otherwise */
  public boolean isSetRequested_memonheap() {
    return EncodingUtils.testBit(__isset_bitfield, __REQUESTED_MEMONHEAP_ISSET_ID);
  }

  public void setRequested_memonheapIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTED_MEMONHEAP_ISSET_ID, value);
  }

  public double getRequested_memoffheap() {
    return this.requested_memoffheap;
  }

  public TopologyPageInfo setRequested_memoffheap(double requested_memoffheap) {
    this.requested_memoffheap = requested_memoffheap;
    setRequested_memoffheapIsSet(true);
    return this;
  }

  public void unsetRequested_memoffheap() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTED_MEMOFFHEAP_ISSET_ID);
  }

  /** Returns true if field requested_memoffheap is set (has been assigned a value) and false otherwise */
  public boolean isSetRequested_memoffheap() {
    return EncodingUtils.testBit(__isset_bitfield, __REQUESTED_MEMOFFHEAP_ISSET_ID);
  }

  public void setRequested_memoffheapIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTED_MEMOFFHEAP_ISSET_ID, value);
  }

  public double getRequested_cpu() {
    return this.requested_cpu;
  }

  public TopologyPageInfo setRequested_cpu(double requested_cpu) {
    this.requested_cpu = requested_cpu;
    setRequested_cpuIsSet(true);
    return this;
  }

  public void unsetRequested_cpu() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTED_CPU_ISSET_ID);
  }

  /** Returns true if field requested_cpu is set (has been assigned a value) and false otherwise */
  public boolean isSetRequested_cpu() {
    return EncodingUtils.testBit(__isset_bitfield, __REQUESTED_CPU_ISSET_ID);
  }

  public void setRequested_cpuIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTED_CPU_ISSET_ID, value);
  }

  public double getRequested_fpga_device() {
    return this.requested_fpga_device;
  }

  public TopologyPageInfo setRequested_fpga_device(double requested_fpga_device) {
    this.requested_fpga_device = requested_fpga_device;
    setRequested_fpga_deviceIsSet(true);
    return this;
  }

  public void unsetRequested_fpga_device() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTED_FPGA_DEVICE_ISSET_ID);
  }

  /** Returns true if field requested_fpga_device is set (has been assigned a value) and false otherwise */
  public boolean isSetRequested_fpga_device() {
    return EncodingUtils.testBit(__isset_bitfield, __REQUESTED_FPGA_DEVICE_ISSET_ID);
  }

  public void setRequested_fpga_deviceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTED_FPGA_DEVICE_ISSET_ID, value);
  }

  public double getRequested_gpu_device() {
    return this.requested_gpu_device;
  }

  public TopologyPageInfo setRequested_gpu_device(double requested_gpu_device) {
    this.requested_gpu_device = requested_gpu_device;
    setRequested_gpu_deviceIsSet(true);
    return this;
  }

  public void unsetRequested_gpu_device() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTED_GPU_DEVICE_ISSET_ID);
  }

  /** Returns true if field requested_gpu_device is set (has been assigned a value) and false otherwise */
  public boolean isSetRequested_gpu_device() {
    return EncodingUtils.testBit(__isset_bitfield, __REQUESTED_GPU_DEVICE_ISSET_ID);
  }

  public void setRequested_gpu_deviceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTED_GPU_DEVICE_ISSET_ID, value);
  }

  public double getAssigned_memonheap() {
    return this.assigned_memonheap;
  }

  public TopologyPageInfo setAssigned_memonheap(double assigned_memonheap) {
    this.assigned_memonheap = assigned_memonheap;
    setAssigned_memonheapIsSet(true);
    return this;
  }

  public void unsetAssigned_memonheap() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ASSIGNED_MEMONHEAP_ISSET_ID);
  }

  /** Returns true if field assigned_memonheap is set (has been assigned a value) and false otherwise */
  public boolean isSetAssigned_memonheap() {
    return EncodingUtils.testBit(__isset_bitfield, __ASSIGNED_MEMONHEAP_ISSET_ID);
  }

  public void setAssigned_memonheapIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ASSIGNED_MEMONHEAP_ISSET_ID, value);
  }

  public double getAssigned_memoffheap() {
    return this.assigned_memoffheap;
  }

  public TopologyPageInfo setAssigned_memoffheap(double assigned_memoffheap) {
    this.assigned_memoffheap = assigned_memoffheap;
    setAssigned_memoffheapIsSet(true);
    return this;
  }

  public void unsetAssigned_memoffheap() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ASSIGNED_MEMOFFHEAP_ISSET_ID);
  }

  /** Returns true if field assigned_memoffheap is set (has been assigned a value) and false otherwise */
  public boolean isSetAssigned_memoffheap() {
    return EncodingUtils.testBit(__isset_bitfield, __ASSIGNED_MEMOFFHEAP_ISSET_ID);
  }

  public void setAssigned_memoffheapIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ASSIGNED_MEMOFFHEAP_ISSET_ID, value);
  }

  public double getAssigned_cpu() {
    return this.assigned_cpu;
  }

  public TopologyPageInfo setAssigned_cpu(double assigned_cpu) {
    this.assigned_cpu = assigned_cpu;
    setAssigned_cpuIsSet(true);
    return this;
  }

  public void unsetAssigned_cpu() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ASSIGNED_CPU_ISSET_ID);
  }

  /** Returns true if field assigned_cpu is set (has been assigned a value) and false otherwise */
  public boolean isSetAssigned_cpu() {
    return EncodingUtils.testBit(__isset_bitfield, __ASSIGNED_CPU_ISSET_ID);
  }

  public void setAssigned_cpuIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ASSIGNED_CPU_ISSET_ID, value);
  }

  public double getAssigned_fpga_device() {
    return this.assigned_fpga_device;
  }

  public TopologyPageInfo setAssigned_fpga_device(double assigned_fpga_device) {
    this.assigned_fpga_device = assigned_fpga_device;
    setAssigned_fpga_deviceIsSet(true);
    return this;
  }

  public void unsetAssigned_fpga_device() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ASSIGNED_FPGA_DEVICE_ISSET_ID);
  }

  /** Returns true if field assigned_fpga_device is set (has been assigned a value) and false otherwise */
  public boolean isSetAssigned_fpga_device() {
    return EncodingUtils.testBit(__isset_bitfield, __ASSIGNED_FPGA_DEVICE_ISSET_ID);
  }

  public void setAssigned_fpga_deviceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ASSIGNED_FPGA_DEVICE_ISSET_ID, value);
  }

  public double getAssigned_gpu_device() {
    return this.assigned_gpu_device;
  }

  public TopologyPageInfo setAssigned_gpu_device(double assigned_gpu_device) {
    this.assigned_gpu_device = assigned_gpu_device;
    setAssigned_gpu_deviceIsSet(true);
    return this;
  }

  public void unsetAssigned_gpu_device() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ASSIGNED_GPU_DEVICE_ISSET_ID);
  }

  /** Returns true if field assigned_gpu_device is set (has been assigned a value) and false otherwise */
  public boolean isSetAssigned_gpu_device() {
    return EncodingUtils.testBit(__isset_bitfield, __ASSIGNED_GPU_DEVICE_ISSET_ID);
  }

  public void setAssigned_gpu_deviceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ASSIGNED_GPU_DEVICE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case UPTIME_SECS:
      if (value == null) {
        unsetUptime_secs();
      } else {
        setUptime_secs((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((String)value);
      }
      break;

    case NUM_TASKS:
      if (value == null) {
        unsetNum_tasks();
      } else {
        setNum_tasks((Integer)value);
      }
      break;

    case NUM_WORKERS:
      if (value == null) {
        unsetNum_workers();
      } else {
        setNum_workers((Integer)value);
      }
      break;

    case NUM_EXECUTORS:
      if (value == null) {
        unsetNum_executors();
      } else {
        setNum_executors((Integer)value);
      }
      break;

    case NUM_FPGA_DEVICES:
      if (value == null) {
        unsetNum_fpga_devices();
      } else {
        setNum_fpga_devices((Integer)value);
      }
      break;

    case NUM_GPU_DEVICES:
      if (value == null) {
        unsetNum_gpu_devices();
      } else {
        setNum_gpu_devices((Integer)value);
      }
      break;

    case TOPOLOGY_CONF:
      if (value == null) {
        unsetTopology_conf();
      } else {
        setTopology_conf((String)value);
      }
      break;

    case ID_TO_SPOUT_AGG_STATS:
      if (value == null) {
        unsetId_to_spout_agg_stats();
      } else {
        setId_to_spout_agg_stats((Map<String,ComponentAggregateStats>)value);
      }
      break;

    case ID_TO_BOLT_AGG_STATS:
      if (value == null) {
        unsetId_to_bolt_agg_stats();
      } else {
        setId_to_bolt_agg_stats((Map<String,ComponentAggregateStats>)value);
      }
      break;

    case ID_TO_ACC_BOLT_AGG_STATS:
      if (value == null) {
        unsetId_to_accBolt_agg_stats();
      } else {
        setId_to_accBolt_agg_stats((Map<String,ComponentAggregateStats>)value);
      }
      break;

    case SCHED_STATUS:
      if (value == null) {
        unsetSched_status();
      } else {
        setSched_status((String)value);
      }
      break;

    case TOPOLOGY_STATS:
      if (value == null) {
        unsetTopology_stats();
      } else {
        setTopology_stats((TopologyStats)value);
      }
      break;

    case OWNER:
      if (value == null) {
        unsetOwner();
      } else {
        setOwner((String)value);
      }
      break;

    case DEBUG_OPTIONS:
      if (value == null) {
        unsetDebug_options();
      } else {
        setDebug_options((DebugOptions)value);
      }
      break;

    case REPLICATION_COUNT:
      if (value == null) {
        unsetReplication_count();
      } else {
        setReplication_count((Integer)value);
      }
      break;

    case REQUESTED_MEMONHEAP:
      if (value == null) {
        unsetRequested_memonheap();
      } else {
        setRequested_memonheap((Double)value);
      }
      break;

    case REQUESTED_MEMOFFHEAP:
      if (value == null) {
        unsetRequested_memoffheap();
      } else {
        setRequested_memoffheap((Double)value);
      }
      break;

    case REQUESTED_CPU:
      if (value == null) {
        unsetRequested_cpu();
      } else {
        setRequested_cpu((Double)value);
      }
      break;

    case REQUESTED_FPGA_DEVICE:
      if (value == null) {
        unsetRequested_fpga_device();
      } else {
        setRequested_fpga_device((Double)value);
      }
      break;

    case REQUESTED_GPU_DEVICE:
      if (value == null) {
        unsetRequested_gpu_device();
      } else {
        setRequested_gpu_device((Double)value);
      }
      break;

    case ASSIGNED_MEMONHEAP:
      if (value == null) {
        unsetAssigned_memonheap();
      } else {
        setAssigned_memonheap((Double)value);
      }
      break;

    case ASSIGNED_MEMOFFHEAP:
      if (value == null) {
        unsetAssigned_memoffheap();
      } else {
        setAssigned_memoffheap((Double)value);
      }
      break;

    case ASSIGNED_CPU:
      if (value == null) {
        unsetAssigned_cpu();
      } else {
        setAssigned_cpu((Double)value);
      }
      break;

    case ASSIGNED_FPGA_DEVICE:
      if (value == null) {
        unsetAssigned_fpga_device();
      } else {
        setAssigned_fpga_device((Double)value);
      }
      break;

    case ASSIGNED_GPU_DEVICE:
      if (value == null) {
        unsetAssigned_gpu_device();
      } else {
        setAssigned_gpu_device((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case UPTIME_SECS:
      return getUptime_secs();

    case STATUS:
      return getStatus();

    case NUM_TASKS:
      return getNum_tasks();

    case NUM_WORKERS:
      return getNum_workers();

    case NUM_EXECUTORS:
      return getNum_executors();

    case NUM_FPGA_DEVICES:
      return getNum_fpga_devices();

    case NUM_GPU_DEVICES:
      return getNum_gpu_devices();

    case TOPOLOGY_CONF:
      return getTopology_conf();

    case ID_TO_SPOUT_AGG_STATS:
      return getId_to_spout_agg_stats();

    case ID_TO_BOLT_AGG_STATS:
      return getId_to_bolt_agg_stats();

    case ID_TO_ACC_BOLT_AGG_STATS:
      return getId_to_accBolt_agg_stats();

    case SCHED_STATUS:
      return getSched_status();

    case TOPOLOGY_STATS:
      return getTopology_stats();

    case OWNER:
      return getOwner();

    case DEBUG_OPTIONS:
      return getDebug_options();

    case REPLICATION_COUNT:
      return getReplication_count();

    case REQUESTED_MEMONHEAP:
      return getRequested_memonheap();

    case REQUESTED_MEMOFFHEAP:
      return getRequested_memoffheap();

    case REQUESTED_CPU:
      return getRequested_cpu();

    case REQUESTED_FPGA_DEVICE:
      return getRequested_fpga_device();

    case REQUESTED_GPU_DEVICE:
      return getRequested_gpu_device();

    case ASSIGNED_MEMONHEAP:
      return getAssigned_memonheap();

    case ASSIGNED_MEMOFFHEAP:
      return getAssigned_memoffheap();

    case ASSIGNED_CPU:
      return getAssigned_cpu();

    case ASSIGNED_FPGA_DEVICE:
      return getAssigned_fpga_device();

    case ASSIGNED_GPU_DEVICE:
      return getAssigned_gpu_device();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case UPTIME_SECS:
      return isSetUptime_secs();
    case STATUS:
      return isSetStatus();
    case NUM_TASKS:
      return isSetNum_tasks();
    case NUM_WORKERS:
      return isSetNum_workers();
    case NUM_EXECUTORS:
      return isSetNum_executors();
    case NUM_FPGA_DEVICES:
      return isSetNum_fpga_devices();
    case NUM_GPU_DEVICES:
      return isSetNum_gpu_devices();
    case TOPOLOGY_CONF:
      return isSetTopology_conf();
    case ID_TO_SPOUT_AGG_STATS:
      return isSetId_to_spout_agg_stats();
    case ID_TO_BOLT_AGG_STATS:
      return isSetId_to_bolt_agg_stats();
    case ID_TO_ACC_BOLT_AGG_STATS:
      return isSetId_to_accBolt_agg_stats();
    case SCHED_STATUS:
      return isSetSched_status();
    case TOPOLOGY_STATS:
      return isSetTopology_stats();
    case OWNER:
      return isSetOwner();
    case DEBUG_OPTIONS:
      return isSetDebug_options();
    case REPLICATION_COUNT:
      return isSetReplication_count();
    case REQUESTED_MEMONHEAP:
      return isSetRequested_memonheap();
    case REQUESTED_MEMOFFHEAP:
      return isSetRequested_memoffheap();
    case REQUESTED_CPU:
      return isSetRequested_cpu();
    case REQUESTED_FPGA_DEVICE:
      return isSetRequested_fpga_device();
    case REQUESTED_GPU_DEVICE:
      return isSetRequested_gpu_device();
    case ASSIGNED_MEMONHEAP:
      return isSetAssigned_memonheap();
    case ASSIGNED_MEMOFFHEAP:
      return isSetAssigned_memoffheap();
    case ASSIGNED_CPU:
      return isSetAssigned_cpu();
    case ASSIGNED_FPGA_DEVICE:
      return isSetAssigned_fpga_device();
    case ASSIGNED_GPU_DEVICE:
      return isSetAssigned_gpu_device();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TopologyPageInfo)
      return this.equals((TopologyPageInfo)that);
    return false;
  }

  public boolean equals(TopologyPageInfo that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_uptime_secs = true && this.isSetUptime_secs();
    boolean that_present_uptime_secs = true && that.isSetUptime_secs();
    if (this_present_uptime_secs || that_present_uptime_secs) {
      if (!(this_present_uptime_secs && that_present_uptime_secs))
        return false;
      if (this.uptime_secs != that.uptime_secs)
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_num_tasks = true && this.isSetNum_tasks();
    boolean that_present_num_tasks = true && that.isSetNum_tasks();
    if (this_present_num_tasks || that_present_num_tasks) {
      if (!(this_present_num_tasks && that_present_num_tasks))
        return false;
      if (this.num_tasks != that.num_tasks)
        return false;
    }

    boolean this_present_num_workers = true && this.isSetNum_workers();
    boolean that_present_num_workers = true && that.isSetNum_workers();
    if (this_present_num_workers || that_present_num_workers) {
      if (!(this_present_num_workers && that_present_num_workers))
        return false;
      if (this.num_workers != that.num_workers)
        return false;
    }

    boolean this_present_num_executors = true && this.isSetNum_executors();
    boolean that_present_num_executors = true && that.isSetNum_executors();
    if (this_present_num_executors || that_present_num_executors) {
      if (!(this_present_num_executors && that_present_num_executors))
        return false;
      if (this.num_executors != that.num_executors)
        return false;
    }

    boolean this_present_num_fpga_devices = true && this.isSetNum_fpga_devices();
    boolean that_present_num_fpga_devices = true && that.isSetNum_fpga_devices();
    if (this_present_num_fpga_devices || that_present_num_fpga_devices) {
      if (!(this_present_num_fpga_devices && that_present_num_fpga_devices))
        return false;
      if (this.num_fpga_devices != that.num_fpga_devices)
        return false;
    }

    boolean this_present_num_gpu_devices = true && this.isSetNum_gpu_devices();
    boolean that_present_num_gpu_devices = true && that.isSetNum_gpu_devices();
    if (this_present_num_gpu_devices || that_present_num_gpu_devices) {
      if (!(this_present_num_gpu_devices && that_present_num_gpu_devices))
        return false;
      if (this.num_gpu_devices != that.num_gpu_devices)
        return false;
    }

    boolean this_present_topology_conf = true && this.isSetTopology_conf();
    boolean that_present_topology_conf = true && that.isSetTopology_conf();
    if (this_present_topology_conf || that_present_topology_conf) {
      if (!(this_present_topology_conf && that_present_topology_conf))
        return false;
      if (!this.topology_conf.equals(that.topology_conf))
        return false;
    }

    boolean this_present_id_to_spout_agg_stats = true && this.isSetId_to_spout_agg_stats();
    boolean that_present_id_to_spout_agg_stats = true && that.isSetId_to_spout_agg_stats();
    if (this_present_id_to_spout_agg_stats || that_present_id_to_spout_agg_stats) {
      if (!(this_present_id_to_spout_agg_stats && that_present_id_to_spout_agg_stats))
        return false;
      if (!this.id_to_spout_agg_stats.equals(that.id_to_spout_agg_stats))
        return false;
    }

    boolean this_present_id_to_bolt_agg_stats = true && this.isSetId_to_bolt_agg_stats();
    boolean that_present_id_to_bolt_agg_stats = true && that.isSetId_to_bolt_agg_stats();
    if (this_present_id_to_bolt_agg_stats || that_present_id_to_bolt_agg_stats) {
      if (!(this_present_id_to_bolt_agg_stats && that_present_id_to_bolt_agg_stats))
        return false;
      if (!this.id_to_bolt_agg_stats.equals(that.id_to_bolt_agg_stats))
        return false;
    }

    boolean this_present_id_to_accBolt_agg_stats = true && this.isSetId_to_accBolt_agg_stats();
    boolean that_present_id_to_accBolt_agg_stats = true && that.isSetId_to_accBolt_agg_stats();
    if (this_present_id_to_accBolt_agg_stats || that_present_id_to_accBolt_agg_stats) {
      if (!(this_present_id_to_accBolt_agg_stats && that_present_id_to_accBolt_agg_stats))
        return false;
      if (!this.id_to_accBolt_agg_stats.equals(that.id_to_accBolt_agg_stats))
        return false;
    }

    boolean this_present_sched_status = true && this.isSetSched_status();
    boolean that_present_sched_status = true && that.isSetSched_status();
    if (this_present_sched_status || that_present_sched_status) {
      if (!(this_present_sched_status && that_present_sched_status))
        return false;
      if (!this.sched_status.equals(that.sched_status))
        return false;
    }

    boolean this_present_topology_stats = true && this.isSetTopology_stats();
    boolean that_present_topology_stats = true && that.isSetTopology_stats();
    if (this_present_topology_stats || that_present_topology_stats) {
      if (!(this_present_topology_stats && that_present_topology_stats))
        return false;
      if (!this.topology_stats.equals(that.topology_stats))
        return false;
    }

    boolean this_present_owner = true && this.isSetOwner();
    boolean that_present_owner = true && that.isSetOwner();
    if (this_present_owner || that_present_owner) {
      if (!(this_present_owner && that_present_owner))
        return false;
      if (!this.owner.equals(that.owner))
        return false;
    }

    boolean this_present_debug_options = true && this.isSetDebug_options();
    boolean that_present_debug_options = true && that.isSetDebug_options();
    if (this_present_debug_options || that_present_debug_options) {
      if (!(this_present_debug_options && that_present_debug_options))
        return false;
      if (!this.debug_options.equals(that.debug_options))
        return false;
    }

    boolean this_present_replication_count = true && this.isSetReplication_count();
    boolean that_present_replication_count = true && that.isSetReplication_count();
    if (this_present_replication_count || that_present_replication_count) {
      if (!(this_present_replication_count && that_present_replication_count))
        return false;
      if (this.replication_count != that.replication_count)
        return false;
    }

    boolean this_present_requested_memonheap = true && this.isSetRequested_memonheap();
    boolean that_present_requested_memonheap = true && that.isSetRequested_memonheap();
    if (this_present_requested_memonheap || that_present_requested_memonheap) {
      if (!(this_present_requested_memonheap && that_present_requested_memonheap))
        return false;
      if (this.requested_memonheap != that.requested_memonheap)
        return false;
    }

    boolean this_present_requested_memoffheap = true && this.isSetRequested_memoffheap();
    boolean that_present_requested_memoffheap = true && that.isSetRequested_memoffheap();
    if (this_present_requested_memoffheap || that_present_requested_memoffheap) {
      if (!(this_present_requested_memoffheap && that_present_requested_memoffheap))
        return false;
      if (this.requested_memoffheap != that.requested_memoffheap)
        return false;
    }

    boolean this_present_requested_cpu = true && this.isSetRequested_cpu();
    boolean that_present_requested_cpu = true && that.isSetRequested_cpu();
    if (this_present_requested_cpu || that_present_requested_cpu) {
      if (!(this_present_requested_cpu && that_present_requested_cpu))
        return false;
      if (this.requested_cpu != that.requested_cpu)
        return false;
    }

    boolean this_present_requested_fpga_device = true && this.isSetRequested_fpga_device();
    boolean that_present_requested_fpga_device = true && that.isSetRequested_fpga_device();
    if (this_present_requested_fpga_device || that_present_requested_fpga_device) {
      if (!(this_present_requested_fpga_device && that_present_requested_fpga_device))
        return false;
      if (this.requested_fpga_device != that.requested_fpga_device)
        return false;
    }

    boolean this_present_requested_gpu_device = true && this.isSetRequested_gpu_device();
    boolean that_present_requested_gpu_device = true && that.isSetRequested_gpu_device();
    if (this_present_requested_gpu_device || that_present_requested_gpu_device) {
      if (!(this_present_requested_gpu_device && that_present_requested_gpu_device))
        return false;
      if (this.requested_gpu_device != that.requested_gpu_device)
        return false;
    }

    boolean this_present_assigned_memonheap = true && this.isSetAssigned_memonheap();
    boolean that_present_assigned_memonheap = true && that.isSetAssigned_memonheap();
    if (this_present_assigned_memonheap || that_present_assigned_memonheap) {
      if (!(this_present_assigned_memonheap && that_present_assigned_memonheap))
        return false;
      if (this.assigned_memonheap != that.assigned_memonheap)
        return false;
    }

    boolean this_present_assigned_memoffheap = true && this.isSetAssigned_memoffheap();
    boolean that_present_assigned_memoffheap = true && that.isSetAssigned_memoffheap();
    if (this_present_assigned_memoffheap || that_present_assigned_memoffheap) {
      if (!(this_present_assigned_memoffheap && that_present_assigned_memoffheap))
        return false;
      if (this.assigned_memoffheap != that.assigned_memoffheap)
        return false;
    }

    boolean this_present_assigned_cpu = true && this.isSetAssigned_cpu();
    boolean that_present_assigned_cpu = true && that.isSetAssigned_cpu();
    if (this_present_assigned_cpu || that_present_assigned_cpu) {
      if (!(this_present_assigned_cpu && that_present_assigned_cpu))
        return false;
      if (this.assigned_cpu != that.assigned_cpu)
        return false;
    }

    boolean this_present_assigned_fpga_device = true && this.isSetAssigned_fpga_device();
    boolean that_present_assigned_fpga_device = true && that.isSetAssigned_fpga_device();
    if (this_present_assigned_fpga_device || that_present_assigned_fpga_device) {
      if (!(this_present_assigned_fpga_device && that_present_assigned_fpga_device))
        return false;
      if (this.assigned_fpga_device != that.assigned_fpga_device)
        return false;
    }

    boolean this_present_assigned_gpu_device = true && this.isSetAssigned_gpu_device();
    boolean that_present_assigned_gpu_device = true && that.isSetAssigned_gpu_device();
    if (this_present_assigned_gpu_device || that_present_assigned_gpu_device) {
      if (!(this_present_assigned_gpu_device && that_present_assigned_gpu_device))
        return false;
      if (this.assigned_gpu_device != that.assigned_gpu_device)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_uptime_secs = true && (isSetUptime_secs());
    list.add(present_uptime_secs);
    if (present_uptime_secs)
      list.add(uptime_secs);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_num_tasks = true && (isSetNum_tasks());
    list.add(present_num_tasks);
    if (present_num_tasks)
      list.add(num_tasks);

    boolean present_num_workers = true && (isSetNum_workers());
    list.add(present_num_workers);
    if (present_num_workers)
      list.add(num_workers);

    boolean present_num_executors = true && (isSetNum_executors());
    list.add(present_num_executors);
    if (present_num_executors)
      list.add(num_executors);

    boolean present_num_fpga_devices = true && (isSetNum_fpga_devices());
    list.add(present_num_fpga_devices);
    if (present_num_fpga_devices)
      list.add(num_fpga_devices);

    boolean present_num_gpu_devices = true && (isSetNum_gpu_devices());
    list.add(present_num_gpu_devices);
    if (present_num_gpu_devices)
      list.add(num_gpu_devices);

    boolean present_topology_conf = true && (isSetTopology_conf());
    list.add(present_topology_conf);
    if (present_topology_conf)
      list.add(topology_conf);

    boolean present_id_to_spout_agg_stats = true && (isSetId_to_spout_agg_stats());
    list.add(present_id_to_spout_agg_stats);
    if (present_id_to_spout_agg_stats)
      list.add(id_to_spout_agg_stats);

    boolean present_id_to_bolt_agg_stats = true && (isSetId_to_bolt_agg_stats());
    list.add(present_id_to_bolt_agg_stats);
    if (present_id_to_bolt_agg_stats)
      list.add(id_to_bolt_agg_stats);

    boolean present_id_to_accBolt_agg_stats = true && (isSetId_to_accBolt_agg_stats());
    list.add(present_id_to_accBolt_agg_stats);
    if (present_id_to_accBolt_agg_stats)
      list.add(id_to_accBolt_agg_stats);

    boolean present_sched_status = true && (isSetSched_status());
    list.add(present_sched_status);
    if (present_sched_status)
      list.add(sched_status);

    boolean present_topology_stats = true && (isSetTopology_stats());
    list.add(present_topology_stats);
    if (present_topology_stats)
      list.add(topology_stats);

    boolean present_owner = true && (isSetOwner());
    list.add(present_owner);
    if (present_owner)
      list.add(owner);

    boolean present_debug_options = true && (isSetDebug_options());
    list.add(present_debug_options);
    if (present_debug_options)
      list.add(debug_options);

    boolean present_replication_count = true && (isSetReplication_count());
    list.add(present_replication_count);
    if (present_replication_count)
      list.add(replication_count);

    boolean present_requested_memonheap = true && (isSetRequested_memonheap());
    list.add(present_requested_memonheap);
    if (present_requested_memonheap)
      list.add(requested_memonheap);

    boolean present_requested_memoffheap = true && (isSetRequested_memoffheap());
    list.add(present_requested_memoffheap);
    if (present_requested_memoffheap)
      list.add(requested_memoffheap);

    boolean present_requested_cpu = true && (isSetRequested_cpu());
    list.add(present_requested_cpu);
    if (present_requested_cpu)
      list.add(requested_cpu);

    boolean present_requested_fpga_device = true && (isSetRequested_fpga_device());
    list.add(present_requested_fpga_device);
    if (present_requested_fpga_device)
      list.add(requested_fpga_device);

    boolean present_requested_gpu_device = true && (isSetRequested_gpu_device());
    list.add(present_requested_gpu_device);
    if (present_requested_gpu_device)
      list.add(requested_gpu_device);

    boolean present_assigned_memonheap = true && (isSetAssigned_memonheap());
    list.add(present_assigned_memonheap);
    if (present_assigned_memonheap)
      list.add(assigned_memonheap);

    boolean present_assigned_memoffheap = true && (isSetAssigned_memoffheap());
    list.add(present_assigned_memoffheap);
    if (present_assigned_memoffheap)
      list.add(assigned_memoffheap);

    boolean present_assigned_cpu = true && (isSetAssigned_cpu());
    list.add(present_assigned_cpu);
    if (present_assigned_cpu)
      list.add(assigned_cpu);

    boolean present_assigned_fpga_device = true && (isSetAssigned_fpga_device());
    list.add(present_assigned_fpga_device);
    if (present_assigned_fpga_device)
      list.add(assigned_fpga_device);

    boolean present_assigned_gpu_device = true && (isSetAssigned_gpu_device());
    list.add(present_assigned_gpu_device);
    if (present_assigned_gpu_device)
      list.add(assigned_gpu_device);

    return list.hashCode();
  }

  @Override
  public int compareTo(TopologyPageInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUptime_secs()).compareTo(other.isSetUptime_secs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUptime_secs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uptime_secs, other.uptime_secs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_tasks()).compareTo(other.isSetNum_tasks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_tasks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_tasks, other.num_tasks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_workers()).compareTo(other.isSetNum_workers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_workers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_workers, other.num_workers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_executors()).compareTo(other.isSetNum_executors());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_executors()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_executors, other.num_executors);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_fpga_devices()).compareTo(other.isSetNum_fpga_devices());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_fpga_devices()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_fpga_devices, other.num_fpga_devices);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_gpu_devices()).compareTo(other.isSetNum_gpu_devices());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_gpu_devices()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_gpu_devices, other.num_gpu_devices);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopology_conf()).compareTo(other.isSetTopology_conf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopology_conf()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topology_conf, other.topology_conf);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId_to_spout_agg_stats()).compareTo(other.isSetId_to_spout_agg_stats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId_to_spout_agg_stats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id_to_spout_agg_stats, other.id_to_spout_agg_stats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId_to_bolt_agg_stats()).compareTo(other.isSetId_to_bolt_agg_stats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId_to_bolt_agg_stats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id_to_bolt_agg_stats, other.id_to_bolt_agg_stats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId_to_accBolt_agg_stats()).compareTo(other.isSetId_to_accBolt_agg_stats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId_to_accBolt_agg_stats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id_to_accBolt_agg_stats, other.id_to_accBolt_agg_stats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSched_status()).compareTo(other.isSetSched_status());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSched_status()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sched_status, other.sched_status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopology_stats()).compareTo(other.isSetTopology_stats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopology_stats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topology_stats, other.topology_stats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOwner()).compareTo(other.isSetOwner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.owner, other.owner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDebug_options()).compareTo(other.isSetDebug_options());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDebug_options()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.debug_options, other.debug_options);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReplication_count()).compareTo(other.isSetReplication_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplication_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replication_count, other.replication_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequested_memonheap()).compareTo(other.isSetRequested_memonheap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequested_memonheap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requested_memonheap, other.requested_memonheap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequested_memoffheap()).compareTo(other.isSetRequested_memoffheap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequested_memoffheap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requested_memoffheap, other.requested_memoffheap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequested_cpu()).compareTo(other.isSetRequested_cpu());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequested_cpu()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requested_cpu, other.requested_cpu);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequested_fpga_device()).compareTo(other.isSetRequested_fpga_device());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequested_fpga_device()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requested_fpga_device, other.requested_fpga_device);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequested_gpu_device()).compareTo(other.isSetRequested_gpu_device());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequested_gpu_device()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requested_gpu_device, other.requested_gpu_device);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssigned_memonheap()).compareTo(other.isSetAssigned_memonheap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssigned_memonheap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assigned_memonheap, other.assigned_memonheap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssigned_memoffheap()).compareTo(other.isSetAssigned_memoffheap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssigned_memoffheap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assigned_memoffheap, other.assigned_memoffheap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssigned_cpu()).compareTo(other.isSetAssigned_cpu());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssigned_cpu()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assigned_cpu, other.assigned_cpu);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssigned_fpga_device()).compareTo(other.isSetAssigned_fpga_device());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssigned_fpga_device()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assigned_fpga_device, other.assigned_fpga_device);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssigned_gpu_device()).compareTo(other.isSetAssigned_gpu_device());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssigned_gpu_device()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assigned_gpu_device, other.assigned_gpu_device);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TopologyPageInfo(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetUptime_secs()) {
      if (!first) sb.append(", ");
      sb.append("uptime_secs:");
      sb.append(this.uptime_secs);
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
    }
    if (isSetNum_tasks()) {
      if (!first) sb.append(", ");
      sb.append("num_tasks:");
      sb.append(this.num_tasks);
      first = false;
    }
    if (isSetNum_workers()) {
      if (!first) sb.append(", ");
      sb.append("num_workers:");
      sb.append(this.num_workers);
      first = false;
    }
    if (isSetNum_executors()) {
      if (!first) sb.append(", ");
      sb.append("num_executors:");
      sb.append(this.num_executors);
      first = false;
    }
    if (isSetNum_fpga_devices()) {
      if (!first) sb.append(", ");
      sb.append("num_fpga_devices:");
      sb.append(this.num_fpga_devices);
      first = false;
    }
    if (isSetNum_gpu_devices()) {
      if (!first) sb.append(", ");
      sb.append("num_gpu_devices:");
      sb.append(this.num_gpu_devices);
      first = false;
    }
    if (isSetTopology_conf()) {
      if (!first) sb.append(", ");
      sb.append("topology_conf:");
      if (this.topology_conf == null) {
        sb.append("null");
      } else {
        sb.append(this.topology_conf);
      }
      first = false;
    }
    if (isSetId_to_spout_agg_stats()) {
      if (!first) sb.append(", ");
      sb.append("id_to_spout_agg_stats:");
      if (this.id_to_spout_agg_stats == null) {
        sb.append("null");
      } else {
        sb.append(this.id_to_spout_agg_stats);
      }
      first = false;
    }
    if (isSetId_to_bolt_agg_stats()) {
      if (!first) sb.append(", ");
      sb.append("id_to_bolt_agg_stats:");
      if (this.id_to_bolt_agg_stats == null) {
        sb.append("null");
      } else {
        sb.append(this.id_to_bolt_agg_stats);
      }
      first = false;
    }
    if (isSetId_to_accBolt_agg_stats()) {
      if (!first) sb.append(", ");
      sb.append("id_to_accBolt_agg_stats:");
      if (this.id_to_accBolt_agg_stats == null) {
        sb.append("null");
      } else {
        sb.append(this.id_to_accBolt_agg_stats);
      }
      first = false;
    }
    if (isSetSched_status()) {
      if (!first) sb.append(", ");
      sb.append("sched_status:");
      if (this.sched_status == null) {
        sb.append("null");
      } else {
        sb.append(this.sched_status);
      }
      first = false;
    }
    if (isSetTopology_stats()) {
      if (!first) sb.append(", ");
      sb.append("topology_stats:");
      if (this.topology_stats == null) {
        sb.append("null");
      } else {
        sb.append(this.topology_stats);
      }
      first = false;
    }
    if (isSetOwner()) {
      if (!first) sb.append(", ");
      sb.append("owner:");
      if (this.owner == null) {
        sb.append("null");
      } else {
        sb.append(this.owner);
      }
      first = false;
    }
    if (isSetDebug_options()) {
      if (!first) sb.append(", ");
      sb.append("debug_options:");
      if (this.debug_options == null) {
        sb.append("null");
      } else {
        sb.append(this.debug_options);
      }
      first = false;
    }
    if (isSetReplication_count()) {
      if (!first) sb.append(", ");
      sb.append("replication_count:");
      sb.append(this.replication_count);
      first = false;
    }
    if (isSetRequested_memonheap()) {
      if (!first) sb.append(", ");
      sb.append("requested_memonheap:");
      sb.append(this.requested_memonheap);
      first = false;
    }
    if (isSetRequested_memoffheap()) {
      if (!first) sb.append(", ");
      sb.append("requested_memoffheap:");
      sb.append(this.requested_memoffheap);
      first = false;
    }
    if (isSetRequested_cpu()) {
      if (!first) sb.append(", ");
      sb.append("requested_cpu:");
      sb.append(this.requested_cpu);
      first = false;
    }
    if (isSetRequested_fpga_device()) {
      if (!first) sb.append(", ");
      sb.append("requested_fpga_device:");
      sb.append(this.requested_fpga_device);
      first = false;
    }
    if (isSetRequested_gpu_device()) {
      if (!first) sb.append(", ");
      sb.append("requested_gpu_device:");
      sb.append(this.requested_gpu_device);
      first = false;
    }
    if (isSetAssigned_memonheap()) {
      if (!first) sb.append(", ");
      sb.append("assigned_memonheap:");
      sb.append(this.assigned_memonheap);
      first = false;
    }
    if (isSetAssigned_memoffheap()) {
      if (!first) sb.append(", ");
      sb.append("assigned_memoffheap:");
      sb.append(this.assigned_memoffheap);
      first = false;
    }
    if (isSetAssigned_cpu()) {
      if (!first) sb.append(", ");
      sb.append("assigned_cpu:");
      sb.append(this.assigned_cpu);
      first = false;
    }
    if (isSetAssigned_fpga_device()) {
      if (!first) sb.append(", ");
      sb.append("assigned_fpga_device:");
      sb.append(this.assigned_fpga_device);
      first = false;
    }
    if (isSetAssigned_gpu_device()) {
      if (!first) sb.append(", ");
      sb.append("assigned_gpu_device:");
      sb.append(this.assigned_gpu_device);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (topology_stats != null) {
      topology_stats.validate();
    }
    if (debug_options != null) {
      debug_options.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TopologyPageInfoStandardSchemeFactory implements SchemeFactory {
    public TopologyPageInfoStandardScheme getScheme() {
      return new TopologyPageInfoStandardScheme();
    }
  }

  private static class TopologyPageInfoStandardScheme extends StandardScheme<TopologyPageInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TopologyPageInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // UPTIME_SECS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.uptime_secs = iprot.readI32();
              struct.setUptime_secsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NUM_TASKS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_tasks = iprot.readI32();
              struct.setNum_tasksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NUM_WORKERS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_workers = iprot.readI32();
              struct.setNum_workersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NUM_EXECUTORS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_executors = iprot.readI32();
              struct.setNum_executorsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // NUM_FPGA_DEVICES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_fpga_devices = iprot.readI32();
              struct.setNum_fpga_devicesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // NUM_GPU_DEVICES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_gpu_devices = iprot.readI32();
              struct.setNum_gpu_devicesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TOPOLOGY_CONF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.topology_conf = iprot.readString();
              struct.setTopology_confIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ID_TO_SPOUT_AGG_STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map512 = iprot.readMapBegin();
                struct.id_to_spout_agg_stats = new HashMap<String,ComponentAggregateStats>(2*_map512.size);
                String _key513;
                ComponentAggregateStats _val514;
                for (int _i515 = 0; _i515 < _map512.size; ++_i515)
                {
                  _key513 = iprot.readString();
                  _val514 = new ComponentAggregateStats();
                  _val514.read(iprot);
                  struct.id_to_spout_agg_stats.put(_key513, _val514);
                }
                iprot.readMapEnd();
              }
              struct.setId_to_spout_agg_statsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ID_TO_BOLT_AGG_STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map516 = iprot.readMapBegin();
                struct.id_to_bolt_agg_stats = new HashMap<String,ComponentAggregateStats>(2*_map516.size);
                String _key517;
                ComponentAggregateStats _val518;
                for (int _i519 = 0; _i519 < _map516.size; ++_i519)
                {
                  _key517 = iprot.readString();
                  _val518 = new ComponentAggregateStats();
                  _val518.read(iprot);
                  struct.id_to_bolt_agg_stats.put(_key517, _val518);
                }
                iprot.readMapEnd();
              }
              struct.setId_to_bolt_agg_statsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ID_TO_ACC_BOLT_AGG_STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map520 = iprot.readMapBegin();
                struct.id_to_accBolt_agg_stats = new HashMap<String,ComponentAggregateStats>(2*_map520.size);
                String _key521;
                ComponentAggregateStats _val522;
                for (int _i523 = 0; _i523 < _map520.size; ++_i523)
                {
                  _key521 = iprot.readString();
                  _val522 = new ComponentAggregateStats();
                  _val522.read(iprot);
                  struct.id_to_accBolt_agg_stats.put(_key521, _val522);
                }
                iprot.readMapEnd();
              }
              struct.setId_to_accBolt_agg_statsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SCHED_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sched_status = iprot.readString();
              struct.setSched_statusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // TOPOLOGY_STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.topology_stats = new TopologyStats();
              struct.topology_stats.read(iprot);
              struct.setTopology_statsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // OWNER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.owner = iprot.readString();
              struct.setOwnerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // DEBUG_OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.debug_options = new DebugOptions();
              struct.debug_options.read(iprot);
              struct.setDebug_optionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // REPLICATION_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.replication_count = iprot.readI32();
              struct.setReplication_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 521: // REQUESTED_MEMONHEAP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.requested_memonheap = iprot.readDouble();
              struct.setRequested_memonheapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 522: // REQUESTED_MEMOFFHEAP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.requested_memoffheap = iprot.readDouble();
              struct.setRequested_memoffheapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 523: // REQUESTED_CPU
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.requested_cpu = iprot.readDouble();
              struct.setRequested_cpuIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 524: // REQUESTED_FPGA_DEVICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.requested_fpga_device = iprot.readDouble();
              struct.setRequested_fpga_deviceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 525: // REQUESTED_GPU_DEVICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.requested_gpu_device = iprot.readDouble();
              struct.setRequested_gpu_deviceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 526: // ASSIGNED_MEMONHEAP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.assigned_memonheap = iprot.readDouble();
              struct.setAssigned_memonheapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 527: // ASSIGNED_MEMOFFHEAP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.assigned_memoffheap = iprot.readDouble();
              struct.setAssigned_memoffheapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 528: // ASSIGNED_CPU
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.assigned_cpu = iprot.readDouble();
              struct.setAssigned_cpuIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 529: // ASSIGNED_FPGA_DEVICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.assigned_fpga_device = iprot.readDouble();
              struct.setAssigned_fpga_deviceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 530: // ASSIGNED_GPU_DEVICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.assigned_gpu_device = iprot.readDouble();
              struct.setAssigned_gpu_deviceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TopologyPageInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUptime_secs()) {
        oprot.writeFieldBegin(UPTIME_SECS_FIELD_DESC);
        oprot.writeI32(struct.uptime_secs);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        if (struct.isSetStatus()) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeString(struct.status);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNum_tasks()) {
        oprot.writeFieldBegin(NUM_TASKS_FIELD_DESC);
        oprot.writeI32(struct.num_tasks);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNum_workers()) {
        oprot.writeFieldBegin(NUM_WORKERS_FIELD_DESC);
        oprot.writeI32(struct.num_workers);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNum_executors()) {
        oprot.writeFieldBegin(NUM_EXECUTORS_FIELD_DESC);
        oprot.writeI32(struct.num_executors);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNum_fpga_devices()) {
        oprot.writeFieldBegin(NUM_FPGA_DEVICES_FIELD_DESC);
        oprot.writeI32(struct.num_fpga_devices);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNum_gpu_devices()) {
        oprot.writeFieldBegin(NUM_GPU_DEVICES_FIELD_DESC);
        oprot.writeI32(struct.num_gpu_devices);
        oprot.writeFieldEnd();
      }
      if (struct.topology_conf != null) {
        if (struct.isSetTopology_conf()) {
          oprot.writeFieldBegin(TOPOLOGY_CONF_FIELD_DESC);
          oprot.writeString(struct.topology_conf);
          oprot.writeFieldEnd();
        }
      }
      if (struct.id_to_spout_agg_stats != null) {
        if (struct.isSetId_to_spout_agg_stats()) {
          oprot.writeFieldBegin(ID_TO_SPOUT_AGG_STATS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.id_to_spout_agg_stats.size()));
            for (Map.Entry<String, ComponentAggregateStats> _iter524 : struct.id_to_spout_agg_stats.entrySet())
            {
              oprot.writeString(_iter524.getKey());
              _iter524.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.id_to_bolt_agg_stats != null) {
        if (struct.isSetId_to_bolt_agg_stats()) {
          oprot.writeFieldBegin(ID_TO_BOLT_AGG_STATS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.id_to_bolt_agg_stats.size()));
            for (Map.Entry<String, ComponentAggregateStats> _iter525 : struct.id_to_bolt_agg_stats.entrySet())
            {
              oprot.writeString(_iter525.getKey());
              _iter525.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.id_to_accBolt_agg_stats != null) {
        if (struct.isSetId_to_accBolt_agg_stats()) {
          oprot.writeFieldBegin(ID_TO_ACC_BOLT_AGG_STATS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.id_to_accBolt_agg_stats.size()));
            for (Map.Entry<String, ComponentAggregateStats> _iter526 : struct.id_to_accBolt_agg_stats.entrySet())
            {
              oprot.writeString(_iter526.getKey());
              _iter526.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.sched_status != null) {
        if (struct.isSetSched_status()) {
          oprot.writeFieldBegin(SCHED_STATUS_FIELD_DESC);
          oprot.writeString(struct.sched_status);
          oprot.writeFieldEnd();
        }
      }
      if (struct.topology_stats != null) {
        if (struct.isSetTopology_stats()) {
          oprot.writeFieldBegin(TOPOLOGY_STATS_FIELD_DESC);
          struct.topology_stats.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.owner != null) {
        if (struct.isSetOwner()) {
          oprot.writeFieldBegin(OWNER_FIELD_DESC);
          oprot.writeString(struct.owner);
          oprot.writeFieldEnd();
        }
      }
      if (struct.debug_options != null) {
        if (struct.isSetDebug_options()) {
          oprot.writeFieldBegin(DEBUG_OPTIONS_FIELD_DESC);
          struct.debug_options.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetReplication_count()) {
        oprot.writeFieldBegin(REPLICATION_COUNT_FIELD_DESC);
        oprot.writeI32(struct.replication_count);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRequested_memonheap()) {
        oprot.writeFieldBegin(REQUESTED_MEMONHEAP_FIELD_DESC);
        oprot.writeDouble(struct.requested_memonheap);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRequested_memoffheap()) {
        oprot.writeFieldBegin(REQUESTED_MEMOFFHEAP_FIELD_DESC);
        oprot.writeDouble(struct.requested_memoffheap);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRequested_cpu()) {
        oprot.writeFieldBegin(REQUESTED_CPU_FIELD_DESC);
        oprot.writeDouble(struct.requested_cpu);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRequested_fpga_device()) {
        oprot.writeFieldBegin(REQUESTED_FPGA_DEVICE_FIELD_DESC);
        oprot.writeDouble(struct.requested_fpga_device);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRequested_gpu_device()) {
        oprot.writeFieldBegin(REQUESTED_GPU_DEVICE_FIELD_DESC);
        oprot.writeDouble(struct.requested_gpu_device);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAssigned_memonheap()) {
        oprot.writeFieldBegin(ASSIGNED_MEMONHEAP_FIELD_DESC);
        oprot.writeDouble(struct.assigned_memonheap);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAssigned_memoffheap()) {
        oprot.writeFieldBegin(ASSIGNED_MEMOFFHEAP_FIELD_DESC);
        oprot.writeDouble(struct.assigned_memoffheap);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAssigned_cpu()) {
        oprot.writeFieldBegin(ASSIGNED_CPU_FIELD_DESC);
        oprot.writeDouble(struct.assigned_cpu);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAssigned_fpga_device()) {
        oprot.writeFieldBegin(ASSIGNED_FPGA_DEVICE_FIELD_DESC);
        oprot.writeDouble(struct.assigned_fpga_device);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAssigned_gpu_device()) {
        oprot.writeFieldBegin(ASSIGNED_GPU_DEVICE_FIELD_DESC);
        oprot.writeDouble(struct.assigned_gpu_device);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TopologyPageInfoTupleSchemeFactory implements SchemeFactory {
    public TopologyPageInfoTupleScheme getScheme() {
      return new TopologyPageInfoTupleScheme();
    }
  }

  private static class TopologyPageInfoTupleScheme extends TupleScheme<TopologyPageInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TopologyPageInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.id);
      BitSet optionals = new BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetUptime_secs()) {
        optionals.set(1);
      }
      if (struct.isSetStatus()) {
        optionals.set(2);
      }
      if (struct.isSetNum_tasks()) {
        optionals.set(3);
      }
      if (struct.isSetNum_workers()) {
        optionals.set(4);
      }
      if (struct.isSetNum_executors()) {
        optionals.set(5);
      }
      if (struct.isSetNum_fpga_devices()) {
        optionals.set(6);
      }
      if (struct.isSetNum_gpu_devices()) {
        optionals.set(7);
      }
      if (struct.isSetTopology_conf()) {
        optionals.set(8);
      }
      if (struct.isSetId_to_spout_agg_stats()) {
        optionals.set(9);
      }
      if (struct.isSetId_to_bolt_agg_stats()) {
        optionals.set(10);
      }
      if (struct.isSetId_to_accBolt_agg_stats()) {
        optionals.set(11);
      }
      if (struct.isSetSched_status()) {
        optionals.set(12);
      }
      if (struct.isSetTopology_stats()) {
        optionals.set(13);
      }
      if (struct.isSetOwner()) {
        optionals.set(14);
      }
      if (struct.isSetDebug_options()) {
        optionals.set(15);
      }
      if (struct.isSetReplication_count()) {
        optionals.set(16);
      }
      if (struct.isSetRequested_memonheap()) {
        optionals.set(17);
      }
      if (struct.isSetRequested_memoffheap()) {
        optionals.set(18);
      }
      if (struct.isSetRequested_cpu()) {
        optionals.set(19);
      }
      if (struct.isSetRequested_fpga_device()) {
        optionals.set(20);
      }
      if (struct.isSetRequested_gpu_device()) {
        optionals.set(21);
      }
      if (struct.isSetAssigned_memonheap()) {
        optionals.set(22);
      }
      if (struct.isSetAssigned_memoffheap()) {
        optionals.set(23);
      }
      if (struct.isSetAssigned_cpu()) {
        optionals.set(24);
      }
      if (struct.isSetAssigned_fpga_device()) {
        optionals.set(25);
      }
      if (struct.isSetAssigned_gpu_device()) {
        optionals.set(26);
      }
      oprot.writeBitSet(optionals, 27);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetUptime_secs()) {
        oprot.writeI32(struct.uptime_secs);
      }
      if (struct.isSetStatus()) {
        oprot.writeString(struct.status);
      }
      if (struct.isSetNum_tasks()) {
        oprot.writeI32(struct.num_tasks);
      }
      if (struct.isSetNum_workers()) {
        oprot.writeI32(struct.num_workers);
      }
      if (struct.isSetNum_executors()) {
        oprot.writeI32(struct.num_executors);
      }
      if (struct.isSetNum_fpga_devices()) {
        oprot.writeI32(struct.num_fpga_devices);
      }
      if (struct.isSetNum_gpu_devices()) {
        oprot.writeI32(struct.num_gpu_devices);
      }
      if (struct.isSetTopology_conf()) {
        oprot.writeString(struct.topology_conf);
      }
      if (struct.isSetId_to_spout_agg_stats()) {
        {
          oprot.writeI32(struct.id_to_spout_agg_stats.size());
          for (Map.Entry<String, ComponentAggregateStats> _iter527 : struct.id_to_spout_agg_stats.entrySet())
          {
            oprot.writeString(_iter527.getKey());
            _iter527.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetId_to_bolt_agg_stats()) {
        {
          oprot.writeI32(struct.id_to_bolt_agg_stats.size());
          for (Map.Entry<String, ComponentAggregateStats> _iter528 : struct.id_to_bolt_agg_stats.entrySet())
          {
            oprot.writeString(_iter528.getKey());
            _iter528.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetId_to_accBolt_agg_stats()) {
        {
          oprot.writeI32(struct.id_to_accBolt_agg_stats.size());
          for (Map.Entry<String, ComponentAggregateStats> _iter529 : struct.id_to_accBolt_agg_stats.entrySet())
          {
            oprot.writeString(_iter529.getKey());
            _iter529.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetSched_status()) {
        oprot.writeString(struct.sched_status);
      }
      if (struct.isSetTopology_stats()) {
        struct.topology_stats.write(oprot);
      }
      if (struct.isSetOwner()) {
        oprot.writeString(struct.owner);
      }
      if (struct.isSetDebug_options()) {
        struct.debug_options.write(oprot);
      }
      if (struct.isSetReplication_count()) {
        oprot.writeI32(struct.replication_count);
      }
      if (struct.isSetRequested_memonheap()) {
        oprot.writeDouble(struct.requested_memonheap);
      }
      if (struct.isSetRequested_memoffheap()) {
        oprot.writeDouble(struct.requested_memoffheap);
      }
      if (struct.isSetRequested_cpu()) {
        oprot.writeDouble(struct.requested_cpu);
      }
      if (struct.isSetRequested_fpga_device()) {
        oprot.writeDouble(struct.requested_fpga_device);
      }
      if (struct.isSetRequested_gpu_device()) {
        oprot.writeDouble(struct.requested_gpu_device);
      }
      if (struct.isSetAssigned_memonheap()) {
        oprot.writeDouble(struct.assigned_memonheap);
      }
      if (struct.isSetAssigned_memoffheap()) {
        oprot.writeDouble(struct.assigned_memoffheap);
      }
      if (struct.isSetAssigned_cpu()) {
        oprot.writeDouble(struct.assigned_cpu);
      }
      if (struct.isSetAssigned_fpga_device()) {
        oprot.writeDouble(struct.assigned_fpga_device);
      }
      if (struct.isSetAssigned_gpu_device()) {
        oprot.writeDouble(struct.assigned_gpu_device);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TopologyPageInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readString();
      struct.setIdIsSet(true);
      BitSet incoming = iprot.readBitSet(27);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.uptime_secs = iprot.readI32();
        struct.setUptime_secsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.status = iprot.readString();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(3)) {
        struct.num_tasks = iprot.readI32();
        struct.setNum_tasksIsSet(true);
      }
      if (incoming.get(4)) {
        struct.num_workers = iprot.readI32();
        struct.setNum_workersIsSet(true);
      }
      if (incoming.get(5)) {
        struct.num_executors = iprot.readI32();
        struct.setNum_executorsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.num_fpga_devices = iprot.readI32();
        struct.setNum_fpga_devicesIsSet(true);
      }
      if (incoming.get(7)) {
        struct.num_gpu_devices = iprot.readI32();
        struct.setNum_gpu_devicesIsSet(true);
      }
      if (incoming.get(8)) {
        struct.topology_conf = iprot.readString();
        struct.setTopology_confIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TMap _map530 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.id_to_spout_agg_stats = new HashMap<String,ComponentAggregateStats>(2*_map530.size);
          String _key531;
          ComponentAggregateStats _val532;
          for (int _i533 = 0; _i533 < _map530.size; ++_i533)
          {
            _key531 = iprot.readString();
            _val532 = new ComponentAggregateStats();
            _val532.read(iprot);
            struct.id_to_spout_agg_stats.put(_key531, _val532);
          }
        }
        struct.setId_to_spout_agg_statsIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TMap _map534 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.id_to_bolt_agg_stats = new HashMap<String,ComponentAggregateStats>(2*_map534.size);
          String _key535;
          ComponentAggregateStats _val536;
          for (int _i537 = 0; _i537 < _map534.size; ++_i537)
          {
            _key535 = iprot.readString();
            _val536 = new ComponentAggregateStats();
            _val536.read(iprot);
            struct.id_to_bolt_agg_stats.put(_key535, _val536);
          }
        }
        struct.setId_to_bolt_agg_statsIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TMap _map538 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.id_to_accBolt_agg_stats = new HashMap<String,ComponentAggregateStats>(2*_map538.size);
          String _key539;
          ComponentAggregateStats _val540;
          for (int _i541 = 0; _i541 < _map538.size; ++_i541)
          {
            _key539 = iprot.readString();
            _val540 = new ComponentAggregateStats();
            _val540.read(iprot);
            struct.id_to_accBolt_agg_stats.put(_key539, _val540);
          }
        }
        struct.setId_to_accBolt_agg_statsIsSet(true);
      }
      if (incoming.get(12)) {
        struct.sched_status = iprot.readString();
        struct.setSched_statusIsSet(true);
      }
      if (incoming.get(13)) {
        struct.topology_stats = new TopologyStats();
        struct.topology_stats.read(iprot);
        struct.setTopology_statsIsSet(true);
      }
      if (incoming.get(14)) {
        struct.owner = iprot.readString();
        struct.setOwnerIsSet(true);
      }
      if (incoming.get(15)) {
        struct.debug_options = new DebugOptions();
        struct.debug_options.read(iprot);
        struct.setDebug_optionsIsSet(true);
      }
      if (incoming.get(16)) {
        struct.replication_count = iprot.readI32();
        struct.setReplication_countIsSet(true);
      }
      if (incoming.get(17)) {
        struct.requested_memonheap = iprot.readDouble();
        struct.setRequested_memonheapIsSet(true);
      }
      if (incoming.get(18)) {
        struct.requested_memoffheap = iprot.readDouble();
        struct.setRequested_memoffheapIsSet(true);
      }
      if (incoming.get(19)) {
        struct.requested_cpu = iprot.readDouble();
        struct.setRequested_cpuIsSet(true);
      }
      if (incoming.get(20)) {
        struct.requested_fpga_device = iprot.readDouble();
        struct.setRequested_fpga_deviceIsSet(true);
      }
      if (incoming.get(21)) {
        struct.requested_gpu_device = iprot.readDouble();
        struct.setRequested_gpu_deviceIsSet(true);
      }
      if (incoming.get(22)) {
        struct.assigned_memonheap = iprot.readDouble();
        struct.setAssigned_memonheapIsSet(true);
      }
      if (incoming.get(23)) {
        struct.assigned_memoffheap = iprot.readDouble();
        struct.setAssigned_memoffheapIsSet(true);
      }
      if (incoming.get(24)) {
        struct.assigned_cpu = iprot.readDouble();
        struct.setAssigned_cpuIsSet(true);
      }
      if (incoming.get(25)) {
        struct.assigned_fpga_device = iprot.readDouble();
        struct.setAssigned_fpga_deviceIsSet(true);
      }
      if (incoming.get(26)) {
        struct.assigned_gpu_device = iprot.readDouble();
        struct.setAssigned_gpu_deviceIsSet(true);
      }
    }
  }

}

