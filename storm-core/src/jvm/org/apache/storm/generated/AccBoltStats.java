/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.storm.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-12-08")
public class AccBoltStats implements org.apache.thrift.TBase<AccBoltStats, AccBoltStats._Fields>, java.io.Serializable, Cloneable, Comparable<AccBoltStats> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AccBoltStats");

  private static final org.apache.thrift.protocol.TField ACKED_FIELD_DESC = new org.apache.thrift.protocol.TField("acked", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField FAILED_FIELD_DESC = new org.apache.thrift.protocol.TField("failed", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField BATCH_PROCESS_MS_AVG_FIELD_DESC = new org.apache.thrift.protocol.TField("batch_process_ms_avg", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField EXECUTED_FIELD_DESC = new org.apache.thrift.protocol.TField("executed", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField BATCH_EXECUTE_MS_AVG_FIELD_DESC = new org.apache.thrift.protocol.TField("batch_execute_ms_avg", org.apache.thrift.protocol.TType.MAP, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AccBoltStatsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AccBoltStatsTupleSchemeFactory());
  }

  public Map<String,Map<GlobalStreamId,Long>> acked; // required
  public Map<String,Map<GlobalStreamId,Long>> failed; // required
  public Map<String,Map<GlobalStreamId,Double>> batch_process_ms_avg; // required
  public Map<String,Map<GlobalStreamId,Long>> executed; // required
  public Map<String,Map<GlobalStreamId,Double>> batch_execute_ms_avg; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACKED((short)1, "acked"),
    FAILED((short)2, "failed"),
    BATCH_PROCESS_MS_AVG((short)3, "batch_process_ms_avg"),
    EXECUTED((short)4, "executed"),
    BATCH_EXECUTE_MS_AVG((short)5, "batch_execute_ms_avg");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACKED
          return ACKED;
        case 2: // FAILED
          return FAILED;
        case 3: // BATCH_PROCESS_MS_AVG
          return BATCH_PROCESS_MS_AVG;
        case 4: // EXECUTED
          return EXECUTED;
        case 5: // BATCH_EXECUTE_MS_AVG
          return BATCH_EXECUTE_MS_AVG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACKED, new org.apache.thrift.meta_data.FieldMetaData("acked", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GlobalStreamId.class), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)))));
    tmpMap.put(_Fields.FAILED, new org.apache.thrift.meta_data.FieldMetaData("failed", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GlobalStreamId.class), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)))));
    tmpMap.put(_Fields.BATCH_PROCESS_MS_AVG, new org.apache.thrift.meta_data.FieldMetaData("batch_process_ms_avg", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GlobalStreamId.class), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
    tmpMap.put(_Fields.EXECUTED, new org.apache.thrift.meta_data.FieldMetaData("executed", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GlobalStreamId.class), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)))));
    tmpMap.put(_Fields.BATCH_EXECUTE_MS_AVG, new org.apache.thrift.meta_data.FieldMetaData("batch_execute_ms_avg", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GlobalStreamId.class), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AccBoltStats.class, metaDataMap);
  }

  public AccBoltStats() {
  }

  public AccBoltStats(
    Map<String,Map<GlobalStreamId,Long>> acked,
    Map<String,Map<GlobalStreamId,Long>> failed,
    Map<String,Map<GlobalStreamId,Double>> batch_process_ms_avg,
    Map<String,Map<GlobalStreamId,Long>> executed,
    Map<String,Map<GlobalStreamId,Double>> batch_execute_ms_avg)
  {
    this();
    this.acked = acked;
    this.failed = failed;
    this.batch_process_ms_avg = batch_process_ms_avg;
    this.executed = executed;
    this.batch_execute_ms_avg = batch_execute_ms_avg;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AccBoltStats(AccBoltStats other) {
    if (other.isSetAcked()) {
      Map<String,Map<GlobalStreamId,Long>> __this__acked = new HashMap<String,Map<GlobalStreamId,Long>>(other.acked.size());
      for (Map.Entry<String, Map<GlobalStreamId,Long>> other_element : other.acked.entrySet()) {

        String other_element_key = other_element.getKey();
        Map<GlobalStreamId,Long> other_element_value = other_element.getValue();

        String __this__acked_copy_key = other_element_key;

        Map<GlobalStreamId,Long> __this__acked_copy_value = new HashMap<GlobalStreamId,Long>(other_element_value.size());
        for (Map.Entry<GlobalStreamId, Long> other_element_value_element : other_element_value.entrySet()) {

          GlobalStreamId other_element_value_element_key = other_element_value_element.getKey();
          Long other_element_value_element_value = other_element_value_element.getValue();

          GlobalStreamId __this__acked_copy_value_copy_key = new GlobalStreamId(other_element_value_element_key);

          Long __this__acked_copy_value_copy_value = other_element_value_element_value;

          __this__acked_copy_value.put(__this__acked_copy_value_copy_key, __this__acked_copy_value_copy_value);
        }

        __this__acked.put(__this__acked_copy_key, __this__acked_copy_value);
      }
      this.acked = __this__acked;
    }
    if (other.isSetFailed()) {
      Map<String,Map<GlobalStreamId,Long>> __this__failed = new HashMap<String,Map<GlobalStreamId,Long>>(other.failed.size());
      for (Map.Entry<String, Map<GlobalStreamId,Long>> other_element : other.failed.entrySet()) {

        String other_element_key = other_element.getKey();
        Map<GlobalStreamId,Long> other_element_value = other_element.getValue();

        String __this__failed_copy_key = other_element_key;

        Map<GlobalStreamId,Long> __this__failed_copy_value = new HashMap<GlobalStreamId,Long>(other_element_value.size());
        for (Map.Entry<GlobalStreamId, Long> other_element_value_element : other_element_value.entrySet()) {

          GlobalStreamId other_element_value_element_key = other_element_value_element.getKey();
          Long other_element_value_element_value = other_element_value_element.getValue();

          GlobalStreamId __this__failed_copy_value_copy_key = new GlobalStreamId(other_element_value_element_key);

          Long __this__failed_copy_value_copy_value = other_element_value_element_value;

          __this__failed_copy_value.put(__this__failed_copy_value_copy_key, __this__failed_copy_value_copy_value);
        }

        __this__failed.put(__this__failed_copy_key, __this__failed_copy_value);
      }
      this.failed = __this__failed;
    }
    if (other.isSetBatch_process_ms_avg()) {
      Map<String,Map<GlobalStreamId,Double>> __this__batch_process_ms_avg = new HashMap<String,Map<GlobalStreamId,Double>>(other.batch_process_ms_avg.size());
      for (Map.Entry<String, Map<GlobalStreamId,Double>> other_element : other.batch_process_ms_avg.entrySet()) {

        String other_element_key = other_element.getKey();
        Map<GlobalStreamId,Double> other_element_value = other_element.getValue();

        String __this__batch_process_ms_avg_copy_key = other_element_key;

        Map<GlobalStreamId,Double> __this__batch_process_ms_avg_copy_value = new HashMap<GlobalStreamId,Double>(other_element_value.size());
        for (Map.Entry<GlobalStreamId, Double> other_element_value_element : other_element_value.entrySet()) {

          GlobalStreamId other_element_value_element_key = other_element_value_element.getKey();
          Double other_element_value_element_value = other_element_value_element.getValue();

          GlobalStreamId __this__batch_process_ms_avg_copy_value_copy_key = new GlobalStreamId(other_element_value_element_key);

          Double __this__batch_process_ms_avg_copy_value_copy_value = other_element_value_element_value;

          __this__batch_process_ms_avg_copy_value.put(__this__batch_process_ms_avg_copy_value_copy_key, __this__batch_process_ms_avg_copy_value_copy_value);
        }

        __this__batch_process_ms_avg.put(__this__batch_process_ms_avg_copy_key, __this__batch_process_ms_avg_copy_value);
      }
      this.batch_process_ms_avg = __this__batch_process_ms_avg;
    }
    if (other.isSetExecuted()) {
      Map<String,Map<GlobalStreamId,Long>> __this__executed = new HashMap<String,Map<GlobalStreamId,Long>>(other.executed.size());
      for (Map.Entry<String, Map<GlobalStreamId,Long>> other_element : other.executed.entrySet()) {

        String other_element_key = other_element.getKey();
        Map<GlobalStreamId,Long> other_element_value = other_element.getValue();

        String __this__executed_copy_key = other_element_key;

        Map<GlobalStreamId,Long> __this__executed_copy_value = new HashMap<GlobalStreamId,Long>(other_element_value.size());
        for (Map.Entry<GlobalStreamId, Long> other_element_value_element : other_element_value.entrySet()) {

          GlobalStreamId other_element_value_element_key = other_element_value_element.getKey();
          Long other_element_value_element_value = other_element_value_element.getValue();

          GlobalStreamId __this__executed_copy_value_copy_key = new GlobalStreamId(other_element_value_element_key);

          Long __this__executed_copy_value_copy_value = other_element_value_element_value;

          __this__executed_copy_value.put(__this__executed_copy_value_copy_key, __this__executed_copy_value_copy_value);
        }

        __this__executed.put(__this__executed_copy_key, __this__executed_copy_value);
      }
      this.executed = __this__executed;
    }
    if (other.isSetBatch_execute_ms_avg()) {
      Map<String,Map<GlobalStreamId,Double>> __this__batch_execute_ms_avg = new HashMap<String,Map<GlobalStreamId,Double>>(other.batch_execute_ms_avg.size());
      for (Map.Entry<String, Map<GlobalStreamId,Double>> other_element : other.batch_execute_ms_avg.entrySet()) {

        String other_element_key = other_element.getKey();
        Map<GlobalStreamId,Double> other_element_value = other_element.getValue();

        String __this__batch_execute_ms_avg_copy_key = other_element_key;

        Map<GlobalStreamId,Double> __this__batch_execute_ms_avg_copy_value = new HashMap<GlobalStreamId,Double>(other_element_value.size());
        for (Map.Entry<GlobalStreamId, Double> other_element_value_element : other_element_value.entrySet()) {

          GlobalStreamId other_element_value_element_key = other_element_value_element.getKey();
          Double other_element_value_element_value = other_element_value_element.getValue();

          GlobalStreamId __this__batch_execute_ms_avg_copy_value_copy_key = new GlobalStreamId(other_element_value_element_key);

          Double __this__batch_execute_ms_avg_copy_value_copy_value = other_element_value_element_value;

          __this__batch_execute_ms_avg_copy_value.put(__this__batch_execute_ms_avg_copy_value_copy_key, __this__batch_execute_ms_avg_copy_value_copy_value);
        }

        __this__batch_execute_ms_avg.put(__this__batch_execute_ms_avg_copy_key, __this__batch_execute_ms_avg_copy_value);
      }
      this.batch_execute_ms_avg = __this__batch_execute_ms_avg;
    }
  }

  public AccBoltStats deepCopy() {
    return new AccBoltStats(this);
  }

  @Override
  public void clear() {
    this.acked = null;
    this.failed = null;
    this.batch_process_ms_avg = null;
    this.executed = null;
    this.batch_execute_ms_avg = null;
  }

  public int getAckedSize() {
    return (this.acked == null) ? 0 : this.acked.size();
  }

  public void putToAcked(String key, Map<GlobalStreamId,Long> val) {
    if (this.acked == null) {
      this.acked = new HashMap<String,Map<GlobalStreamId,Long>>();
    }
    this.acked.put(key, val);
  }

  public Map<String,Map<GlobalStreamId,Long>> getAcked() {
    return this.acked;
  }

  public AccBoltStats setAcked(Map<String,Map<GlobalStreamId,Long>> acked) {
    this.acked = acked;
    return this;
  }

  public void unsetAcked() {
    this.acked = null;
  }

  /** Returns true if field acked is set (has been assigned a value) and false otherwise */
  public boolean isSetAcked() {
    return this.acked != null;
  }

  public void setAckedIsSet(boolean value) {
    if (!value) {
      this.acked = null;
    }
  }

  public int getFailedSize() {
    return (this.failed == null) ? 0 : this.failed.size();
  }

  public void putToFailed(String key, Map<GlobalStreamId,Long> val) {
    if (this.failed == null) {
      this.failed = new HashMap<String,Map<GlobalStreamId,Long>>();
    }
    this.failed.put(key, val);
  }

  public Map<String,Map<GlobalStreamId,Long>> getFailed() {
    return this.failed;
  }

  public AccBoltStats setFailed(Map<String,Map<GlobalStreamId,Long>> failed) {
    this.failed = failed;
    return this;
  }

  public void unsetFailed() {
    this.failed = null;
  }

  /** Returns true if field failed is set (has been assigned a value) and false otherwise */
  public boolean isSetFailed() {
    return this.failed != null;
  }

  public void setFailedIsSet(boolean value) {
    if (!value) {
      this.failed = null;
    }
  }

  public int getBatch_process_ms_avgSize() {
    return (this.batch_process_ms_avg == null) ? 0 : this.batch_process_ms_avg.size();
  }

  public void putToBatch_process_ms_avg(String key, Map<GlobalStreamId,Double> val) {
    if (this.batch_process_ms_avg == null) {
      this.batch_process_ms_avg = new HashMap<String,Map<GlobalStreamId,Double>>();
    }
    this.batch_process_ms_avg.put(key, val);
  }

  public Map<String,Map<GlobalStreamId,Double>> getBatch_process_ms_avg() {
    return this.batch_process_ms_avg;
  }

  public AccBoltStats setBatch_process_ms_avg(Map<String,Map<GlobalStreamId,Double>> batch_process_ms_avg) {
    this.batch_process_ms_avg = batch_process_ms_avg;
    return this;
  }

  public void unsetBatch_process_ms_avg() {
    this.batch_process_ms_avg = null;
  }

  /** Returns true if field batch_process_ms_avg is set (has been assigned a value) and false otherwise */
  public boolean isSetBatch_process_ms_avg() {
    return this.batch_process_ms_avg != null;
  }

  public void setBatch_process_ms_avgIsSet(boolean value) {
    if (!value) {
      this.batch_process_ms_avg = null;
    }
  }

  public int getExecutedSize() {
    return (this.executed == null) ? 0 : this.executed.size();
  }

  public void putToExecuted(String key, Map<GlobalStreamId,Long> val) {
    if (this.executed == null) {
      this.executed = new HashMap<String,Map<GlobalStreamId,Long>>();
    }
    this.executed.put(key, val);
  }

  public Map<String,Map<GlobalStreamId,Long>> getExecuted() {
    return this.executed;
  }

  public AccBoltStats setExecuted(Map<String,Map<GlobalStreamId,Long>> executed) {
    this.executed = executed;
    return this;
  }

  public void unsetExecuted() {
    this.executed = null;
  }

  /** Returns true if field executed is set (has been assigned a value) and false otherwise */
  public boolean isSetExecuted() {
    return this.executed != null;
  }

  public void setExecutedIsSet(boolean value) {
    if (!value) {
      this.executed = null;
    }
  }

  public int getBatch_execute_ms_avgSize() {
    return (this.batch_execute_ms_avg == null) ? 0 : this.batch_execute_ms_avg.size();
  }

  public void putToBatch_execute_ms_avg(String key, Map<GlobalStreamId,Double> val) {
    if (this.batch_execute_ms_avg == null) {
      this.batch_execute_ms_avg = new HashMap<String,Map<GlobalStreamId,Double>>();
    }
    this.batch_execute_ms_avg.put(key, val);
  }

  public Map<String,Map<GlobalStreamId,Double>> getBatch_execute_ms_avg() {
    return this.batch_execute_ms_avg;
  }

  public AccBoltStats setBatch_execute_ms_avg(Map<String,Map<GlobalStreamId,Double>> batch_execute_ms_avg) {
    this.batch_execute_ms_avg = batch_execute_ms_avg;
    return this;
  }

  public void unsetBatch_execute_ms_avg() {
    this.batch_execute_ms_avg = null;
  }

  /** Returns true if field batch_execute_ms_avg is set (has been assigned a value) and false otherwise */
  public boolean isSetBatch_execute_ms_avg() {
    return this.batch_execute_ms_avg != null;
  }

  public void setBatch_execute_ms_avgIsSet(boolean value) {
    if (!value) {
      this.batch_execute_ms_avg = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ACKED:
      if (value == null) {
        unsetAcked();
      } else {
        setAcked((Map<String,Map<GlobalStreamId,Long>>)value);
      }
      break;

    case FAILED:
      if (value == null) {
        unsetFailed();
      } else {
        setFailed((Map<String,Map<GlobalStreamId,Long>>)value);
      }
      break;

    case BATCH_PROCESS_MS_AVG:
      if (value == null) {
        unsetBatch_process_ms_avg();
      } else {
        setBatch_process_ms_avg((Map<String,Map<GlobalStreamId,Double>>)value);
      }
      break;

    case EXECUTED:
      if (value == null) {
        unsetExecuted();
      } else {
        setExecuted((Map<String,Map<GlobalStreamId,Long>>)value);
      }
      break;

    case BATCH_EXECUTE_MS_AVG:
      if (value == null) {
        unsetBatch_execute_ms_avg();
      } else {
        setBatch_execute_ms_avg((Map<String,Map<GlobalStreamId,Double>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ACKED:
      return getAcked();

    case FAILED:
      return getFailed();

    case BATCH_PROCESS_MS_AVG:
      return getBatch_process_ms_avg();

    case EXECUTED:
      return getExecuted();

    case BATCH_EXECUTE_MS_AVG:
      return getBatch_execute_ms_avg();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ACKED:
      return isSetAcked();
    case FAILED:
      return isSetFailed();
    case BATCH_PROCESS_MS_AVG:
      return isSetBatch_process_ms_avg();
    case EXECUTED:
      return isSetExecuted();
    case BATCH_EXECUTE_MS_AVG:
      return isSetBatch_execute_ms_avg();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AccBoltStats)
      return this.equals((AccBoltStats)that);
    return false;
  }

  public boolean equals(AccBoltStats that) {
    if (that == null)
      return false;

    boolean this_present_acked = true && this.isSetAcked();
    boolean that_present_acked = true && that.isSetAcked();
    if (this_present_acked || that_present_acked) {
      if (!(this_present_acked && that_present_acked))
        return false;
      if (!this.acked.equals(that.acked))
        return false;
    }

    boolean this_present_failed = true && this.isSetFailed();
    boolean that_present_failed = true && that.isSetFailed();
    if (this_present_failed || that_present_failed) {
      if (!(this_present_failed && that_present_failed))
        return false;
      if (!this.failed.equals(that.failed))
        return false;
    }

    boolean this_present_batch_process_ms_avg = true && this.isSetBatch_process_ms_avg();
    boolean that_present_batch_process_ms_avg = true && that.isSetBatch_process_ms_avg();
    if (this_present_batch_process_ms_avg || that_present_batch_process_ms_avg) {
      if (!(this_present_batch_process_ms_avg && that_present_batch_process_ms_avg))
        return false;
      if (!this.batch_process_ms_avg.equals(that.batch_process_ms_avg))
        return false;
    }

    boolean this_present_executed = true && this.isSetExecuted();
    boolean that_present_executed = true && that.isSetExecuted();
    if (this_present_executed || that_present_executed) {
      if (!(this_present_executed && that_present_executed))
        return false;
      if (!this.executed.equals(that.executed))
        return false;
    }

    boolean this_present_batch_execute_ms_avg = true && this.isSetBatch_execute_ms_avg();
    boolean that_present_batch_execute_ms_avg = true && that.isSetBatch_execute_ms_avg();
    if (this_present_batch_execute_ms_avg || that_present_batch_execute_ms_avg) {
      if (!(this_present_batch_execute_ms_avg && that_present_batch_execute_ms_avg))
        return false;
      if (!this.batch_execute_ms_avg.equals(that.batch_execute_ms_avg))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_acked = true && (isSetAcked());
    list.add(present_acked);
    if (present_acked)
      list.add(acked);

    boolean present_failed = true && (isSetFailed());
    list.add(present_failed);
    if (present_failed)
      list.add(failed);

    boolean present_batch_process_ms_avg = true && (isSetBatch_process_ms_avg());
    list.add(present_batch_process_ms_avg);
    if (present_batch_process_ms_avg)
      list.add(batch_process_ms_avg);

    boolean present_executed = true && (isSetExecuted());
    list.add(present_executed);
    if (present_executed)
      list.add(executed);

    boolean present_batch_execute_ms_avg = true && (isSetBatch_execute_ms_avg());
    list.add(present_batch_execute_ms_avg);
    if (present_batch_execute_ms_avg)
      list.add(batch_execute_ms_avg);

    return list.hashCode();
  }

  @Override
  public int compareTo(AccBoltStats other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAcked()).compareTo(other.isSetAcked());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcked()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acked, other.acked);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFailed()).compareTo(other.isSetFailed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.failed, other.failed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBatch_process_ms_avg()).compareTo(other.isSetBatch_process_ms_avg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBatch_process_ms_avg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batch_process_ms_avg, other.batch_process_ms_avg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecuted()).compareTo(other.isSetExecuted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecuted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executed, other.executed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBatch_execute_ms_avg()).compareTo(other.isSetBatch_execute_ms_avg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBatch_execute_ms_avg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batch_execute_ms_avg, other.batch_execute_ms_avg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AccBoltStats(");
    boolean first = true;

    sb.append("acked:");
    if (this.acked == null) {
      sb.append("null");
    } else {
      sb.append(this.acked);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("failed:");
    if (this.failed == null) {
      sb.append("null");
    } else {
      sb.append(this.failed);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("batch_process_ms_avg:");
    if (this.batch_process_ms_avg == null) {
      sb.append("null");
    } else {
      sb.append(this.batch_process_ms_avg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("executed:");
    if (this.executed == null) {
      sb.append("null");
    } else {
      sb.append(this.executed);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("batch_execute_ms_avg:");
    if (this.batch_execute_ms_avg == null) {
      sb.append("null");
    } else {
      sb.append(this.batch_execute_ms_avg);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (acked == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'acked' was not present! Struct: " + toString());
    }
    if (failed == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'failed' was not present! Struct: " + toString());
    }
    if (batch_process_ms_avg == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'batch_process_ms_avg' was not present! Struct: " + toString());
    }
    if (executed == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'executed' was not present! Struct: " + toString());
    }
    if (batch_execute_ms_avg == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'batch_execute_ms_avg' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AccBoltStatsStandardSchemeFactory implements SchemeFactory {
    public AccBoltStatsStandardScheme getScheme() {
      return new AccBoltStatsStandardScheme();
    }
  }

  private static class AccBoltStatsStandardScheme extends StandardScheme<AccBoltStats> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AccBoltStats struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACKED
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map286 = iprot.readMapBegin();
                struct.acked = new HashMap<String,Map<GlobalStreamId,Long>>(2*_map286.size);
                String _key287;
                Map<GlobalStreamId,Long> _val288;
                for (int _i289 = 0; _i289 < _map286.size; ++_i289)
                {
                  _key287 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TMap _map290 = iprot.readMapBegin();
                    _val288 = new HashMap<GlobalStreamId,Long>(2*_map290.size);
                    GlobalStreamId _key291;
                    long _val292;
                    for (int _i293 = 0; _i293 < _map290.size; ++_i293)
                    {
                      _key291 = new GlobalStreamId();
                      _key291.read(iprot);
                      _val292 = iprot.readI64();
                      _val288.put(_key291, _val292);
                    }
                    iprot.readMapEnd();
                  }
                  struct.acked.put(_key287, _val288);
                }
                iprot.readMapEnd();
              }
              struct.setAckedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FAILED
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map294 = iprot.readMapBegin();
                struct.failed = new HashMap<String,Map<GlobalStreamId,Long>>(2*_map294.size);
                String _key295;
                Map<GlobalStreamId,Long> _val296;
                for (int _i297 = 0; _i297 < _map294.size; ++_i297)
                {
                  _key295 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TMap _map298 = iprot.readMapBegin();
                    _val296 = new HashMap<GlobalStreamId,Long>(2*_map298.size);
                    GlobalStreamId _key299;
                    long _val300;
                    for (int _i301 = 0; _i301 < _map298.size; ++_i301)
                    {
                      _key299 = new GlobalStreamId();
                      _key299.read(iprot);
                      _val300 = iprot.readI64();
                      _val296.put(_key299, _val300);
                    }
                    iprot.readMapEnd();
                  }
                  struct.failed.put(_key295, _val296);
                }
                iprot.readMapEnd();
              }
              struct.setFailedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BATCH_PROCESS_MS_AVG
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map302 = iprot.readMapBegin();
                struct.batch_process_ms_avg = new HashMap<String,Map<GlobalStreamId,Double>>(2*_map302.size);
                String _key303;
                Map<GlobalStreamId,Double> _val304;
                for (int _i305 = 0; _i305 < _map302.size; ++_i305)
                {
                  _key303 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TMap _map306 = iprot.readMapBegin();
                    _val304 = new HashMap<GlobalStreamId,Double>(2*_map306.size);
                    GlobalStreamId _key307;
                    double _val308;
                    for (int _i309 = 0; _i309 < _map306.size; ++_i309)
                    {
                      _key307 = new GlobalStreamId();
                      _key307.read(iprot);
                      _val308 = iprot.readDouble();
                      _val304.put(_key307, _val308);
                    }
                    iprot.readMapEnd();
                  }
                  struct.batch_process_ms_avg.put(_key303, _val304);
                }
                iprot.readMapEnd();
              }
              struct.setBatch_process_ms_avgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXECUTED
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map310 = iprot.readMapBegin();
                struct.executed = new HashMap<String,Map<GlobalStreamId,Long>>(2*_map310.size);
                String _key311;
                Map<GlobalStreamId,Long> _val312;
                for (int _i313 = 0; _i313 < _map310.size; ++_i313)
                {
                  _key311 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TMap _map314 = iprot.readMapBegin();
                    _val312 = new HashMap<GlobalStreamId,Long>(2*_map314.size);
                    GlobalStreamId _key315;
                    long _val316;
                    for (int _i317 = 0; _i317 < _map314.size; ++_i317)
                    {
                      _key315 = new GlobalStreamId();
                      _key315.read(iprot);
                      _val316 = iprot.readI64();
                      _val312.put(_key315, _val316);
                    }
                    iprot.readMapEnd();
                  }
                  struct.executed.put(_key311, _val312);
                }
                iprot.readMapEnd();
              }
              struct.setExecutedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BATCH_EXECUTE_MS_AVG
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map318 = iprot.readMapBegin();
                struct.batch_execute_ms_avg = new HashMap<String,Map<GlobalStreamId,Double>>(2*_map318.size);
                String _key319;
                Map<GlobalStreamId,Double> _val320;
                for (int _i321 = 0; _i321 < _map318.size; ++_i321)
                {
                  _key319 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TMap _map322 = iprot.readMapBegin();
                    _val320 = new HashMap<GlobalStreamId,Double>(2*_map322.size);
                    GlobalStreamId _key323;
                    double _val324;
                    for (int _i325 = 0; _i325 < _map322.size; ++_i325)
                    {
                      _key323 = new GlobalStreamId();
                      _key323.read(iprot);
                      _val324 = iprot.readDouble();
                      _val320.put(_key323, _val324);
                    }
                    iprot.readMapEnd();
                  }
                  struct.batch_execute_ms_avg.put(_key319, _val320);
                }
                iprot.readMapEnd();
              }
              struct.setBatch_execute_ms_avgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AccBoltStats struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.acked != null) {
        oprot.writeFieldBegin(ACKED_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, struct.acked.size()));
          for (Map.Entry<String, Map<GlobalStreamId,Long>> _iter326 : struct.acked.entrySet())
          {
            oprot.writeString(_iter326.getKey());
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.I64, _iter326.getValue().size()));
              for (Map.Entry<GlobalStreamId, Long> _iter327 : _iter326.getValue().entrySet())
              {
                _iter327.getKey().write(oprot);
                oprot.writeI64(_iter327.getValue());
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.failed != null) {
        oprot.writeFieldBegin(FAILED_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, struct.failed.size()));
          for (Map.Entry<String, Map<GlobalStreamId,Long>> _iter328 : struct.failed.entrySet())
          {
            oprot.writeString(_iter328.getKey());
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.I64, _iter328.getValue().size()));
              for (Map.Entry<GlobalStreamId, Long> _iter329 : _iter328.getValue().entrySet())
              {
                _iter329.getKey().write(oprot);
                oprot.writeI64(_iter329.getValue());
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.batch_process_ms_avg != null) {
        oprot.writeFieldBegin(BATCH_PROCESS_MS_AVG_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, struct.batch_process_ms_avg.size()));
          for (Map.Entry<String, Map<GlobalStreamId,Double>> _iter330 : struct.batch_process_ms_avg.entrySet())
          {
            oprot.writeString(_iter330.getKey());
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.DOUBLE, _iter330.getValue().size()));
              for (Map.Entry<GlobalStreamId, Double> _iter331 : _iter330.getValue().entrySet())
              {
                _iter331.getKey().write(oprot);
                oprot.writeDouble(_iter331.getValue());
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.executed != null) {
        oprot.writeFieldBegin(EXECUTED_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, struct.executed.size()));
          for (Map.Entry<String, Map<GlobalStreamId,Long>> _iter332 : struct.executed.entrySet())
          {
            oprot.writeString(_iter332.getKey());
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.I64, _iter332.getValue().size()));
              for (Map.Entry<GlobalStreamId, Long> _iter333 : _iter332.getValue().entrySet())
              {
                _iter333.getKey().write(oprot);
                oprot.writeI64(_iter333.getValue());
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.batch_execute_ms_avg != null) {
        oprot.writeFieldBegin(BATCH_EXECUTE_MS_AVG_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, struct.batch_execute_ms_avg.size()));
          for (Map.Entry<String, Map<GlobalStreamId,Double>> _iter334 : struct.batch_execute_ms_avg.entrySet())
          {
            oprot.writeString(_iter334.getKey());
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.DOUBLE, _iter334.getValue().size()));
              for (Map.Entry<GlobalStreamId, Double> _iter335 : _iter334.getValue().entrySet())
              {
                _iter335.getKey().write(oprot);
                oprot.writeDouble(_iter335.getValue());
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AccBoltStatsTupleSchemeFactory implements SchemeFactory {
    public AccBoltStatsTupleScheme getScheme() {
      return new AccBoltStatsTupleScheme();
    }
  }

  private static class AccBoltStatsTupleScheme extends TupleScheme<AccBoltStats> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AccBoltStats struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.acked.size());
        for (Map.Entry<String, Map<GlobalStreamId,Long>> _iter336 : struct.acked.entrySet())
        {
          oprot.writeString(_iter336.getKey());
          {
            oprot.writeI32(_iter336.getValue().size());
            for (Map.Entry<GlobalStreamId, Long> _iter337 : _iter336.getValue().entrySet())
            {
              _iter337.getKey().write(oprot);
              oprot.writeI64(_iter337.getValue());
            }
          }
        }
      }
      {
        oprot.writeI32(struct.failed.size());
        for (Map.Entry<String, Map<GlobalStreamId,Long>> _iter338 : struct.failed.entrySet())
        {
          oprot.writeString(_iter338.getKey());
          {
            oprot.writeI32(_iter338.getValue().size());
            for (Map.Entry<GlobalStreamId, Long> _iter339 : _iter338.getValue().entrySet())
            {
              _iter339.getKey().write(oprot);
              oprot.writeI64(_iter339.getValue());
            }
          }
        }
      }
      {
        oprot.writeI32(struct.batch_process_ms_avg.size());
        for (Map.Entry<String, Map<GlobalStreamId,Double>> _iter340 : struct.batch_process_ms_avg.entrySet())
        {
          oprot.writeString(_iter340.getKey());
          {
            oprot.writeI32(_iter340.getValue().size());
            for (Map.Entry<GlobalStreamId, Double> _iter341 : _iter340.getValue().entrySet())
            {
              _iter341.getKey().write(oprot);
              oprot.writeDouble(_iter341.getValue());
            }
          }
        }
      }
      {
        oprot.writeI32(struct.executed.size());
        for (Map.Entry<String, Map<GlobalStreamId,Long>> _iter342 : struct.executed.entrySet())
        {
          oprot.writeString(_iter342.getKey());
          {
            oprot.writeI32(_iter342.getValue().size());
            for (Map.Entry<GlobalStreamId, Long> _iter343 : _iter342.getValue().entrySet())
            {
              _iter343.getKey().write(oprot);
              oprot.writeI64(_iter343.getValue());
            }
          }
        }
      }
      {
        oprot.writeI32(struct.batch_execute_ms_avg.size());
        for (Map.Entry<String, Map<GlobalStreamId,Double>> _iter344 : struct.batch_execute_ms_avg.entrySet())
        {
          oprot.writeString(_iter344.getKey());
          {
            oprot.writeI32(_iter344.getValue().size());
            for (Map.Entry<GlobalStreamId, Double> _iter345 : _iter344.getValue().entrySet())
            {
              _iter345.getKey().write(oprot);
              oprot.writeDouble(_iter345.getValue());
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AccBoltStats struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TMap _map346 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
        struct.acked = new HashMap<String,Map<GlobalStreamId,Long>>(2*_map346.size);
        String _key347;
        Map<GlobalStreamId,Long> _val348;
        for (int _i349 = 0; _i349 < _map346.size; ++_i349)
        {
          _key347 = iprot.readString();
          {
            org.apache.thrift.protocol.TMap _map350 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.I64, iprot.readI32());
            _val348 = new HashMap<GlobalStreamId,Long>(2*_map350.size);
            GlobalStreamId _key351;
            long _val352;
            for (int _i353 = 0; _i353 < _map350.size; ++_i353)
            {
              _key351 = new GlobalStreamId();
              _key351.read(iprot);
              _val352 = iprot.readI64();
              _val348.put(_key351, _val352);
            }
          }
          struct.acked.put(_key347, _val348);
        }
      }
      struct.setAckedIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map354 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
        struct.failed = new HashMap<String,Map<GlobalStreamId,Long>>(2*_map354.size);
        String _key355;
        Map<GlobalStreamId,Long> _val356;
        for (int _i357 = 0; _i357 < _map354.size; ++_i357)
        {
          _key355 = iprot.readString();
          {
            org.apache.thrift.protocol.TMap _map358 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.I64, iprot.readI32());
            _val356 = new HashMap<GlobalStreamId,Long>(2*_map358.size);
            GlobalStreamId _key359;
            long _val360;
            for (int _i361 = 0; _i361 < _map358.size; ++_i361)
            {
              _key359 = new GlobalStreamId();
              _key359.read(iprot);
              _val360 = iprot.readI64();
              _val356.put(_key359, _val360);
            }
          }
          struct.failed.put(_key355, _val356);
        }
      }
      struct.setFailedIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map362 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
        struct.batch_process_ms_avg = new HashMap<String,Map<GlobalStreamId,Double>>(2*_map362.size);
        String _key363;
        Map<GlobalStreamId,Double> _val364;
        for (int _i365 = 0; _i365 < _map362.size; ++_i365)
        {
          _key363 = iprot.readString();
          {
            org.apache.thrift.protocol.TMap _map366 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
            _val364 = new HashMap<GlobalStreamId,Double>(2*_map366.size);
            GlobalStreamId _key367;
            double _val368;
            for (int _i369 = 0; _i369 < _map366.size; ++_i369)
            {
              _key367 = new GlobalStreamId();
              _key367.read(iprot);
              _val368 = iprot.readDouble();
              _val364.put(_key367, _val368);
            }
          }
          struct.batch_process_ms_avg.put(_key363, _val364);
        }
      }
      struct.setBatch_process_ms_avgIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map370 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
        struct.executed = new HashMap<String,Map<GlobalStreamId,Long>>(2*_map370.size);
        String _key371;
        Map<GlobalStreamId,Long> _val372;
        for (int _i373 = 0; _i373 < _map370.size; ++_i373)
        {
          _key371 = iprot.readString();
          {
            org.apache.thrift.protocol.TMap _map374 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.I64, iprot.readI32());
            _val372 = new HashMap<GlobalStreamId,Long>(2*_map374.size);
            GlobalStreamId _key375;
            long _val376;
            for (int _i377 = 0; _i377 < _map374.size; ++_i377)
            {
              _key375 = new GlobalStreamId();
              _key375.read(iprot);
              _val376 = iprot.readI64();
              _val372.put(_key375, _val376);
            }
          }
          struct.executed.put(_key371, _val372);
        }
      }
      struct.setExecutedIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map378 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
        struct.batch_execute_ms_avg = new HashMap<String,Map<GlobalStreamId,Double>>(2*_map378.size);
        String _key379;
        Map<GlobalStreamId,Double> _val380;
        for (int _i381 = 0; _i381 < _map378.size; ++_i381)
        {
          _key379 = iprot.readString();
          {
            org.apache.thrift.protocol.TMap _map382 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
            _val380 = new HashMap<GlobalStreamId,Double>(2*_map382.size);
            GlobalStreamId _key383;
            double _val384;
            for (int _i385 = 0; _i385 < _map382.size; ++_i385)
            {
              _key383 = new GlobalStreamId();
              _key383.read(iprot);
              _val384 = iprot.readDouble();
              _val380.put(_key383, _val384);
            }
          }
          struct.batch_execute_ms_avg.put(_key379, _val380);
        }
      }
      struct.setBatch_execute_ms_avgIsSet(true);
    }
  }

}

