/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.storm.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-12-08")
public class SupervisorSummary implements org.apache.thrift.TBase<SupervisorSummary, SupervisorSummary._Fields>, java.io.Serializable, Cloneable, Comparable<SupervisorSummary> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SupervisorSummary");

  private static final org.apache.thrift.protocol.TField HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("host", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField UPTIME_SECS_FIELD_DESC = new org.apache.thrift.protocol.TField("uptime_secs", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NUM_WORKERS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_workers", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField NUM_USED_WORKERS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_used_workers", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField NUM_OCL_FPGA_DEVICES_FIELD_DESC = new org.apache.thrift.protocol.TField("num_ocl_fpga_devices", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField NUM_USED_OCL_FPGA_DEVICES_FIELD_DESC = new org.apache.thrift.protocol.TField("num_used_ocl_fpga_devices", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField NUM_OCL_GPU_DEVICES_FIELD_DESC = new org.apache.thrift.protocol.TField("num_ocl_gpu_devices", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField NUM_USED_OCL_GPU_DEVICES_FIELD_DESC = new org.apache.thrift.protocol.TField("num_used_ocl_gpu_devices", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField SUPERVISOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("supervisor_id", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField TOTAL_RESOURCES_FIELD_DESC = new org.apache.thrift.protocol.TField("total_resources", org.apache.thrift.protocol.TType.MAP, (short)11);
  private static final org.apache.thrift.protocol.TField USED_MEM_FIELD_DESC = new org.apache.thrift.protocol.TField("used_mem", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField USED_CPU_FIELD_DESC = new org.apache.thrift.protocol.TField("used_cpu", org.apache.thrift.protocol.TType.DOUBLE, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SupervisorSummaryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SupervisorSummaryTupleSchemeFactory());
  }

  public String host; // required
  public int uptime_secs; // required
  public int num_workers; // required
  public int num_used_workers; // required
  public int num_ocl_fpga_devices; // required
  public int num_used_ocl_fpga_devices; // required
  public int num_ocl_gpu_devices; // required
  public int num_used_ocl_gpu_devices; // required
  public String supervisor_id; // required
  public String version; // optional
  public Map<String,Double> total_resources; // optional
  public double used_mem; // optional
  public double used_cpu; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HOST((short)1, "host"),
    UPTIME_SECS((short)2, "uptime_secs"),
    NUM_WORKERS((short)3, "num_workers"),
    NUM_USED_WORKERS((short)4, "num_used_workers"),
    NUM_OCL_FPGA_DEVICES((short)5, "num_ocl_fpga_devices"),
    NUM_USED_OCL_FPGA_DEVICES((short)6, "num_used_ocl_fpga_devices"),
    NUM_OCL_GPU_DEVICES((short)7, "num_ocl_gpu_devices"),
    NUM_USED_OCL_GPU_DEVICES((short)8, "num_used_ocl_gpu_devices"),
    SUPERVISOR_ID((short)9, "supervisor_id"),
    VERSION((short)10, "version"),
    TOTAL_RESOURCES((short)11, "total_resources"),
    USED_MEM((short)12, "used_mem"),
    USED_CPU((short)13, "used_cpu");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HOST
          return HOST;
        case 2: // UPTIME_SECS
          return UPTIME_SECS;
        case 3: // NUM_WORKERS
          return NUM_WORKERS;
        case 4: // NUM_USED_WORKERS
          return NUM_USED_WORKERS;
        case 5: // NUM_OCL_FPGA_DEVICES
          return NUM_OCL_FPGA_DEVICES;
        case 6: // NUM_USED_OCL_FPGA_DEVICES
          return NUM_USED_OCL_FPGA_DEVICES;
        case 7: // NUM_OCL_GPU_DEVICES
          return NUM_OCL_GPU_DEVICES;
        case 8: // NUM_USED_OCL_GPU_DEVICES
          return NUM_USED_OCL_GPU_DEVICES;
        case 9: // SUPERVISOR_ID
          return SUPERVISOR_ID;
        case 10: // VERSION
          return VERSION;
        case 11: // TOTAL_RESOURCES
          return TOTAL_RESOURCES;
        case 12: // USED_MEM
          return USED_MEM;
        case 13: // USED_CPU
          return USED_CPU;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __UPTIME_SECS_ISSET_ID = 0;
  private static final int __NUM_WORKERS_ISSET_ID = 1;
  private static final int __NUM_USED_WORKERS_ISSET_ID = 2;
  private static final int __NUM_OCL_FPGA_DEVICES_ISSET_ID = 3;
  private static final int __NUM_USED_OCL_FPGA_DEVICES_ISSET_ID = 4;
  private static final int __NUM_OCL_GPU_DEVICES_ISSET_ID = 5;
  private static final int __NUM_USED_OCL_GPU_DEVICES_ISSET_ID = 6;
  private static final int __USED_MEM_ISSET_ID = 7;
  private static final int __USED_CPU_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.VERSION,_Fields.TOTAL_RESOURCES,_Fields.USED_MEM,_Fields.USED_CPU};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HOST, new org.apache.thrift.meta_data.FieldMetaData("host", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPTIME_SECS, new org.apache.thrift.meta_data.FieldMetaData("uptime_secs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_WORKERS, new org.apache.thrift.meta_data.FieldMetaData("num_workers", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_USED_WORKERS, new org.apache.thrift.meta_data.FieldMetaData("num_used_workers", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_OCL_FPGA_DEVICES, new org.apache.thrift.meta_data.FieldMetaData("num_ocl_fpga_devices", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_USED_OCL_FPGA_DEVICES, new org.apache.thrift.meta_data.FieldMetaData("num_used_ocl_fpga_devices", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_OCL_GPU_DEVICES, new org.apache.thrift.meta_data.FieldMetaData("num_ocl_gpu_devices", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_USED_OCL_GPU_DEVICES, new org.apache.thrift.meta_data.FieldMetaData("num_used_ocl_gpu_devices", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUPERVISOR_ID, new org.apache.thrift.meta_data.FieldMetaData("supervisor_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_RESOURCES, new org.apache.thrift.meta_data.FieldMetaData("total_resources", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.USED_MEM, new org.apache.thrift.meta_data.FieldMetaData("used_mem", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.USED_CPU, new org.apache.thrift.meta_data.FieldMetaData("used_cpu", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SupervisorSummary.class, metaDataMap);
  }

  public SupervisorSummary() {
    this.version = "VERSION_NOT_PROVIDED";

  }

  public SupervisorSummary(
    String host,
    int uptime_secs,
    int num_workers,
    int num_used_workers,
    int num_ocl_fpga_devices,
    int num_used_ocl_fpga_devices,
    int num_ocl_gpu_devices,
    int num_used_ocl_gpu_devices,
    String supervisor_id)
  {
    this();
    this.host = host;
    this.uptime_secs = uptime_secs;
    setUptime_secsIsSet(true);
    this.num_workers = num_workers;
    setNum_workersIsSet(true);
    this.num_used_workers = num_used_workers;
    setNum_used_workersIsSet(true);
    this.num_ocl_fpga_devices = num_ocl_fpga_devices;
    setNum_ocl_fpga_devicesIsSet(true);
    this.num_used_ocl_fpga_devices = num_used_ocl_fpga_devices;
    setNum_used_ocl_fpga_devicesIsSet(true);
    this.num_ocl_gpu_devices = num_ocl_gpu_devices;
    setNum_ocl_gpu_devicesIsSet(true);
    this.num_used_ocl_gpu_devices = num_used_ocl_gpu_devices;
    setNum_used_ocl_gpu_devicesIsSet(true);
    this.supervisor_id = supervisor_id;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SupervisorSummary(SupervisorSummary other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetHost()) {
      this.host = other.host;
    }
    this.uptime_secs = other.uptime_secs;
    this.num_workers = other.num_workers;
    this.num_used_workers = other.num_used_workers;
    this.num_ocl_fpga_devices = other.num_ocl_fpga_devices;
    this.num_used_ocl_fpga_devices = other.num_used_ocl_fpga_devices;
    this.num_ocl_gpu_devices = other.num_ocl_gpu_devices;
    this.num_used_ocl_gpu_devices = other.num_used_ocl_gpu_devices;
    if (other.isSetSupervisor_id()) {
      this.supervisor_id = other.supervisor_id;
    }
    if (other.isSetVersion()) {
      this.version = other.version;
    }
    if (other.isSetTotal_resources()) {
      Map<String,Double> __this__total_resources = new HashMap<String,Double>(other.total_resources);
      this.total_resources = __this__total_resources;
    }
    this.used_mem = other.used_mem;
    this.used_cpu = other.used_cpu;
  }

  public SupervisorSummary deepCopy() {
    return new SupervisorSummary(this);
  }

  @Override
  public void clear() {
    this.host = null;
    setUptime_secsIsSet(false);
    this.uptime_secs = 0;
    setNum_workersIsSet(false);
    this.num_workers = 0;
    setNum_used_workersIsSet(false);
    this.num_used_workers = 0;
    setNum_ocl_fpga_devicesIsSet(false);
    this.num_ocl_fpga_devices = 0;
    setNum_used_ocl_fpga_devicesIsSet(false);
    this.num_used_ocl_fpga_devices = 0;
    setNum_ocl_gpu_devicesIsSet(false);
    this.num_ocl_gpu_devices = 0;
    setNum_used_ocl_gpu_devicesIsSet(false);
    this.num_used_ocl_gpu_devices = 0;
    this.supervisor_id = null;
    this.version = "VERSION_NOT_PROVIDED";

    this.total_resources = null;
    setUsed_memIsSet(false);
    this.used_mem = 0.0;
    setUsed_cpuIsSet(false);
    this.used_cpu = 0.0;
  }

  public String getHost() {
    return this.host;
  }

  public SupervisorSummary setHost(String host) {
    this.host = host;
    return this;
  }

  public void unsetHost() {
    this.host = null;
  }

  /** Returns true if field host is set (has been assigned a value) and false otherwise */
  public boolean isSetHost() {
    return this.host != null;
  }

  public void setHostIsSet(boolean value) {
    if (!value) {
      this.host = null;
    }
  }

  public int getUptime_secs() {
    return this.uptime_secs;
  }

  public SupervisorSummary setUptime_secs(int uptime_secs) {
    this.uptime_secs = uptime_secs;
    setUptime_secsIsSet(true);
    return this;
  }

  public void unsetUptime_secs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPTIME_SECS_ISSET_ID);
  }

  /** Returns true if field uptime_secs is set (has been assigned a value) and false otherwise */
  public boolean isSetUptime_secs() {
    return EncodingUtils.testBit(__isset_bitfield, __UPTIME_SECS_ISSET_ID);
  }

  public void setUptime_secsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPTIME_SECS_ISSET_ID, value);
  }

  public int getNum_workers() {
    return this.num_workers;
  }

  public SupervisorSummary setNum_workers(int num_workers) {
    this.num_workers = num_workers;
    setNum_workersIsSet(true);
    return this;
  }

  public void unsetNum_workers() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_WORKERS_ISSET_ID);
  }

  /** Returns true if field num_workers is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_workers() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_WORKERS_ISSET_ID);
  }

  public void setNum_workersIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_WORKERS_ISSET_ID, value);
  }

  public int getNum_used_workers() {
    return this.num_used_workers;
  }

  public SupervisorSummary setNum_used_workers(int num_used_workers) {
    this.num_used_workers = num_used_workers;
    setNum_used_workersIsSet(true);
    return this;
  }

  public void unsetNum_used_workers() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_USED_WORKERS_ISSET_ID);
  }

  /** Returns true if field num_used_workers is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_used_workers() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_USED_WORKERS_ISSET_ID);
  }

  public void setNum_used_workersIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_USED_WORKERS_ISSET_ID, value);
  }

  public int getNum_ocl_fpga_devices() {
    return this.num_ocl_fpga_devices;
  }

  public SupervisorSummary setNum_ocl_fpga_devices(int num_ocl_fpga_devices) {
    this.num_ocl_fpga_devices = num_ocl_fpga_devices;
    setNum_ocl_fpga_devicesIsSet(true);
    return this;
  }

  public void unsetNum_ocl_fpga_devices() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_OCL_FPGA_DEVICES_ISSET_ID);
  }

  /** Returns true if field num_ocl_fpga_devices is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_ocl_fpga_devices() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_OCL_FPGA_DEVICES_ISSET_ID);
  }

  public void setNum_ocl_fpga_devicesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_OCL_FPGA_DEVICES_ISSET_ID, value);
  }

  public int getNum_used_ocl_fpga_devices() {
    return this.num_used_ocl_fpga_devices;
  }

  public SupervisorSummary setNum_used_ocl_fpga_devices(int num_used_ocl_fpga_devices) {
    this.num_used_ocl_fpga_devices = num_used_ocl_fpga_devices;
    setNum_used_ocl_fpga_devicesIsSet(true);
    return this;
  }

  public void unsetNum_used_ocl_fpga_devices() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_USED_OCL_FPGA_DEVICES_ISSET_ID);
  }

  /** Returns true if field num_used_ocl_fpga_devices is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_used_ocl_fpga_devices() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_USED_OCL_FPGA_DEVICES_ISSET_ID);
  }

  public void setNum_used_ocl_fpga_devicesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_USED_OCL_FPGA_DEVICES_ISSET_ID, value);
  }

  public int getNum_ocl_gpu_devices() {
    return this.num_ocl_gpu_devices;
  }

  public SupervisorSummary setNum_ocl_gpu_devices(int num_ocl_gpu_devices) {
    this.num_ocl_gpu_devices = num_ocl_gpu_devices;
    setNum_ocl_gpu_devicesIsSet(true);
    return this;
  }

  public void unsetNum_ocl_gpu_devices() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_OCL_GPU_DEVICES_ISSET_ID);
  }

  /** Returns true if field num_ocl_gpu_devices is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_ocl_gpu_devices() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_OCL_GPU_DEVICES_ISSET_ID);
  }

  public void setNum_ocl_gpu_devicesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_OCL_GPU_DEVICES_ISSET_ID, value);
  }

  public int getNum_used_ocl_gpu_devices() {
    return this.num_used_ocl_gpu_devices;
  }

  public SupervisorSummary setNum_used_ocl_gpu_devices(int num_used_ocl_gpu_devices) {
    this.num_used_ocl_gpu_devices = num_used_ocl_gpu_devices;
    setNum_used_ocl_gpu_devicesIsSet(true);
    return this;
  }

  public void unsetNum_used_ocl_gpu_devices() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_USED_OCL_GPU_DEVICES_ISSET_ID);
  }

  /** Returns true if field num_used_ocl_gpu_devices is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_used_ocl_gpu_devices() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_USED_OCL_GPU_DEVICES_ISSET_ID);
  }

  public void setNum_used_ocl_gpu_devicesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_USED_OCL_GPU_DEVICES_ISSET_ID, value);
  }

  public String getSupervisor_id() {
    return this.supervisor_id;
  }

  public SupervisorSummary setSupervisor_id(String supervisor_id) {
    this.supervisor_id = supervisor_id;
    return this;
  }

  public void unsetSupervisor_id() {
    this.supervisor_id = null;
  }

  /** Returns true if field supervisor_id is set (has been assigned a value) and false otherwise */
  public boolean isSetSupervisor_id() {
    return this.supervisor_id != null;
  }

  public void setSupervisor_idIsSet(boolean value) {
    if (!value) {
      this.supervisor_id = null;
    }
  }

  public String getVersion() {
    return this.version;
  }

  public SupervisorSummary setVersion(String version) {
    this.version = version;
    return this;
  }

  public void unsetVersion() {
    this.version = null;
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return this.version != null;
  }

  public void setVersionIsSet(boolean value) {
    if (!value) {
      this.version = null;
    }
  }

  public int getTotal_resourcesSize() {
    return (this.total_resources == null) ? 0 : this.total_resources.size();
  }

  public void putToTotal_resources(String key, double val) {
    if (this.total_resources == null) {
      this.total_resources = new HashMap<String,Double>();
    }
    this.total_resources.put(key, val);
  }

  public Map<String,Double> getTotal_resources() {
    return this.total_resources;
  }

  public SupervisorSummary setTotal_resources(Map<String,Double> total_resources) {
    this.total_resources = total_resources;
    return this;
  }

  public void unsetTotal_resources() {
    this.total_resources = null;
  }

  /** Returns true if field total_resources is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal_resources() {
    return this.total_resources != null;
  }

  public void setTotal_resourcesIsSet(boolean value) {
    if (!value) {
      this.total_resources = null;
    }
  }

  public double getUsed_mem() {
    return this.used_mem;
  }

  public SupervisorSummary setUsed_mem(double used_mem) {
    this.used_mem = used_mem;
    setUsed_memIsSet(true);
    return this;
  }

  public void unsetUsed_mem() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USED_MEM_ISSET_ID);
  }

  /** Returns true if field used_mem is set (has been assigned a value) and false otherwise */
  public boolean isSetUsed_mem() {
    return EncodingUtils.testBit(__isset_bitfield, __USED_MEM_ISSET_ID);
  }

  public void setUsed_memIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USED_MEM_ISSET_ID, value);
  }

  public double getUsed_cpu() {
    return this.used_cpu;
  }

  public SupervisorSummary setUsed_cpu(double used_cpu) {
    this.used_cpu = used_cpu;
    setUsed_cpuIsSet(true);
    return this;
  }

  public void unsetUsed_cpu() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USED_CPU_ISSET_ID);
  }

  /** Returns true if field used_cpu is set (has been assigned a value) and false otherwise */
  public boolean isSetUsed_cpu() {
    return EncodingUtils.testBit(__isset_bitfield, __USED_CPU_ISSET_ID);
  }

  public void setUsed_cpuIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USED_CPU_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HOST:
      if (value == null) {
        unsetHost();
      } else {
        setHost((String)value);
      }
      break;

    case UPTIME_SECS:
      if (value == null) {
        unsetUptime_secs();
      } else {
        setUptime_secs((Integer)value);
      }
      break;

    case NUM_WORKERS:
      if (value == null) {
        unsetNum_workers();
      } else {
        setNum_workers((Integer)value);
      }
      break;

    case NUM_USED_WORKERS:
      if (value == null) {
        unsetNum_used_workers();
      } else {
        setNum_used_workers((Integer)value);
      }
      break;

    case NUM_OCL_FPGA_DEVICES:
      if (value == null) {
        unsetNum_ocl_fpga_devices();
      } else {
        setNum_ocl_fpga_devices((Integer)value);
      }
      break;

    case NUM_USED_OCL_FPGA_DEVICES:
      if (value == null) {
        unsetNum_used_ocl_fpga_devices();
      } else {
        setNum_used_ocl_fpga_devices((Integer)value);
      }
      break;

    case NUM_OCL_GPU_DEVICES:
      if (value == null) {
        unsetNum_ocl_gpu_devices();
      } else {
        setNum_ocl_gpu_devices((Integer)value);
      }
      break;

    case NUM_USED_OCL_GPU_DEVICES:
      if (value == null) {
        unsetNum_used_ocl_gpu_devices();
      } else {
        setNum_used_ocl_gpu_devices((Integer)value);
      }
      break;

    case SUPERVISOR_ID:
      if (value == null) {
        unsetSupervisor_id();
      } else {
        setSupervisor_id((String)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((String)value);
      }
      break;

    case TOTAL_RESOURCES:
      if (value == null) {
        unsetTotal_resources();
      } else {
        setTotal_resources((Map<String,Double>)value);
      }
      break;

    case USED_MEM:
      if (value == null) {
        unsetUsed_mem();
      } else {
        setUsed_mem((Double)value);
      }
      break;

    case USED_CPU:
      if (value == null) {
        unsetUsed_cpu();
      } else {
        setUsed_cpu((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HOST:
      return getHost();

    case UPTIME_SECS:
      return getUptime_secs();

    case NUM_WORKERS:
      return getNum_workers();

    case NUM_USED_WORKERS:
      return getNum_used_workers();

    case NUM_OCL_FPGA_DEVICES:
      return getNum_ocl_fpga_devices();

    case NUM_USED_OCL_FPGA_DEVICES:
      return getNum_used_ocl_fpga_devices();

    case NUM_OCL_GPU_DEVICES:
      return getNum_ocl_gpu_devices();

    case NUM_USED_OCL_GPU_DEVICES:
      return getNum_used_ocl_gpu_devices();

    case SUPERVISOR_ID:
      return getSupervisor_id();

    case VERSION:
      return getVersion();

    case TOTAL_RESOURCES:
      return getTotal_resources();

    case USED_MEM:
      return getUsed_mem();

    case USED_CPU:
      return getUsed_cpu();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HOST:
      return isSetHost();
    case UPTIME_SECS:
      return isSetUptime_secs();
    case NUM_WORKERS:
      return isSetNum_workers();
    case NUM_USED_WORKERS:
      return isSetNum_used_workers();
    case NUM_OCL_FPGA_DEVICES:
      return isSetNum_ocl_fpga_devices();
    case NUM_USED_OCL_FPGA_DEVICES:
      return isSetNum_used_ocl_fpga_devices();
    case NUM_OCL_GPU_DEVICES:
      return isSetNum_ocl_gpu_devices();
    case NUM_USED_OCL_GPU_DEVICES:
      return isSetNum_used_ocl_gpu_devices();
    case SUPERVISOR_ID:
      return isSetSupervisor_id();
    case VERSION:
      return isSetVersion();
    case TOTAL_RESOURCES:
      return isSetTotal_resources();
    case USED_MEM:
      return isSetUsed_mem();
    case USED_CPU:
      return isSetUsed_cpu();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SupervisorSummary)
      return this.equals((SupervisorSummary)that);
    return false;
  }

  public boolean equals(SupervisorSummary that) {
    if (that == null)
      return false;

    boolean this_present_host = true && this.isSetHost();
    boolean that_present_host = true && that.isSetHost();
    if (this_present_host || that_present_host) {
      if (!(this_present_host && that_present_host))
        return false;
      if (!this.host.equals(that.host))
        return false;
    }

    boolean this_present_uptime_secs = true;
    boolean that_present_uptime_secs = true;
    if (this_present_uptime_secs || that_present_uptime_secs) {
      if (!(this_present_uptime_secs && that_present_uptime_secs))
        return false;
      if (this.uptime_secs != that.uptime_secs)
        return false;
    }

    boolean this_present_num_workers = true;
    boolean that_present_num_workers = true;
    if (this_present_num_workers || that_present_num_workers) {
      if (!(this_present_num_workers && that_present_num_workers))
        return false;
      if (this.num_workers != that.num_workers)
        return false;
    }

    boolean this_present_num_used_workers = true;
    boolean that_present_num_used_workers = true;
    if (this_present_num_used_workers || that_present_num_used_workers) {
      if (!(this_present_num_used_workers && that_present_num_used_workers))
        return false;
      if (this.num_used_workers != that.num_used_workers)
        return false;
    }

    boolean this_present_num_ocl_fpga_devices = true;
    boolean that_present_num_ocl_fpga_devices = true;
    if (this_present_num_ocl_fpga_devices || that_present_num_ocl_fpga_devices) {
      if (!(this_present_num_ocl_fpga_devices && that_present_num_ocl_fpga_devices))
        return false;
      if (this.num_ocl_fpga_devices != that.num_ocl_fpga_devices)
        return false;
    }

    boolean this_present_num_used_ocl_fpga_devices = true;
    boolean that_present_num_used_ocl_fpga_devices = true;
    if (this_present_num_used_ocl_fpga_devices || that_present_num_used_ocl_fpga_devices) {
      if (!(this_present_num_used_ocl_fpga_devices && that_present_num_used_ocl_fpga_devices))
        return false;
      if (this.num_used_ocl_fpga_devices != that.num_used_ocl_fpga_devices)
        return false;
    }

    boolean this_present_num_ocl_gpu_devices = true;
    boolean that_present_num_ocl_gpu_devices = true;
    if (this_present_num_ocl_gpu_devices || that_present_num_ocl_gpu_devices) {
      if (!(this_present_num_ocl_gpu_devices && that_present_num_ocl_gpu_devices))
        return false;
      if (this.num_ocl_gpu_devices != that.num_ocl_gpu_devices)
        return false;
    }

    boolean this_present_num_used_ocl_gpu_devices = true;
    boolean that_present_num_used_ocl_gpu_devices = true;
    if (this_present_num_used_ocl_gpu_devices || that_present_num_used_ocl_gpu_devices) {
      if (!(this_present_num_used_ocl_gpu_devices && that_present_num_used_ocl_gpu_devices))
        return false;
      if (this.num_used_ocl_gpu_devices != that.num_used_ocl_gpu_devices)
        return false;
    }

    boolean this_present_supervisor_id = true && this.isSetSupervisor_id();
    boolean that_present_supervisor_id = true && that.isSetSupervisor_id();
    if (this_present_supervisor_id || that_present_supervisor_id) {
      if (!(this_present_supervisor_id && that_present_supervisor_id))
        return false;
      if (!this.supervisor_id.equals(that.supervisor_id))
        return false;
    }

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (!this.version.equals(that.version))
        return false;
    }

    boolean this_present_total_resources = true && this.isSetTotal_resources();
    boolean that_present_total_resources = true && that.isSetTotal_resources();
    if (this_present_total_resources || that_present_total_resources) {
      if (!(this_present_total_resources && that_present_total_resources))
        return false;
      if (!this.total_resources.equals(that.total_resources))
        return false;
    }

    boolean this_present_used_mem = true && this.isSetUsed_mem();
    boolean that_present_used_mem = true && that.isSetUsed_mem();
    if (this_present_used_mem || that_present_used_mem) {
      if (!(this_present_used_mem && that_present_used_mem))
        return false;
      if (this.used_mem != that.used_mem)
        return false;
    }

    boolean this_present_used_cpu = true && this.isSetUsed_cpu();
    boolean that_present_used_cpu = true && that.isSetUsed_cpu();
    if (this_present_used_cpu || that_present_used_cpu) {
      if (!(this_present_used_cpu && that_present_used_cpu))
        return false;
      if (this.used_cpu != that.used_cpu)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_host = true && (isSetHost());
    list.add(present_host);
    if (present_host)
      list.add(host);

    boolean present_uptime_secs = true;
    list.add(present_uptime_secs);
    if (present_uptime_secs)
      list.add(uptime_secs);

    boolean present_num_workers = true;
    list.add(present_num_workers);
    if (present_num_workers)
      list.add(num_workers);

    boolean present_num_used_workers = true;
    list.add(present_num_used_workers);
    if (present_num_used_workers)
      list.add(num_used_workers);

    boolean present_num_ocl_fpga_devices = true;
    list.add(present_num_ocl_fpga_devices);
    if (present_num_ocl_fpga_devices)
      list.add(num_ocl_fpga_devices);

    boolean present_num_used_ocl_fpga_devices = true;
    list.add(present_num_used_ocl_fpga_devices);
    if (present_num_used_ocl_fpga_devices)
      list.add(num_used_ocl_fpga_devices);

    boolean present_num_ocl_gpu_devices = true;
    list.add(present_num_ocl_gpu_devices);
    if (present_num_ocl_gpu_devices)
      list.add(num_ocl_gpu_devices);

    boolean present_num_used_ocl_gpu_devices = true;
    list.add(present_num_used_ocl_gpu_devices);
    if (present_num_used_ocl_gpu_devices)
      list.add(num_used_ocl_gpu_devices);

    boolean present_supervisor_id = true && (isSetSupervisor_id());
    list.add(present_supervisor_id);
    if (present_supervisor_id)
      list.add(supervisor_id);

    boolean present_version = true && (isSetVersion());
    list.add(present_version);
    if (present_version)
      list.add(version);

    boolean present_total_resources = true && (isSetTotal_resources());
    list.add(present_total_resources);
    if (present_total_resources)
      list.add(total_resources);

    boolean present_used_mem = true && (isSetUsed_mem());
    list.add(present_used_mem);
    if (present_used_mem)
      list.add(used_mem);

    boolean present_used_cpu = true && (isSetUsed_cpu());
    list.add(present_used_cpu);
    if (present_used_cpu)
      list.add(used_cpu);

    return list.hashCode();
  }

  @Override
  public int compareTo(SupervisorSummary other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHost()).compareTo(other.isSetHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host, other.host);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUptime_secs()).compareTo(other.isSetUptime_secs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUptime_secs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uptime_secs, other.uptime_secs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_workers()).compareTo(other.isSetNum_workers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_workers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_workers, other.num_workers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_used_workers()).compareTo(other.isSetNum_used_workers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_used_workers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_used_workers, other.num_used_workers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_ocl_fpga_devices()).compareTo(other.isSetNum_ocl_fpga_devices());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_ocl_fpga_devices()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_ocl_fpga_devices, other.num_ocl_fpga_devices);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_used_ocl_fpga_devices()).compareTo(other.isSetNum_used_ocl_fpga_devices());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_used_ocl_fpga_devices()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_used_ocl_fpga_devices, other.num_used_ocl_fpga_devices);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_ocl_gpu_devices()).compareTo(other.isSetNum_ocl_gpu_devices());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_ocl_gpu_devices()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_ocl_gpu_devices, other.num_ocl_gpu_devices);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_used_ocl_gpu_devices()).compareTo(other.isSetNum_used_ocl_gpu_devices());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_used_ocl_gpu_devices()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_used_ocl_gpu_devices, other.num_used_ocl_gpu_devices);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSupervisor_id()).compareTo(other.isSetSupervisor_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSupervisor_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supervisor_id, other.supervisor_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotal_resources()).compareTo(other.isSetTotal_resources());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal_resources()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total_resources, other.total_resources);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsed_mem()).compareTo(other.isSetUsed_mem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsed_mem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.used_mem, other.used_mem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsed_cpu()).compareTo(other.isSetUsed_cpu());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsed_cpu()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.used_cpu, other.used_cpu);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SupervisorSummary(");
    boolean first = true;

    sb.append("host:");
    if (this.host == null) {
      sb.append("null");
    } else {
      sb.append(this.host);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("uptime_secs:");
    sb.append(this.uptime_secs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_workers:");
    sb.append(this.num_workers);
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_used_workers:");
    sb.append(this.num_used_workers);
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_ocl_fpga_devices:");
    sb.append(this.num_ocl_fpga_devices);
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_used_ocl_fpga_devices:");
    sb.append(this.num_used_ocl_fpga_devices);
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_ocl_gpu_devices:");
    sb.append(this.num_ocl_gpu_devices);
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_used_ocl_gpu_devices:");
    sb.append(this.num_used_ocl_gpu_devices);
    first = false;
    if (!first) sb.append(", ");
    sb.append("supervisor_id:");
    if (this.supervisor_id == null) {
      sb.append("null");
    } else {
      sb.append(this.supervisor_id);
    }
    first = false;
    if (isSetVersion()) {
      if (!first) sb.append(", ");
      sb.append("version:");
      if (this.version == null) {
        sb.append("null");
      } else {
        sb.append(this.version);
      }
      first = false;
    }
    if (isSetTotal_resources()) {
      if (!first) sb.append(", ");
      sb.append("total_resources:");
      if (this.total_resources == null) {
        sb.append("null");
      } else {
        sb.append(this.total_resources);
      }
      first = false;
    }
    if (isSetUsed_mem()) {
      if (!first) sb.append(", ");
      sb.append("used_mem:");
      sb.append(this.used_mem);
      first = false;
    }
    if (isSetUsed_cpu()) {
      if (!first) sb.append(", ");
      sb.append("used_cpu:");
      sb.append(this.used_cpu);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (host == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'host' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'uptime_secs' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'num_workers' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'num_used_workers' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'num_ocl_fpga_devices' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'num_used_ocl_fpga_devices' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'num_ocl_gpu_devices' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'num_used_ocl_gpu_devices' because it's a primitive and you chose the non-beans generator.
    if (supervisor_id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'supervisor_id' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SupervisorSummaryStandardSchemeFactory implements SchemeFactory {
    public SupervisorSummaryStandardScheme getScheme() {
      return new SupervisorSummaryStandardScheme();
    }
  }

  private static class SupervisorSummaryStandardScheme extends StandardScheme<SupervisorSummary> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SupervisorSummary struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.host = iprot.readString();
              struct.setHostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // UPTIME_SECS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.uptime_secs = iprot.readI32();
              struct.setUptime_secsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NUM_WORKERS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_workers = iprot.readI32();
              struct.setNum_workersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NUM_USED_WORKERS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_used_workers = iprot.readI32();
              struct.setNum_used_workersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NUM_OCL_FPGA_DEVICES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_ocl_fpga_devices = iprot.readI32();
              struct.setNum_ocl_fpga_devicesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NUM_USED_OCL_FPGA_DEVICES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_used_ocl_fpga_devices = iprot.readI32();
              struct.setNum_used_ocl_fpga_devicesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NUM_OCL_GPU_DEVICES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_ocl_gpu_devices = iprot.readI32();
              struct.setNum_ocl_gpu_devicesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // NUM_USED_OCL_GPU_DEVICES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_used_ocl_gpu_devices = iprot.readI32();
              struct.setNum_used_ocl_gpu_devicesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SUPERVISOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.supervisor_id = iprot.readString();
              struct.setSupervisor_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.version = iprot.readString();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TOTAL_RESOURCES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map92 = iprot.readMapBegin();
                struct.total_resources = new HashMap<String,Double>(2*_map92.size);
                String _key93;
                double _val94;
                for (int _i95 = 0; _i95 < _map92.size; ++_i95)
                {
                  _key93 = iprot.readString();
                  _val94 = iprot.readDouble();
                  struct.total_resources.put(_key93, _val94);
                }
                iprot.readMapEnd();
              }
              struct.setTotal_resourcesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // USED_MEM
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.used_mem = iprot.readDouble();
              struct.setUsed_memIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // USED_CPU
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.used_cpu = iprot.readDouble();
              struct.setUsed_cpuIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetUptime_secs()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'uptime_secs' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNum_workers()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'num_workers' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNum_used_workers()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'num_used_workers' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNum_ocl_fpga_devices()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'num_ocl_fpga_devices' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNum_used_ocl_fpga_devices()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'num_used_ocl_fpga_devices' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNum_ocl_gpu_devices()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'num_ocl_gpu_devices' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNum_used_ocl_gpu_devices()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'num_used_ocl_gpu_devices' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SupervisorSummary struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.host != null) {
        oprot.writeFieldBegin(HOST_FIELD_DESC);
        oprot.writeString(struct.host);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(UPTIME_SECS_FIELD_DESC);
      oprot.writeI32(struct.uptime_secs);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_WORKERS_FIELD_DESC);
      oprot.writeI32(struct.num_workers);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_USED_WORKERS_FIELD_DESC);
      oprot.writeI32(struct.num_used_workers);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_OCL_FPGA_DEVICES_FIELD_DESC);
      oprot.writeI32(struct.num_ocl_fpga_devices);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_USED_OCL_FPGA_DEVICES_FIELD_DESC);
      oprot.writeI32(struct.num_used_ocl_fpga_devices);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_OCL_GPU_DEVICES_FIELD_DESC);
      oprot.writeI32(struct.num_ocl_gpu_devices);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_USED_OCL_GPU_DEVICES_FIELD_DESC);
      oprot.writeI32(struct.num_used_ocl_gpu_devices);
      oprot.writeFieldEnd();
      if (struct.supervisor_id != null) {
        oprot.writeFieldBegin(SUPERVISOR_ID_FIELD_DESC);
        oprot.writeString(struct.supervisor_id);
        oprot.writeFieldEnd();
      }
      if (struct.version != null) {
        if (struct.isSetVersion()) {
          oprot.writeFieldBegin(VERSION_FIELD_DESC);
          oprot.writeString(struct.version);
          oprot.writeFieldEnd();
        }
      }
      if (struct.total_resources != null) {
        if (struct.isSetTotal_resources()) {
          oprot.writeFieldBegin(TOTAL_RESOURCES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, struct.total_resources.size()));
            for (Map.Entry<String, Double> _iter96 : struct.total_resources.entrySet())
            {
              oprot.writeString(_iter96.getKey());
              oprot.writeDouble(_iter96.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUsed_mem()) {
        oprot.writeFieldBegin(USED_MEM_FIELD_DESC);
        oprot.writeDouble(struct.used_mem);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUsed_cpu()) {
        oprot.writeFieldBegin(USED_CPU_FIELD_DESC);
        oprot.writeDouble(struct.used_cpu);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SupervisorSummaryTupleSchemeFactory implements SchemeFactory {
    public SupervisorSummaryTupleScheme getScheme() {
      return new SupervisorSummaryTupleScheme();
    }
  }

  private static class SupervisorSummaryTupleScheme extends TupleScheme<SupervisorSummary> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SupervisorSummary struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.host);
      oprot.writeI32(struct.uptime_secs);
      oprot.writeI32(struct.num_workers);
      oprot.writeI32(struct.num_used_workers);
      oprot.writeI32(struct.num_ocl_fpga_devices);
      oprot.writeI32(struct.num_used_ocl_fpga_devices);
      oprot.writeI32(struct.num_ocl_gpu_devices);
      oprot.writeI32(struct.num_used_ocl_gpu_devices);
      oprot.writeString(struct.supervisor_id);
      BitSet optionals = new BitSet();
      if (struct.isSetVersion()) {
        optionals.set(0);
      }
      if (struct.isSetTotal_resources()) {
        optionals.set(1);
      }
      if (struct.isSetUsed_mem()) {
        optionals.set(2);
      }
      if (struct.isSetUsed_cpu()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetVersion()) {
        oprot.writeString(struct.version);
      }
      if (struct.isSetTotal_resources()) {
        {
          oprot.writeI32(struct.total_resources.size());
          for (Map.Entry<String, Double> _iter97 : struct.total_resources.entrySet())
          {
            oprot.writeString(_iter97.getKey());
            oprot.writeDouble(_iter97.getValue());
          }
        }
      }
      if (struct.isSetUsed_mem()) {
        oprot.writeDouble(struct.used_mem);
      }
      if (struct.isSetUsed_cpu()) {
        oprot.writeDouble(struct.used_cpu);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SupervisorSummary struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.host = iprot.readString();
      struct.setHostIsSet(true);
      struct.uptime_secs = iprot.readI32();
      struct.setUptime_secsIsSet(true);
      struct.num_workers = iprot.readI32();
      struct.setNum_workersIsSet(true);
      struct.num_used_workers = iprot.readI32();
      struct.setNum_used_workersIsSet(true);
      struct.num_ocl_fpga_devices = iprot.readI32();
      struct.setNum_ocl_fpga_devicesIsSet(true);
      struct.num_used_ocl_fpga_devices = iprot.readI32();
      struct.setNum_used_ocl_fpga_devicesIsSet(true);
      struct.num_ocl_gpu_devices = iprot.readI32();
      struct.setNum_ocl_gpu_devicesIsSet(true);
      struct.num_used_ocl_gpu_devices = iprot.readI32();
      struct.setNum_used_ocl_gpu_devicesIsSet(true);
      struct.supervisor_id = iprot.readString();
      struct.setSupervisor_idIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.version = iprot.readString();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map98 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.total_resources = new HashMap<String,Double>(2*_map98.size);
          String _key99;
          double _val100;
          for (int _i101 = 0; _i101 < _map98.size; ++_i101)
          {
            _key99 = iprot.readString();
            _val100 = iprot.readDouble();
            struct.total_resources.put(_key99, _val100);
          }
        }
        struct.setTotal_resourcesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.used_mem = iprot.readDouble();
        struct.setUsed_memIsSet(true);
      }
      if (incoming.get(3)) {
        struct.used_cpu = iprot.readDouble();
        struct.setUsed_cpuIsSet(true);
      }
    }
  }

}

