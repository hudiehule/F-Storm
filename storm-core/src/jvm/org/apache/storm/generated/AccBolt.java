/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.storm.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-12-08")
public class AccBolt implements org.apache.thrift.TBase<AccBolt, AccBolt._Fields>, java.io.Serializable, Cloneable, Comparable<AccBolt> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AccBolt");

  private static final org.apache.thrift.protocol.TField ACC_BOLT_OBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("acc_bolt_object", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField COMMAN_FIELD_DESC = new org.apache.thrift.protocol.TField("comman", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField ACC_DEVICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("accDeviceType", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AccBoltStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AccBoltTupleSchemeFactory());
  }

  public ComponentObject acc_bolt_object; // required
  public ComponentCommon comman; // required
  /**
   * 
   * @see AccType
   */
  public AccType accDeviceType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACC_BOLT_OBJECT((short)1, "acc_bolt_object"),
    COMMAN((short)2, "comman"),
    /**
     * 
     * @see AccType
     */
    ACC_DEVICE_TYPE((short)3, "accDeviceType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACC_BOLT_OBJECT
          return ACC_BOLT_OBJECT;
        case 2: // COMMAN
          return COMMAN;
        case 3: // ACC_DEVICE_TYPE
          return ACC_DEVICE_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACC_BOLT_OBJECT, new org.apache.thrift.meta_data.FieldMetaData("acc_bolt_object", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ComponentObject.class)));
    tmpMap.put(_Fields.COMMAN, new org.apache.thrift.meta_data.FieldMetaData("comman", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ComponentCommon.class)));
    tmpMap.put(_Fields.ACC_DEVICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("accDeviceType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, AccType.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AccBolt.class, metaDataMap);
  }

  public AccBolt() {
  }

  public AccBolt(
    ComponentObject acc_bolt_object,
    ComponentCommon comman,
    AccType accDeviceType)
  {
    this();
    this.acc_bolt_object = acc_bolt_object;
    this.comman = comman;
    this.accDeviceType = accDeviceType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AccBolt(AccBolt other) {
    if (other.isSetAcc_bolt_object()) {
      this.acc_bolt_object = new ComponentObject(other.acc_bolt_object);
    }
    if (other.isSetComman()) {
      this.comman = new ComponentCommon(other.comman);
    }
    if (other.isSetAccDeviceType()) {
      this.accDeviceType = other.accDeviceType;
    }
  }

  public AccBolt deepCopy() {
    return new AccBolt(this);
  }

  @Override
  public void clear() {
    this.acc_bolt_object = null;
    this.comman = null;
    this.accDeviceType = null;
  }

  public ComponentObject getAcc_bolt_object() {
    return this.acc_bolt_object;
  }

  public AccBolt setAcc_bolt_object(ComponentObject acc_bolt_object) {
    this.acc_bolt_object = acc_bolt_object;
    return this;
  }

  public void unsetAcc_bolt_object() {
    this.acc_bolt_object = null;
  }

  /** Returns true if field acc_bolt_object is set (has been assigned a value) and false otherwise */
  public boolean isSetAcc_bolt_object() {
    return this.acc_bolt_object != null;
  }

  public void setAcc_bolt_objectIsSet(boolean value) {
    if (!value) {
      this.acc_bolt_object = null;
    }
  }

  public ComponentCommon getComman() {
    return this.comman;
  }

  public AccBolt setComman(ComponentCommon comman) {
    this.comman = comman;
    return this;
  }

  public void unsetComman() {
    this.comman = null;
  }

  /** Returns true if field comman is set (has been assigned a value) and false otherwise */
  public boolean isSetComman() {
    return this.comman != null;
  }

  public void setCommanIsSet(boolean value) {
    if (!value) {
      this.comman = null;
    }
  }

  /**
   * 
   * @see AccType
   */
  public AccType getAccDeviceType() {
    return this.accDeviceType;
  }

  /**
   * 
   * @see AccType
   */
  public AccBolt setAccDeviceType(AccType accDeviceType) {
    this.accDeviceType = accDeviceType;
    return this;
  }

  public void unsetAccDeviceType() {
    this.accDeviceType = null;
  }

  /** Returns true if field accDeviceType is set (has been assigned a value) and false otherwise */
  public boolean isSetAccDeviceType() {
    return this.accDeviceType != null;
  }

  public void setAccDeviceTypeIsSet(boolean value) {
    if (!value) {
      this.accDeviceType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ACC_BOLT_OBJECT:
      if (value == null) {
        unsetAcc_bolt_object();
      } else {
        setAcc_bolt_object((ComponentObject)value);
      }
      break;

    case COMMAN:
      if (value == null) {
        unsetComman();
      } else {
        setComman((ComponentCommon)value);
      }
      break;

    case ACC_DEVICE_TYPE:
      if (value == null) {
        unsetAccDeviceType();
      } else {
        setAccDeviceType((AccType)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ACC_BOLT_OBJECT:
      return getAcc_bolt_object();

    case COMMAN:
      return getComman();

    case ACC_DEVICE_TYPE:
      return getAccDeviceType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ACC_BOLT_OBJECT:
      return isSetAcc_bolt_object();
    case COMMAN:
      return isSetComman();
    case ACC_DEVICE_TYPE:
      return isSetAccDeviceType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AccBolt)
      return this.equals((AccBolt)that);
    return false;
  }

  public boolean equals(AccBolt that) {
    if (that == null)
      return false;

    boolean this_present_acc_bolt_object = true && this.isSetAcc_bolt_object();
    boolean that_present_acc_bolt_object = true && that.isSetAcc_bolt_object();
    if (this_present_acc_bolt_object || that_present_acc_bolt_object) {
      if (!(this_present_acc_bolt_object && that_present_acc_bolt_object))
        return false;
      if (!this.acc_bolt_object.equals(that.acc_bolt_object))
        return false;
    }

    boolean this_present_comman = true && this.isSetComman();
    boolean that_present_comman = true && that.isSetComman();
    if (this_present_comman || that_present_comman) {
      if (!(this_present_comman && that_present_comman))
        return false;
      if (!this.comman.equals(that.comman))
        return false;
    }

    boolean this_present_accDeviceType = true && this.isSetAccDeviceType();
    boolean that_present_accDeviceType = true && that.isSetAccDeviceType();
    if (this_present_accDeviceType || that_present_accDeviceType) {
      if (!(this_present_accDeviceType && that_present_accDeviceType))
        return false;
      if (!this.accDeviceType.equals(that.accDeviceType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_acc_bolt_object = true && (isSetAcc_bolt_object());
    list.add(present_acc_bolt_object);
    if (present_acc_bolt_object)
      list.add(acc_bolt_object);

    boolean present_comman = true && (isSetComman());
    list.add(present_comman);
    if (present_comman)
      list.add(comman);

    boolean present_accDeviceType = true && (isSetAccDeviceType());
    list.add(present_accDeviceType);
    if (present_accDeviceType)
      list.add(accDeviceType.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(AccBolt other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAcc_bolt_object()).compareTo(other.isSetAcc_bolt_object());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcc_bolt_object()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acc_bolt_object, other.acc_bolt_object);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComman()).compareTo(other.isSetComman());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComman()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comman, other.comman);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccDeviceType()).compareTo(other.isSetAccDeviceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccDeviceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accDeviceType, other.accDeviceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AccBolt(");
    boolean first = true;

    sb.append("acc_bolt_object:");
    if (this.acc_bolt_object == null) {
      sb.append("null");
    } else {
      sb.append(this.acc_bolt_object);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("comman:");
    if (this.comman == null) {
      sb.append("null");
    } else {
      sb.append(this.comman);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accDeviceType:");
    if (this.accDeviceType == null) {
      sb.append("null");
    } else {
      sb.append(this.accDeviceType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (acc_bolt_object == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'acc_bolt_object' was not present! Struct: " + toString());
    }
    if (comman == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'comman' was not present! Struct: " + toString());
    }
    if (accDeviceType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'accDeviceType' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (comman != null) {
      comman.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AccBoltStandardSchemeFactory implements SchemeFactory {
    public AccBoltStandardScheme getScheme() {
      return new AccBoltStandardScheme();
    }
  }

  private static class AccBoltStandardScheme extends StandardScheme<AccBolt> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AccBolt struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACC_BOLT_OBJECT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.acc_bolt_object = new ComponentObject();
              struct.acc_bolt_object.read(iprot);
              struct.setAcc_bolt_objectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMMAN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.comman = new ComponentCommon();
              struct.comman.read(iprot);
              struct.setCommanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ACC_DEVICE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.accDeviceType = org.apache.storm.generated.AccType.findByValue(iprot.readI32());
              struct.setAccDeviceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AccBolt struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.acc_bolt_object != null) {
        oprot.writeFieldBegin(ACC_BOLT_OBJECT_FIELD_DESC);
        struct.acc_bolt_object.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.comman != null) {
        oprot.writeFieldBegin(COMMAN_FIELD_DESC);
        struct.comman.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.accDeviceType != null) {
        oprot.writeFieldBegin(ACC_DEVICE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.accDeviceType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AccBoltTupleSchemeFactory implements SchemeFactory {
    public AccBoltTupleScheme getScheme() {
      return new AccBoltTupleScheme();
    }
  }

  private static class AccBoltTupleScheme extends TupleScheme<AccBolt> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AccBolt struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.acc_bolt_object.write(oprot);
      struct.comman.write(oprot);
      oprot.writeI32(struct.accDeviceType.getValue());
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AccBolt struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.acc_bolt_object = new ComponentObject();
      struct.acc_bolt_object.read(iprot);
      struct.setAcc_bolt_objectIsSet(true);
      struct.comman = new ComponentCommon();
      struct.comman.read(iprot);
      struct.setCommanIsSet(true);
      struct.accDeviceType = org.apache.storm.generated.AccType.findByValue(iprot.readI32());
      struct.setAccDeviceTypeIsSet(true);
    }
  }

}

