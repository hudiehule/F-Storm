/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.storm.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-12-08")
public class SupervisorInfo implements org.apache.thrift.TBase<SupervisorInfo, SupervisorInfo._Fields>, java.io.Serializable, Cloneable, Comparable<SupervisorInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SupervisorInfo");

  private static final org.apache.thrift.protocol.TField TIME_SECS_FIELD_DESC = new org.apache.thrift.protocol.TField("time_secs", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField HOSTNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostname", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ASSIGNMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("assignment_id", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField USED_PORTS_FIELD_DESC = new org.apache.thrift.protocol.TField("used_ports", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField META_FIELD_DESC = new org.apache.thrift.protocol.TField("meta", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField SCHEDULER_META_FIELD_DESC = new org.apache.thrift.protocol.TField("scheduler_meta", org.apache.thrift.protocol.TType.MAP, (short)6);
  private static final org.apache.thrift.protocol.TField UPTIME_SECS_FIELD_DESC = new org.apache.thrift.protocol.TField("uptime_secs", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField RESOURCES_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("resources_map", org.apache.thrift.protocol.TType.MAP, (short)9);
  private static final org.apache.thrift.protocol.TField OCL_FPGA_DEVICE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("ocl_fpga_device_num", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField OCL_GPU_DEVICE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("ocl_gpu_device_num", org.apache.thrift.protocol.TType.I32, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SupervisorInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SupervisorInfoTupleSchemeFactory());
  }

  public long time_secs; // required
  public String hostname; // required
  public String assignment_id; // optional
  public List<Long> used_ports; // optional
  public List<Long> meta; // optional
  public Map<String,String> scheduler_meta; // optional
  public long uptime_secs; // optional
  public String version; // optional
  public Map<String,Double> resources_map; // optional
  public int ocl_fpga_device_num; // optional
  public int ocl_gpu_device_num; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TIME_SECS((short)1, "time_secs"),
    HOSTNAME((short)2, "hostname"),
    ASSIGNMENT_ID((short)3, "assignment_id"),
    USED_PORTS((short)4, "used_ports"),
    META((short)5, "meta"),
    SCHEDULER_META((short)6, "scheduler_meta"),
    UPTIME_SECS((short)7, "uptime_secs"),
    VERSION((short)8, "version"),
    RESOURCES_MAP((short)9, "resources_map"),
    OCL_FPGA_DEVICE_NUM((short)10, "ocl_fpga_device_num"),
    OCL_GPU_DEVICE_NUM((short)11, "ocl_gpu_device_num");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TIME_SECS
          return TIME_SECS;
        case 2: // HOSTNAME
          return HOSTNAME;
        case 3: // ASSIGNMENT_ID
          return ASSIGNMENT_ID;
        case 4: // USED_PORTS
          return USED_PORTS;
        case 5: // META
          return META;
        case 6: // SCHEDULER_META
          return SCHEDULER_META;
        case 7: // UPTIME_SECS
          return UPTIME_SECS;
        case 8: // VERSION
          return VERSION;
        case 9: // RESOURCES_MAP
          return RESOURCES_MAP;
        case 10: // OCL_FPGA_DEVICE_NUM
          return OCL_FPGA_DEVICE_NUM;
        case 11: // OCL_GPU_DEVICE_NUM
          return OCL_GPU_DEVICE_NUM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIME_SECS_ISSET_ID = 0;
  private static final int __UPTIME_SECS_ISSET_ID = 1;
  private static final int __OCL_FPGA_DEVICE_NUM_ISSET_ID = 2;
  private static final int __OCL_GPU_DEVICE_NUM_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ASSIGNMENT_ID,_Fields.USED_PORTS,_Fields.META,_Fields.SCHEDULER_META,_Fields.UPTIME_SECS,_Fields.VERSION,_Fields.RESOURCES_MAP,_Fields.OCL_FPGA_DEVICE_NUM,_Fields.OCL_GPU_DEVICE_NUM};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TIME_SECS, new org.apache.thrift.meta_data.FieldMetaData("time_secs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.HOSTNAME, new org.apache.thrift.meta_data.FieldMetaData("hostname", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ASSIGNMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("assignment_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USED_PORTS, new org.apache.thrift.meta_data.FieldMetaData("used_ports", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.META, new org.apache.thrift.meta_data.FieldMetaData("meta", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.SCHEDULER_META, new org.apache.thrift.meta_data.FieldMetaData("scheduler_meta", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.UPTIME_SECS, new org.apache.thrift.meta_data.FieldMetaData("uptime_secs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESOURCES_MAP, new org.apache.thrift.meta_data.FieldMetaData("resources_map", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.OCL_FPGA_DEVICE_NUM, new org.apache.thrift.meta_data.FieldMetaData("ocl_fpga_device_num", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OCL_GPU_DEVICE_NUM, new org.apache.thrift.meta_data.FieldMetaData("ocl_gpu_device_num", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SupervisorInfo.class, metaDataMap);
  }

  public SupervisorInfo() {
  }

  public SupervisorInfo(
    long time_secs,
    String hostname)
  {
    this();
    this.time_secs = time_secs;
    setTime_secsIsSet(true);
    this.hostname = hostname;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SupervisorInfo(SupervisorInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.time_secs = other.time_secs;
    if (other.isSetHostname()) {
      this.hostname = other.hostname;
    }
    if (other.isSetAssignment_id()) {
      this.assignment_id = other.assignment_id;
    }
    if (other.isSetUsed_ports()) {
      List<Long> __this__used_ports = new ArrayList<Long>(other.used_ports);
      this.used_ports = __this__used_ports;
    }
    if (other.isSetMeta()) {
      List<Long> __this__meta = new ArrayList<Long>(other.meta);
      this.meta = __this__meta;
    }
    if (other.isSetScheduler_meta()) {
      Map<String,String> __this__scheduler_meta = new HashMap<String,String>(other.scheduler_meta);
      this.scheduler_meta = __this__scheduler_meta;
    }
    this.uptime_secs = other.uptime_secs;
    if (other.isSetVersion()) {
      this.version = other.version;
    }
    if (other.isSetResources_map()) {
      Map<String,Double> __this__resources_map = new HashMap<String,Double>(other.resources_map);
      this.resources_map = __this__resources_map;
    }
    this.ocl_fpga_device_num = other.ocl_fpga_device_num;
    this.ocl_gpu_device_num = other.ocl_gpu_device_num;
  }

  public SupervisorInfo deepCopy() {
    return new SupervisorInfo(this);
  }

  @Override
  public void clear() {
    setTime_secsIsSet(false);
    this.time_secs = 0;
    this.hostname = null;
    this.assignment_id = null;
    this.used_ports = null;
    this.meta = null;
    this.scheduler_meta = null;
    setUptime_secsIsSet(false);
    this.uptime_secs = 0;
    this.version = null;
    this.resources_map = null;
    setOcl_fpga_device_numIsSet(false);
    this.ocl_fpga_device_num = 0;
    setOcl_gpu_device_numIsSet(false);
    this.ocl_gpu_device_num = 0;
  }

  public long getTime_secs() {
    return this.time_secs;
  }

  public SupervisorInfo setTime_secs(long time_secs) {
    this.time_secs = time_secs;
    setTime_secsIsSet(true);
    return this;
  }

  public void unsetTime_secs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIME_SECS_ISSET_ID);
  }

  /** Returns true if field time_secs is set (has been assigned a value) and false otherwise */
  public boolean isSetTime_secs() {
    return EncodingUtils.testBit(__isset_bitfield, __TIME_SECS_ISSET_ID);
  }

  public void setTime_secsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIME_SECS_ISSET_ID, value);
  }

  public String getHostname() {
    return this.hostname;
  }

  public SupervisorInfo setHostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

  public void unsetHostname() {
    this.hostname = null;
  }

  /** Returns true if field hostname is set (has been assigned a value) and false otherwise */
  public boolean isSetHostname() {
    return this.hostname != null;
  }

  public void setHostnameIsSet(boolean value) {
    if (!value) {
      this.hostname = null;
    }
  }

  public String getAssignment_id() {
    return this.assignment_id;
  }

  public SupervisorInfo setAssignment_id(String assignment_id) {
    this.assignment_id = assignment_id;
    return this;
  }

  public void unsetAssignment_id() {
    this.assignment_id = null;
  }

  /** Returns true if field assignment_id is set (has been assigned a value) and false otherwise */
  public boolean isSetAssignment_id() {
    return this.assignment_id != null;
  }

  public void setAssignment_idIsSet(boolean value) {
    if (!value) {
      this.assignment_id = null;
    }
  }

  public int getUsed_portsSize() {
    return (this.used_ports == null) ? 0 : this.used_ports.size();
  }

  public java.util.Iterator<Long> getUsed_portsIterator() {
    return (this.used_ports == null) ? null : this.used_ports.iterator();
  }

  public void addToUsed_ports(long elem) {
    if (this.used_ports == null) {
      this.used_ports = new ArrayList<Long>();
    }
    this.used_ports.add(elem);
  }

  public List<Long> getUsed_ports() {
    return this.used_ports;
  }

  public SupervisorInfo setUsed_ports(List<Long> used_ports) {
    this.used_ports = used_ports;
    return this;
  }

  public void unsetUsed_ports() {
    this.used_ports = null;
  }

  /** Returns true if field used_ports is set (has been assigned a value) and false otherwise */
  public boolean isSetUsed_ports() {
    return this.used_ports != null;
  }

  public void setUsed_portsIsSet(boolean value) {
    if (!value) {
      this.used_ports = null;
    }
  }

  public int getMetaSize() {
    return (this.meta == null) ? 0 : this.meta.size();
  }

  public java.util.Iterator<Long> getMetaIterator() {
    return (this.meta == null) ? null : this.meta.iterator();
  }

  public void addToMeta(long elem) {
    if (this.meta == null) {
      this.meta = new ArrayList<Long>();
    }
    this.meta.add(elem);
  }

  public List<Long> getMeta() {
    return this.meta;
  }

  public SupervisorInfo setMeta(List<Long> meta) {
    this.meta = meta;
    return this;
  }

  public void unsetMeta() {
    this.meta = null;
  }

  /** Returns true if field meta is set (has been assigned a value) and false otherwise */
  public boolean isSetMeta() {
    return this.meta != null;
  }

  public void setMetaIsSet(boolean value) {
    if (!value) {
      this.meta = null;
    }
  }

  public int getScheduler_metaSize() {
    return (this.scheduler_meta == null) ? 0 : this.scheduler_meta.size();
  }

  public void putToScheduler_meta(String key, String val) {
    if (this.scheduler_meta == null) {
      this.scheduler_meta = new HashMap<String,String>();
    }
    this.scheduler_meta.put(key, val);
  }

  public Map<String,String> getScheduler_meta() {
    return this.scheduler_meta;
  }

  public SupervisorInfo setScheduler_meta(Map<String,String> scheduler_meta) {
    this.scheduler_meta = scheduler_meta;
    return this;
  }

  public void unsetScheduler_meta() {
    this.scheduler_meta = null;
  }

  /** Returns true if field scheduler_meta is set (has been assigned a value) and false otherwise */
  public boolean isSetScheduler_meta() {
    return this.scheduler_meta != null;
  }

  public void setScheduler_metaIsSet(boolean value) {
    if (!value) {
      this.scheduler_meta = null;
    }
  }

  public long getUptime_secs() {
    return this.uptime_secs;
  }

  public SupervisorInfo setUptime_secs(long uptime_secs) {
    this.uptime_secs = uptime_secs;
    setUptime_secsIsSet(true);
    return this;
  }

  public void unsetUptime_secs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPTIME_SECS_ISSET_ID);
  }

  /** Returns true if field uptime_secs is set (has been assigned a value) and false otherwise */
  public boolean isSetUptime_secs() {
    return EncodingUtils.testBit(__isset_bitfield, __UPTIME_SECS_ISSET_ID);
  }

  public void setUptime_secsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPTIME_SECS_ISSET_ID, value);
  }

  public String getVersion() {
    return this.version;
  }

  public SupervisorInfo setVersion(String version) {
    this.version = version;
    return this;
  }

  public void unsetVersion() {
    this.version = null;
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return this.version != null;
  }

  public void setVersionIsSet(boolean value) {
    if (!value) {
      this.version = null;
    }
  }

  public int getResources_mapSize() {
    return (this.resources_map == null) ? 0 : this.resources_map.size();
  }

  public void putToResources_map(String key, double val) {
    if (this.resources_map == null) {
      this.resources_map = new HashMap<String,Double>();
    }
    this.resources_map.put(key, val);
  }

  public Map<String,Double> getResources_map() {
    return this.resources_map;
  }

  public SupervisorInfo setResources_map(Map<String,Double> resources_map) {
    this.resources_map = resources_map;
    return this;
  }

  public void unsetResources_map() {
    this.resources_map = null;
  }

  /** Returns true if field resources_map is set (has been assigned a value) and false otherwise */
  public boolean isSetResources_map() {
    return this.resources_map != null;
  }

  public void setResources_mapIsSet(boolean value) {
    if (!value) {
      this.resources_map = null;
    }
  }

  public int getOcl_fpga_device_num() {
    return this.ocl_fpga_device_num;
  }

  public SupervisorInfo setOcl_fpga_device_num(int ocl_fpga_device_num) {
    this.ocl_fpga_device_num = ocl_fpga_device_num;
    setOcl_fpga_device_numIsSet(true);
    return this;
  }

  public void unsetOcl_fpga_device_num() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OCL_FPGA_DEVICE_NUM_ISSET_ID);
  }

  /** Returns true if field ocl_fpga_device_num is set (has been assigned a value) and false otherwise */
  public boolean isSetOcl_fpga_device_num() {
    return EncodingUtils.testBit(__isset_bitfield, __OCL_FPGA_DEVICE_NUM_ISSET_ID);
  }

  public void setOcl_fpga_device_numIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OCL_FPGA_DEVICE_NUM_ISSET_ID, value);
  }

  public int getOcl_gpu_device_num() {
    return this.ocl_gpu_device_num;
  }

  public SupervisorInfo setOcl_gpu_device_num(int ocl_gpu_device_num) {
    this.ocl_gpu_device_num = ocl_gpu_device_num;
    setOcl_gpu_device_numIsSet(true);
    return this;
  }

  public void unsetOcl_gpu_device_num() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OCL_GPU_DEVICE_NUM_ISSET_ID);
  }

  /** Returns true if field ocl_gpu_device_num is set (has been assigned a value) and false otherwise */
  public boolean isSetOcl_gpu_device_num() {
    return EncodingUtils.testBit(__isset_bitfield, __OCL_GPU_DEVICE_NUM_ISSET_ID);
  }

  public void setOcl_gpu_device_numIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OCL_GPU_DEVICE_NUM_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TIME_SECS:
      if (value == null) {
        unsetTime_secs();
      } else {
        setTime_secs((Long)value);
      }
      break;

    case HOSTNAME:
      if (value == null) {
        unsetHostname();
      } else {
        setHostname((String)value);
      }
      break;

    case ASSIGNMENT_ID:
      if (value == null) {
        unsetAssignment_id();
      } else {
        setAssignment_id((String)value);
      }
      break;

    case USED_PORTS:
      if (value == null) {
        unsetUsed_ports();
      } else {
        setUsed_ports((List<Long>)value);
      }
      break;

    case META:
      if (value == null) {
        unsetMeta();
      } else {
        setMeta((List<Long>)value);
      }
      break;

    case SCHEDULER_META:
      if (value == null) {
        unsetScheduler_meta();
      } else {
        setScheduler_meta((Map<String,String>)value);
      }
      break;

    case UPTIME_SECS:
      if (value == null) {
        unsetUptime_secs();
      } else {
        setUptime_secs((Long)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((String)value);
      }
      break;

    case RESOURCES_MAP:
      if (value == null) {
        unsetResources_map();
      } else {
        setResources_map((Map<String,Double>)value);
      }
      break;

    case OCL_FPGA_DEVICE_NUM:
      if (value == null) {
        unsetOcl_fpga_device_num();
      } else {
        setOcl_fpga_device_num((Integer)value);
      }
      break;

    case OCL_GPU_DEVICE_NUM:
      if (value == null) {
        unsetOcl_gpu_device_num();
      } else {
        setOcl_gpu_device_num((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TIME_SECS:
      return getTime_secs();

    case HOSTNAME:
      return getHostname();

    case ASSIGNMENT_ID:
      return getAssignment_id();

    case USED_PORTS:
      return getUsed_ports();

    case META:
      return getMeta();

    case SCHEDULER_META:
      return getScheduler_meta();

    case UPTIME_SECS:
      return getUptime_secs();

    case VERSION:
      return getVersion();

    case RESOURCES_MAP:
      return getResources_map();

    case OCL_FPGA_DEVICE_NUM:
      return getOcl_fpga_device_num();

    case OCL_GPU_DEVICE_NUM:
      return getOcl_gpu_device_num();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TIME_SECS:
      return isSetTime_secs();
    case HOSTNAME:
      return isSetHostname();
    case ASSIGNMENT_ID:
      return isSetAssignment_id();
    case USED_PORTS:
      return isSetUsed_ports();
    case META:
      return isSetMeta();
    case SCHEDULER_META:
      return isSetScheduler_meta();
    case UPTIME_SECS:
      return isSetUptime_secs();
    case VERSION:
      return isSetVersion();
    case RESOURCES_MAP:
      return isSetResources_map();
    case OCL_FPGA_DEVICE_NUM:
      return isSetOcl_fpga_device_num();
    case OCL_GPU_DEVICE_NUM:
      return isSetOcl_gpu_device_num();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SupervisorInfo)
      return this.equals((SupervisorInfo)that);
    return false;
  }

  public boolean equals(SupervisorInfo that) {
    if (that == null)
      return false;

    boolean this_present_time_secs = true;
    boolean that_present_time_secs = true;
    if (this_present_time_secs || that_present_time_secs) {
      if (!(this_present_time_secs && that_present_time_secs))
        return false;
      if (this.time_secs != that.time_secs)
        return false;
    }

    boolean this_present_hostname = true && this.isSetHostname();
    boolean that_present_hostname = true && that.isSetHostname();
    if (this_present_hostname || that_present_hostname) {
      if (!(this_present_hostname && that_present_hostname))
        return false;
      if (!this.hostname.equals(that.hostname))
        return false;
    }

    boolean this_present_assignment_id = true && this.isSetAssignment_id();
    boolean that_present_assignment_id = true && that.isSetAssignment_id();
    if (this_present_assignment_id || that_present_assignment_id) {
      if (!(this_present_assignment_id && that_present_assignment_id))
        return false;
      if (!this.assignment_id.equals(that.assignment_id))
        return false;
    }

    boolean this_present_used_ports = true && this.isSetUsed_ports();
    boolean that_present_used_ports = true && that.isSetUsed_ports();
    if (this_present_used_ports || that_present_used_ports) {
      if (!(this_present_used_ports && that_present_used_ports))
        return false;
      if (!this.used_ports.equals(that.used_ports))
        return false;
    }

    boolean this_present_meta = true && this.isSetMeta();
    boolean that_present_meta = true && that.isSetMeta();
    if (this_present_meta || that_present_meta) {
      if (!(this_present_meta && that_present_meta))
        return false;
      if (!this.meta.equals(that.meta))
        return false;
    }

    boolean this_present_scheduler_meta = true && this.isSetScheduler_meta();
    boolean that_present_scheduler_meta = true && that.isSetScheduler_meta();
    if (this_present_scheduler_meta || that_present_scheduler_meta) {
      if (!(this_present_scheduler_meta && that_present_scheduler_meta))
        return false;
      if (!this.scheduler_meta.equals(that.scheduler_meta))
        return false;
    }

    boolean this_present_uptime_secs = true && this.isSetUptime_secs();
    boolean that_present_uptime_secs = true && that.isSetUptime_secs();
    if (this_present_uptime_secs || that_present_uptime_secs) {
      if (!(this_present_uptime_secs && that_present_uptime_secs))
        return false;
      if (this.uptime_secs != that.uptime_secs)
        return false;
    }

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (!this.version.equals(that.version))
        return false;
    }

    boolean this_present_resources_map = true && this.isSetResources_map();
    boolean that_present_resources_map = true && that.isSetResources_map();
    if (this_present_resources_map || that_present_resources_map) {
      if (!(this_present_resources_map && that_present_resources_map))
        return false;
      if (!this.resources_map.equals(that.resources_map))
        return false;
    }

    boolean this_present_ocl_fpga_device_num = true && this.isSetOcl_fpga_device_num();
    boolean that_present_ocl_fpga_device_num = true && that.isSetOcl_fpga_device_num();
    if (this_present_ocl_fpga_device_num || that_present_ocl_fpga_device_num) {
      if (!(this_present_ocl_fpga_device_num && that_present_ocl_fpga_device_num))
        return false;
      if (this.ocl_fpga_device_num != that.ocl_fpga_device_num)
        return false;
    }

    boolean this_present_ocl_gpu_device_num = true && this.isSetOcl_gpu_device_num();
    boolean that_present_ocl_gpu_device_num = true && that.isSetOcl_gpu_device_num();
    if (this_present_ocl_gpu_device_num || that_present_ocl_gpu_device_num) {
      if (!(this_present_ocl_gpu_device_num && that_present_ocl_gpu_device_num))
        return false;
      if (this.ocl_gpu_device_num != that.ocl_gpu_device_num)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_time_secs = true;
    list.add(present_time_secs);
    if (present_time_secs)
      list.add(time_secs);

    boolean present_hostname = true && (isSetHostname());
    list.add(present_hostname);
    if (present_hostname)
      list.add(hostname);

    boolean present_assignment_id = true && (isSetAssignment_id());
    list.add(present_assignment_id);
    if (present_assignment_id)
      list.add(assignment_id);

    boolean present_used_ports = true && (isSetUsed_ports());
    list.add(present_used_ports);
    if (present_used_ports)
      list.add(used_ports);

    boolean present_meta = true && (isSetMeta());
    list.add(present_meta);
    if (present_meta)
      list.add(meta);

    boolean present_scheduler_meta = true && (isSetScheduler_meta());
    list.add(present_scheduler_meta);
    if (present_scheduler_meta)
      list.add(scheduler_meta);

    boolean present_uptime_secs = true && (isSetUptime_secs());
    list.add(present_uptime_secs);
    if (present_uptime_secs)
      list.add(uptime_secs);

    boolean present_version = true && (isSetVersion());
    list.add(present_version);
    if (present_version)
      list.add(version);

    boolean present_resources_map = true && (isSetResources_map());
    list.add(present_resources_map);
    if (present_resources_map)
      list.add(resources_map);

    boolean present_ocl_fpga_device_num = true && (isSetOcl_fpga_device_num());
    list.add(present_ocl_fpga_device_num);
    if (present_ocl_fpga_device_num)
      list.add(ocl_fpga_device_num);

    boolean present_ocl_gpu_device_num = true && (isSetOcl_gpu_device_num());
    list.add(present_ocl_gpu_device_num);
    if (present_ocl_gpu_device_num)
      list.add(ocl_gpu_device_num);

    return list.hashCode();
  }

  @Override
  public int compareTo(SupervisorInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTime_secs()).compareTo(other.isSetTime_secs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime_secs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time_secs, other.time_secs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHostname()).compareTo(other.isSetHostname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostname, other.hostname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssignment_id()).compareTo(other.isSetAssignment_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssignment_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assignment_id, other.assignment_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsed_ports()).compareTo(other.isSetUsed_ports());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsed_ports()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.used_ports, other.used_ports);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMeta()).compareTo(other.isSetMeta());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeta()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meta, other.meta);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScheduler_meta()).compareTo(other.isSetScheduler_meta());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScheduler_meta()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scheduler_meta, other.scheduler_meta);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUptime_secs()).compareTo(other.isSetUptime_secs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUptime_secs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uptime_secs, other.uptime_secs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResources_map()).compareTo(other.isSetResources_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResources_map()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resources_map, other.resources_map);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOcl_fpga_device_num()).compareTo(other.isSetOcl_fpga_device_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOcl_fpga_device_num()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ocl_fpga_device_num, other.ocl_fpga_device_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOcl_gpu_device_num()).compareTo(other.isSetOcl_gpu_device_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOcl_gpu_device_num()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ocl_gpu_device_num, other.ocl_gpu_device_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SupervisorInfo(");
    boolean first = true;

    sb.append("time_secs:");
    sb.append(this.time_secs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hostname:");
    if (this.hostname == null) {
      sb.append("null");
    } else {
      sb.append(this.hostname);
    }
    first = false;
    if (isSetAssignment_id()) {
      if (!first) sb.append(", ");
      sb.append("assignment_id:");
      if (this.assignment_id == null) {
        sb.append("null");
      } else {
        sb.append(this.assignment_id);
      }
      first = false;
    }
    if (isSetUsed_ports()) {
      if (!first) sb.append(", ");
      sb.append("used_ports:");
      if (this.used_ports == null) {
        sb.append("null");
      } else {
        sb.append(this.used_ports);
      }
      first = false;
    }
    if (isSetMeta()) {
      if (!first) sb.append(", ");
      sb.append("meta:");
      if (this.meta == null) {
        sb.append("null");
      } else {
        sb.append(this.meta);
      }
      first = false;
    }
    if (isSetScheduler_meta()) {
      if (!first) sb.append(", ");
      sb.append("scheduler_meta:");
      if (this.scheduler_meta == null) {
        sb.append("null");
      } else {
        sb.append(this.scheduler_meta);
      }
      first = false;
    }
    if (isSetUptime_secs()) {
      if (!first) sb.append(", ");
      sb.append("uptime_secs:");
      sb.append(this.uptime_secs);
      first = false;
    }
    if (isSetVersion()) {
      if (!first) sb.append(", ");
      sb.append("version:");
      if (this.version == null) {
        sb.append("null");
      } else {
        sb.append(this.version);
      }
      first = false;
    }
    if (isSetResources_map()) {
      if (!first) sb.append(", ");
      sb.append("resources_map:");
      if (this.resources_map == null) {
        sb.append("null");
      } else {
        sb.append(this.resources_map);
      }
      first = false;
    }
    if (isSetOcl_fpga_device_num()) {
      if (!first) sb.append(", ");
      sb.append("ocl_fpga_device_num:");
      sb.append(this.ocl_fpga_device_num);
      first = false;
    }
    if (isSetOcl_gpu_device_num()) {
      if (!first) sb.append(", ");
      sb.append("ocl_gpu_device_num:");
      sb.append(this.ocl_gpu_device_num);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'time_secs' because it's a primitive and you chose the non-beans generator.
    if (hostname == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'hostname' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SupervisorInfoStandardSchemeFactory implements SchemeFactory {
    public SupervisorInfoStandardScheme getScheme() {
      return new SupervisorInfoStandardScheme();
    }
  }

  private static class SupervisorInfoStandardScheme extends StandardScheme<SupervisorInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SupervisorInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TIME_SECS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.time_secs = iprot.readI64();
              struct.setTime_secsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HOSTNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hostname = iprot.readString();
              struct.setHostnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ASSIGNMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.assignment_id = iprot.readString();
              struct.setAssignment_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // USED_PORTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list624 = iprot.readListBegin();
                struct.used_ports = new ArrayList<Long>(_list624.size);
                long _elem625;
                for (int _i626 = 0; _i626 < _list624.size; ++_i626)
                {
                  _elem625 = iprot.readI64();
                  struct.used_ports.add(_elem625);
                }
                iprot.readListEnd();
              }
              struct.setUsed_portsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // META
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list627 = iprot.readListBegin();
                struct.meta = new ArrayList<Long>(_list627.size);
                long _elem628;
                for (int _i629 = 0; _i629 < _list627.size; ++_i629)
                {
                  _elem628 = iprot.readI64();
                  struct.meta.add(_elem628);
                }
                iprot.readListEnd();
              }
              struct.setMetaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SCHEDULER_META
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map630 = iprot.readMapBegin();
                struct.scheduler_meta = new HashMap<String,String>(2*_map630.size);
                String _key631;
                String _val632;
                for (int _i633 = 0; _i633 < _map630.size; ++_i633)
                {
                  _key631 = iprot.readString();
                  _val632 = iprot.readString();
                  struct.scheduler_meta.put(_key631, _val632);
                }
                iprot.readMapEnd();
              }
              struct.setScheduler_metaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // UPTIME_SECS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.uptime_secs = iprot.readI64();
              struct.setUptime_secsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.version = iprot.readString();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RESOURCES_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map634 = iprot.readMapBegin();
                struct.resources_map = new HashMap<String,Double>(2*_map634.size);
                String _key635;
                double _val636;
                for (int _i637 = 0; _i637 < _map634.size; ++_i637)
                {
                  _key635 = iprot.readString();
                  _val636 = iprot.readDouble();
                  struct.resources_map.put(_key635, _val636);
                }
                iprot.readMapEnd();
              }
              struct.setResources_mapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // OCL_FPGA_DEVICE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ocl_fpga_device_num = iprot.readI32();
              struct.setOcl_fpga_device_numIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // OCL_GPU_DEVICE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ocl_gpu_device_num = iprot.readI32();
              struct.setOcl_gpu_device_numIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTime_secs()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'time_secs' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SupervisorInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TIME_SECS_FIELD_DESC);
      oprot.writeI64(struct.time_secs);
      oprot.writeFieldEnd();
      if (struct.hostname != null) {
        oprot.writeFieldBegin(HOSTNAME_FIELD_DESC);
        oprot.writeString(struct.hostname);
        oprot.writeFieldEnd();
      }
      if (struct.assignment_id != null) {
        if (struct.isSetAssignment_id()) {
          oprot.writeFieldBegin(ASSIGNMENT_ID_FIELD_DESC);
          oprot.writeString(struct.assignment_id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.used_ports != null) {
        if (struct.isSetUsed_ports()) {
          oprot.writeFieldBegin(USED_PORTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.used_ports.size()));
            for (long _iter638 : struct.used_ports)
            {
              oprot.writeI64(_iter638);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.meta != null) {
        if (struct.isSetMeta()) {
          oprot.writeFieldBegin(META_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.meta.size()));
            for (long _iter639 : struct.meta)
            {
              oprot.writeI64(_iter639);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.scheduler_meta != null) {
        if (struct.isSetScheduler_meta()) {
          oprot.writeFieldBegin(SCHEDULER_META_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.scheduler_meta.size()));
            for (Map.Entry<String, String> _iter640 : struct.scheduler_meta.entrySet())
            {
              oprot.writeString(_iter640.getKey());
              oprot.writeString(_iter640.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUptime_secs()) {
        oprot.writeFieldBegin(UPTIME_SECS_FIELD_DESC);
        oprot.writeI64(struct.uptime_secs);
        oprot.writeFieldEnd();
      }
      if (struct.version != null) {
        if (struct.isSetVersion()) {
          oprot.writeFieldBegin(VERSION_FIELD_DESC);
          oprot.writeString(struct.version);
          oprot.writeFieldEnd();
        }
      }
      if (struct.resources_map != null) {
        if (struct.isSetResources_map()) {
          oprot.writeFieldBegin(RESOURCES_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, struct.resources_map.size()));
            for (Map.Entry<String, Double> _iter641 : struct.resources_map.entrySet())
            {
              oprot.writeString(_iter641.getKey());
              oprot.writeDouble(_iter641.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOcl_fpga_device_num()) {
        oprot.writeFieldBegin(OCL_FPGA_DEVICE_NUM_FIELD_DESC);
        oprot.writeI32(struct.ocl_fpga_device_num);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOcl_gpu_device_num()) {
        oprot.writeFieldBegin(OCL_GPU_DEVICE_NUM_FIELD_DESC);
        oprot.writeI32(struct.ocl_gpu_device_num);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SupervisorInfoTupleSchemeFactory implements SchemeFactory {
    public SupervisorInfoTupleScheme getScheme() {
      return new SupervisorInfoTupleScheme();
    }
  }

  private static class SupervisorInfoTupleScheme extends TupleScheme<SupervisorInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SupervisorInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.time_secs);
      oprot.writeString(struct.hostname);
      BitSet optionals = new BitSet();
      if (struct.isSetAssignment_id()) {
        optionals.set(0);
      }
      if (struct.isSetUsed_ports()) {
        optionals.set(1);
      }
      if (struct.isSetMeta()) {
        optionals.set(2);
      }
      if (struct.isSetScheduler_meta()) {
        optionals.set(3);
      }
      if (struct.isSetUptime_secs()) {
        optionals.set(4);
      }
      if (struct.isSetVersion()) {
        optionals.set(5);
      }
      if (struct.isSetResources_map()) {
        optionals.set(6);
      }
      if (struct.isSetOcl_fpga_device_num()) {
        optionals.set(7);
      }
      if (struct.isSetOcl_gpu_device_num()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetAssignment_id()) {
        oprot.writeString(struct.assignment_id);
      }
      if (struct.isSetUsed_ports()) {
        {
          oprot.writeI32(struct.used_ports.size());
          for (long _iter642 : struct.used_ports)
          {
            oprot.writeI64(_iter642);
          }
        }
      }
      if (struct.isSetMeta()) {
        {
          oprot.writeI32(struct.meta.size());
          for (long _iter643 : struct.meta)
          {
            oprot.writeI64(_iter643);
          }
        }
      }
      if (struct.isSetScheduler_meta()) {
        {
          oprot.writeI32(struct.scheduler_meta.size());
          for (Map.Entry<String, String> _iter644 : struct.scheduler_meta.entrySet())
          {
            oprot.writeString(_iter644.getKey());
            oprot.writeString(_iter644.getValue());
          }
        }
      }
      if (struct.isSetUptime_secs()) {
        oprot.writeI64(struct.uptime_secs);
      }
      if (struct.isSetVersion()) {
        oprot.writeString(struct.version);
      }
      if (struct.isSetResources_map()) {
        {
          oprot.writeI32(struct.resources_map.size());
          for (Map.Entry<String, Double> _iter645 : struct.resources_map.entrySet())
          {
            oprot.writeString(_iter645.getKey());
            oprot.writeDouble(_iter645.getValue());
          }
        }
      }
      if (struct.isSetOcl_fpga_device_num()) {
        oprot.writeI32(struct.ocl_fpga_device_num);
      }
      if (struct.isSetOcl_gpu_device_num()) {
        oprot.writeI32(struct.ocl_gpu_device_num);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SupervisorInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.time_secs = iprot.readI64();
      struct.setTime_secsIsSet(true);
      struct.hostname = iprot.readString();
      struct.setHostnameIsSet(true);
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.assignment_id = iprot.readString();
        struct.setAssignment_idIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list646 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.used_ports = new ArrayList<Long>(_list646.size);
          long _elem647;
          for (int _i648 = 0; _i648 < _list646.size; ++_i648)
          {
            _elem647 = iprot.readI64();
            struct.used_ports.add(_elem647);
          }
        }
        struct.setUsed_portsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list649 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.meta = new ArrayList<Long>(_list649.size);
          long _elem650;
          for (int _i651 = 0; _i651 < _list649.size; ++_i651)
          {
            _elem650 = iprot.readI64();
            struct.meta.add(_elem650);
          }
        }
        struct.setMetaIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map652 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.scheduler_meta = new HashMap<String,String>(2*_map652.size);
          String _key653;
          String _val654;
          for (int _i655 = 0; _i655 < _map652.size; ++_i655)
          {
            _key653 = iprot.readString();
            _val654 = iprot.readString();
            struct.scheduler_meta.put(_key653, _val654);
          }
        }
        struct.setScheduler_metaIsSet(true);
      }
      if (incoming.get(4)) {
        struct.uptime_secs = iprot.readI64();
        struct.setUptime_secsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.version = iprot.readString();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TMap _map656 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.resources_map = new HashMap<String,Double>(2*_map656.size);
          String _key657;
          double _val658;
          for (int _i659 = 0; _i659 < _map656.size; ++_i659)
          {
            _key657 = iprot.readString();
            _val658 = iprot.readDouble();
            struct.resources_map.put(_key657, _val658);
          }
        }
        struct.setResources_mapIsSet(true);
      }
      if (incoming.get(7)) {
        struct.ocl_fpga_device_num = iprot.readI32();
        struct.setOcl_fpga_device_numIsSet(true);
      }
      if (incoming.get(8)) {
        struct.ocl_gpu_device_num = iprot.readI32();
        struct.setOcl_gpu_device_numIsSet(true);
      }
    }
  }

}

