/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.storm.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-12-08")
public class ComponentPageInfo implements org.apache.thrift.TBase<ComponentPageInfo, ComponentPageInfo._Fields>, java.io.Serializable, Cloneable, Comparable<ComponentPageInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ComponentPageInfo");

  private static final org.apache.thrift.protocol.TField COMPONENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("component_id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COMPONENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("component_type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ACC_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("acc_type", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TOPOLOGY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("topology_id", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TOPOLOGY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("topology_name", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField NUM_EXECUTORS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_executors", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField NUM_TASKS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_tasks", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField WINDOW_TO_STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("window_to_stats", org.apache.thrift.protocol.TType.MAP, (short)8);
  private static final org.apache.thrift.protocol.TField GSID_TO_INPUT_STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("gsid_to_input_stats", org.apache.thrift.protocol.TType.MAP, (short)9);
  private static final org.apache.thrift.protocol.TField SID_TO_OUTPUT_STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("sid_to_output_stats", org.apache.thrift.protocol.TType.MAP, (short)10);
  private static final org.apache.thrift.protocol.TField EXEC_STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("exec_stats", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField ERRORS_FIELD_DESC = new org.apache.thrift.protocol.TField("errors", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField EVENTLOG_HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("eventlog_host", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField EVENTLOG_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("eventlog_port", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField DEBUG_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("debug_options", org.apache.thrift.protocol.TType.STRUCT, (short)15);
  private static final org.apache.thrift.protocol.TField TOPOLOGY_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("topology_status", org.apache.thrift.protocol.TType.STRING, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ComponentPageInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ComponentPageInfoTupleSchemeFactory());
  }

  public String component_id; // required
  /**
   * 
   * @see ComponentType
   */
  public ComponentType component_type; // required
  /**
   * 
   * @see AccType
   */
  public AccType acc_type; // optional
  public String topology_id; // optional
  public String topology_name; // optional
  public int num_executors; // optional
  public int num_tasks; // optional
  public Map<String,ComponentAggregateStats> window_to_stats; // optional
  public Map<GlobalStreamId,ComponentAggregateStats> gsid_to_input_stats; // optional
  public Map<String,ComponentAggregateStats> sid_to_output_stats; // optional
  public List<ExecutorAggregateStats> exec_stats; // optional
  public List<ErrorInfo> errors; // optional
  public String eventlog_host; // optional
  public int eventlog_port; // optional
  public DebugOptions debug_options; // optional
  public String topology_status; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMPONENT_ID((short)1, "component_id"),
    /**
     * 
     * @see ComponentType
     */
    COMPONENT_TYPE((short)2, "component_type"),
    /**
     * 
     * @see AccType
     */
    ACC_TYPE((short)3, "acc_type"),
    TOPOLOGY_ID((short)4, "topology_id"),
    TOPOLOGY_NAME((short)5, "topology_name"),
    NUM_EXECUTORS((short)6, "num_executors"),
    NUM_TASKS((short)7, "num_tasks"),
    WINDOW_TO_STATS((short)8, "window_to_stats"),
    GSID_TO_INPUT_STATS((short)9, "gsid_to_input_stats"),
    SID_TO_OUTPUT_STATS((short)10, "sid_to_output_stats"),
    EXEC_STATS((short)11, "exec_stats"),
    ERRORS((short)12, "errors"),
    EVENTLOG_HOST((short)13, "eventlog_host"),
    EVENTLOG_PORT((short)14, "eventlog_port"),
    DEBUG_OPTIONS((short)15, "debug_options"),
    TOPOLOGY_STATUS((short)16, "topology_status");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMPONENT_ID
          return COMPONENT_ID;
        case 2: // COMPONENT_TYPE
          return COMPONENT_TYPE;
        case 3: // ACC_TYPE
          return ACC_TYPE;
        case 4: // TOPOLOGY_ID
          return TOPOLOGY_ID;
        case 5: // TOPOLOGY_NAME
          return TOPOLOGY_NAME;
        case 6: // NUM_EXECUTORS
          return NUM_EXECUTORS;
        case 7: // NUM_TASKS
          return NUM_TASKS;
        case 8: // WINDOW_TO_STATS
          return WINDOW_TO_STATS;
        case 9: // GSID_TO_INPUT_STATS
          return GSID_TO_INPUT_STATS;
        case 10: // SID_TO_OUTPUT_STATS
          return SID_TO_OUTPUT_STATS;
        case 11: // EXEC_STATS
          return EXEC_STATS;
        case 12: // ERRORS
          return ERRORS;
        case 13: // EVENTLOG_HOST
          return EVENTLOG_HOST;
        case 14: // EVENTLOG_PORT
          return EVENTLOG_PORT;
        case 15: // DEBUG_OPTIONS
          return DEBUG_OPTIONS;
        case 16: // TOPOLOGY_STATUS
          return TOPOLOGY_STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUM_EXECUTORS_ISSET_ID = 0;
  private static final int __NUM_TASKS_ISSET_ID = 1;
  private static final int __EVENTLOG_PORT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ACC_TYPE,_Fields.TOPOLOGY_ID,_Fields.TOPOLOGY_NAME,_Fields.NUM_EXECUTORS,_Fields.NUM_TASKS,_Fields.WINDOW_TO_STATS,_Fields.GSID_TO_INPUT_STATS,_Fields.SID_TO_OUTPUT_STATS,_Fields.EXEC_STATS,_Fields.ERRORS,_Fields.EVENTLOG_HOST,_Fields.EVENTLOG_PORT,_Fields.DEBUG_OPTIONS,_Fields.TOPOLOGY_STATUS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMPONENT_ID, new org.apache.thrift.meta_data.FieldMetaData("component_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPONENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("component_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ComponentType.class)));
    tmpMap.put(_Fields.ACC_TYPE, new org.apache.thrift.meta_data.FieldMetaData("acc_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, AccType.class)));
    tmpMap.put(_Fields.TOPOLOGY_ID, new org.apache.thrift.meta_data.FieldMetaData("topology_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOPOLOGY_NAME, new org.apache.thrift.meta_data.FieldMetaData("topology_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUM_EXECUTORS, new org.apache.thrift.meta_data.FieldMetaData("num_executors", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_TASKS, new org.apache.thrift.meta_data.FieldMetaData("num_tasks", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WINDOW_TO_STATS, new org.apache.thrift.meta_data.FieldMetaData("window_to_stats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ComponentAggregateStats.class))));
    tmpMap.put(_Fields.GSID_TO_INPUT_STATS, new org.apache.thrift.meta_data.FieldMetaData("gsid_to_input_stats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GlobalStreamId.class), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ComponentAggregateStats.class))));
    tmpMap.put(_Fields.SID_TO_OUTPUT_STATS, new org.apache.thrift.meta_data.FieldMetaData("sid_to_output_stats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ComponentAggregateStats.class))));
    tmpMap.put(_Fields.EXEC_STATS, new org.apache.thrift.meta_data.FieldMetaData("exec_stats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExecutorAggregateStats.class))));
    tmpMap.put(_Fields.ERRORS, new org.apache.thrift.meta_data.FieldMetaData("errors", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ErrorInfo.class))));
    tmpMap.put(_Fields.EVENTLOG_HOST, new org.apache.thrift.meta_data.FieldMetaData("eventlog_host", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EVENTLOG_PORT, new org.apache.thrift.meta_data.FieldMetaData("eventlog_port", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEBUG_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("debug_options", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DebugOptions.class)));
    tmpMap.put(_Fields.TOPOLOGY_STATUS, new org.apache.thrift.meta_data.FieldMetaData("topology_status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ComponentPageInfo.class, metaDataMap);
  }

  public ComponentPageInfo() {
  }

  public ComponentPageInfo(
    String component_id,
    ComponentType component_type)
  {
    this();
    this.component_id = component_id;
    this.component_type = component_type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ComponentPageInfo(ComponentPageInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetComponent_id()) {
      this.component_id = other.component_id;
    }
    if (other.isSetComponent_type()) {
      this.component_type = other.component_type;
    }
    if (other.isSetAcc_type()) {
      this.acc_type = other.acc_type;
    }
    if (other.isSetTopology_id()) {
      this.topology_id = other.topology_id;
    }
    if (other.isSetTopology_name()) {
      this.topology_name = other.topology_name;
    }
    this.num_executors = other.num_executors;
    this.num_tasks = other.num_tasks;
    if (other.isSetWindow_to_stats()) {
      Map<String,ComponentAggregateStats> __this__window_to_stats = new HashMap<String,ComponentAggregateStats>(other.window_to_stats.size());
      for (Map.Entry<String, ComponentAggregateStats> other_element : other.window_to_stats.entrySet()) {

        String other_element_key = other_element.getKey();
        ComponentAggregateStats other_element_value = other_element.getValue();

        String __this__window_to_stats_copy_key = other_element_key;

        ComponentAggregateStats __this__window_to_stats_copy_value = new ComponentAggregateStats(other_element_value);

        __this__window_to_stats.put(__this__window_to_stats_copy_key, __this__window_to_stats_copy_value);
      }
      this.window_to_stats = __this__window_to_stats;
    }
    if (other.isSetGsid_to_input_stats()) {
      Map<GlobalStreamId,ComponentAggregateStats> __this__gsid_to_input_stats = new HashMap<GlobalStreamId,ComponentAggregateStats>(other.gsid_to_input_stats.size());
      for (Map.Entry<GlobalStreamId, ComponentAggregateStats> other_element : other.gsid_to_input_stats.entrySet()) {

        GlobalStreamId other_element_key = other_element.getKey();
        ComponentAggregateStats other_element_value = other_element.getValue();

        GlobalStreamId __this__gsid_to_input_stats_copy_key = new GlobalStreamId(other_element_key);

        ComponentAggregateStats __this__gsid_to_input_stats_copy_value = new ComponentAggregateStats(other_element_value);

        __this__gsid_to_input_stats.put(__this__gsid_to_input_stats_copy_key, __this__gsid_to_input_stats_copy_value);
      }
      this.gsid_to_input_stats = __this__gsid_to_input_stats;
    }
    if (other.isSetSid_to_output_stats()) {
      Map<String,ComponentAggregateStats> __this__sid_to_output_stats = new HashMap<String,ComponentAggregateStats>(other.sid_to_output_stats.size());
      for (Map.Entry<String, ComponentAggregateStats> other_element : other.sid_to_output_stats.entrySet()) {

        String other_element_key = other_element.getKey();
        ComponentAggregateStats other_element_value = other_element.getValue();

        String __this__sid_to_output_stats_copy_key = other_element_key;

        ComponentAggregateStats __this__sid_to_output_stats_copy_value = new ComponentAggregateStats(other_element_value);

        __this__sid_to_output_stats.put(__this__sid_to_output_stats_copy_key, __this__sid_to_output_stats_copy_value);
      }
      this.sid_to_output_stats = __this__sid_to_output_stats;
    }
    if (other.isSetExec_stats()) {
      List<ExecutorAggregateStats> __this__exec_stats = new ArrayList<ExecutorAggregateStats>(other.exec_stats.size());
      for (ExecutorAggregateStats other_element : other.exec_stats) {
        __this__exec_stats.add(new ExecutorAggregateStats(other_element));
      }
      this.exec_stats = __this__exec_stats;
    }
    if (other.isSetErrors()) {
      List<ErrorInfo> __this__errors = new ArrayList<ErrorInfo>(other.errors.size());
      for (ErrorInfo other_element : other.errors) {
        __this__errors.add(new ErrorInfo(other_element));
      }
      this.errors = __this__errors;
    }
    if (other.isSetEventlog_host()) {
      this.eventlog_host = other.eventlog_host;
    }
    this.eventlog_port = other.eventlog_port;
    if (other.isSetDebug_options()) {
      this.debug_options = new DebugOptions(other.debug_options);
    }
    if (other.isSetTopology_status()) {
      this.topology_status = other.topology_status;
    }
  }

  public ComponentPageInfo deepCopy() {
    return new ComponentPageInfo(this);
  }

  @Override
  public void clear() {
    this.component_id = null;
    this.component_type = null;
    this.acc_type = null;
    this.topology_id = null;
    this.topology_name = null;
    setNum_executorsIsSet(false);
    this.num_executors = 0;
    setNum_tasksIsSet(false);
    this.num_tasks = 0;
    this.window_to_stats = null;
    this.gsid_to_input_stats = null;
    this.sid_to_output_stats = null;
    this.exec_stats = null;
    this.errors = null;
    this.eventlog_host = null;
    setEventlog_portIsSet(false);
    this.eventlog_port = 0;
    this.debug_options = null;
    this.topology_status = null;
  }

  public String getComponent_id() {
    return this.component_id;
  }

  public ComponentPageInfo setComponent_id(String component_id) {
    this.component_id = component_id;
    return this;
  }

  public void unsetComponent_id() {
    this.component_id = null;
  }

  /** Returns true if field component_id is set (has been assigned a value) and false otherwise */
  public boolean isSetComponent_id() {
    return this.component_id != null;
  }

  public void setComponent_idIsSet(boolean value) {
    if (!value) {
      this.component_id = null;
    }
  }

  /**
   * 
   * @see ComponentType
   */
  public ComponentType getComponent_type() {
    return this.component_type;
  }

  /**
   * 
   * @see ComponentType
   */
  public ComponentPageInfo setComponent_type(ComponentType component_type) {
    this.component_type = component_type;
    return this;
  }

  public void unsetComponent_type() {
    this.component_type = null;
  }

  /** Returns true if field component_type is set (has been assigned a value) and false otherwise */
  public boolean isSetComponent_type() {
    return this.component_type != null;
  }

  public void setComponent_typeIsSet(boolean value) {
    if (!value) {
      this.component_type = null;
    }
  }

  /**
   * 
   * @see AccType
   */
  public AccType getAcc_type() {
    return this.acc_type;
  }

  /**
   * 
   * @see AccType
   */
  public ComponentPageInfo setAcc_type(AccType acc_type) {
    this.acc_type = acc_type;
    return this;
  }

  public void unsetAcc_type() {
    this.acc_type = null;
  }

  /** Returns true if field acc_type is set (has been assigned a value) and false otherwise */
  public boolean isSetAcc_type() {
    return this.acc_type != null;
  }

  public void setAcc_typeIsSet(boolean value) {
    if (!value) {
      this.acc_type = null;
    }
  }

  public String getTopology_id() {
    return this.topology_id;
  }

  public ComponentPageInfo setTopology_id(String topology_id) {
    this.topology_id = topology_id;
    return this;
  }

  public void unsetTopology_id() {
    this.topology_id = null;
  }

  /** Returns true if field topology_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTopology_id() {
    return this.topology_id != null;
  }

  public void setTopology_idIsSet(boolean value) {
    if (!value) {
      this.topology_id = null;
    }
  }

  public String getTopology_name() {
    return this.topology_name;
  }

  public ComponentPageInfo setTopology_name(String topology_name) {
    this.topology_name = topology_name;
    return this;
  }

  public void unsetTopology_name() {
    this.topology_name = null;
  }

  /** Returns true if field topology_name is set (has been assigned a value) and false otherwise */
  public boolean isSetTopology_name() {
    return this.topology_name != null;
  }

  public void setTopology_nameIsSet(boolean value) {
    if (!value) {
      this.topology_name = null;
    }
  }

  public int getNum_executors() {
    return this.num_executors;
  }

  public ComponentPageInfo setNum_executors(int num_executors) {
    this.num_executors = num_executors;
    setNum_executorsIsSet(true);
    return this;
  }

  public void unsetNum_executors() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_EXECUTORS_ISSET_ID);
  }

  /** Returns true if field num_executors is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_executors() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_EXECUTORS_ISSET_ID);
  }

  public void setNum_executorsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_EXECUTORS_ISSET_ID, value);
  }

  public int getNum_tasks() {
    return this.num_tasks;
  }

  public ComponentPageInfo setNum_tasks(int num_tasks) {
    this.num_tasks = num_tasks;
    setNum_tasksIsSet(true);
    return this;
  }

  public void unsetNum_tasks() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_TASKS_ISSET_ID);
  }

  /** Returns true if field num_tasks is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_tasks() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_TASKS_ISSET_ID);
  }

  public void setNum_tasksIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_TASKS_ISSET_ID, value);
  }

  public int getWindow_to_statsSize() {
    return (this.window_to_stats == null) ? 0 : this.window_to_stats.size();
  }

  public void putToWindow_to_stats(String key, ComponentAggregateStats val) {
    if (this.window_to_stats == null) {
      this.window_to_stats = new HashMap<String,ComponentAggregateStats>();
    }
    this.window_to_stats.put(key, val);
  }

  public Map<String,ComponentAggregateStats> getWindow_to_stats() {
    return this.window_to_stats;
  }

  public ComponentPageInfo setWindow_to_stats(Map<String,ComponentAggregateStats> window_to_stats) {
    this.window_to_stats = window_to_stats;
    return this;
  }

  public void unsetWindow_to_stats() {
    this.window_to_stats = null;
  }

  /** Returns true if field window_to_stats is set (has been assigned a value) and false otherwise */
  public boolean isSetWindow_to_stats() {
    return this.window_to_stats != null;
  }

  public void setWindow_to_statsIsSet(boolean value) {
    if (!value) {
      this.window_to_stats = null;
    }
  }

  public int getGsid_to_input_statsSize() {
    return (this.gsid_to_input_stats == null) ? 0 : this.gsid_to_input_stats.size();
  }

  public void putToGsid_to_input_stats(GlobalStreamId key, ComponentAggregateStats val) {
    if (this.gsid_to_input_stats == null) {
      this.gsid_to_input_stats = new HashMap<GlobalStreamId,ComponentAggregateStats>();
    }
    this.gsid_to_input_stats.put(key, val);
  }

  public Map<GlobalStreamId,ComponentAggregateStats> getGsid_to_input_stats() {
    return this.gsid_to_input_stats;
  }

  public ComponentPageInfo setGsid_to_input_stats(Map<GlobalStreamId,ComponentAggregateStats> gsid_to_input_stats) {
    this.gsid_to_input_stats = gsid_to_input_stats;
    return this;
  }

  public void unsetGsid_to_input_stats() {
    this.gsid_to_input_stats = null;
  }

  /** Returns true if field gsid_to_input_stats is set (has been assigned a value) and false otherwise */
  public boolean isSetGsid_to_input_stats() {
    return this.gsid_to_input_stats != null;
  }

  public void setGsid_to_input_statsIsSet(boolean value) {
    if (!value) {
      this.gsid_to_input_stats = null;
    }
  }

  public int getSid_to_output_statsSize() {
    return (this.sid_to_output_stats == null) ? 0 : this.sid_to_output_stats.size();
  }

  public void putToSid_to_output_stats(String key, ComponentAggregateStats val) {
    if (this.sid_to_output_stats == null) {
      this.sid_to_output_stats = new HashMap<String,ComponentAggregateStats>();
    }
    this.sid_to_output_stats.put(key, val);
  }

  public Map<String,ComponentAggregateStats> getSid_to_output_stats() {
    return this.sid_to_output_stats;
  }

  public ComponentPageInfo setSid_to_output_stats(Map<String,ComponentAggregateStats> sid_to_output_stats) {
    this.sid_to_output_stats = sid_to_output_stats;
    return this;
  }

  public void unsetSid_to_output_stats() {
    this.sid_to_output_stats = null;
  }

  /** Returns true if field sid_to_output_stats is set (has been assigned a value) and false otherwise */
  public boolean isSetSid_to_output_stats() {
    return this.sid_to_output_stats != null;
  }

  public void setSid_to_output_statsIsSet(boolean value) {
    if (!value) {
      this.sid_to_output_stats = null;
    }
  }

  public int getExec_statsSize() {
    return (this.exec_stats == null) ? 0 : this.exec_stats.size();
  }

  public java.util.Iterator<ExecutorAggregateStats> getExec_statsIterator() {
    return (this.exec_stats == null) ? null : this.exec_stats.iterator();
  }

  public void addToExec_stats(ExecutorAggregateStats elem) {
    if (this.exec_stats == null) {
      this.exec_stats = new ArrayList<ExecutorAggregateStats>();
    }
    this.exec_stats.add(elem);
  }

  public List<ExecutorAggregateStats> getExec_stats() {
    return this.exec_stats;
  }

  public ComponentPageInfo setExec_stats(List<ExecutorAggregateStats> exec_stats) {
    this.exec_stats = exec_stats;
    return this;
  }

  public void unsetExec_stats() {
    this.exec_stats = null;
  }

  /** Returns true if field exec_stats is set (has been assigned a value) and false otherwise */
  public boolean isSetExec_stats() {
    return this.exec_stats != null;
  }

  public void setExec_statsIsSet(boolean value) {
    if (!value) {
      this.exec_stats = null;
    }
  }

  public int getErrorsSize() {
    return (this.errors == null) ? 0 : this.errors.size();
  }

  public java.util.Iterator<ErrorInfo> getErrorsIterator() {
    return (this.errors == null) ? null : this.errors.iterator();
  }

  public void addToErrors(ErrorInfo elem) {
    if (this.errors == null) {
      this.errors = new ArrayList<ErrorInfo>();
    }
    this.errors.add(elem);
  }

  public List<ErrorInfo> getErrors() {
    return this.errors;
  }

  public ComponentPageInfo setErrors(List<ErrorInfo> errors) {
    this.errors = errors;
    return this;
  }

  public void unsetErrors() {
    this.errors = null;
  }

  /** Returns true if field errors is set (has been assigned a value) and false otherwise */
  public boolean isSetErrors() {
    return this.errors != null;
  }

  public void setErrorsIsSet(boolean value) {
    if (!value) {
      this.errors = null;
    }
  }

  public String getEventlog_host() {
    return this.eventlog_host;
  }

  public ComponentPageInfo setEventlog_host(String eventlog_host) {
    this.eventlog_host = eventlog_host;
    return this;
  }

  public void unsetEventlog_host() {
    this.eventlog_host = null;
  }

  /** Returns true if field eventlog_host is set (has been assigned a value) and false otherwise */
  public boolean isSetEventlog_host() {
    return this.eventlog_host != null;
  }

  public void setEventlog_hostIsSet(boolean value) {
    if (!value) {
      this.eventlog_host = null;
    }
  }

  public int getEventlog_port() {
    return this.eventlog_port;
  }

  public ComponentPageInfo setEventlog_port(int eventlog_port) {
    this.eventlog_port = eventlog_port;
    setEventlog_portIsSet(true);
    return this;
  }

  public void unsetEventlog_port() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EVENTLOG_PORT_ISSET_ID);
  }

  /** Returns true if field eventlog_port is set (has been assigned a value) and false otherwise */
  public boolean isSetEventlog_port() {
    return EncodingUtils.testBit(__isset_bitfield, __EVENTLOG_PORT_ISSET_ID);
  }

  public void setEventlog_portIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EVENTLOG_PORT_ISSET_ID, value);
  }

  public DebugOptions getDebug_options() {
    return this.debug_options;
  }

  public ComponentPageInfo setDebug_options(DebugOptions debug_options) {
    this.debug_options = debug_options;
    return this;
  }

  public void unsetDebug_options() {
    this.debug_options = null;
  }

  /** Returns true if field debug_options is set (has been assigned a value) and false otherwise */
  public boolean isSetDebug_options() {
    return this.debug_options != null;
  }

  public void setDebug_optionsIsSet(boolean value) {
    if (!value) {
      this.debug_options = null;
    }
  }

  public String getTopology_status() {
    return this.topology_status;
  }

  public ComponentPageInfo setTopology_status(String topology_status) {
    this.topology_status = topology_status;
    return this;
  }

  public void unsetTopology_status() {
    this.topology_status = null;
  }

  /** Returns true if field topology_status is set (has been assigned a value) and false otherwise */
  public boolean isSetTopology_status() {
    return this.topology_status != null;
  }

  public void setTopology_statusIsSet(boolean value) {
    if (!value) {
      this.topology_status = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COMPONENT_ID:
      if (value == null) {
        unsetComponent_id();
      } else {
        setComponent_id((String)value);
      }
      break;

    case COMPONENT_TYPE:
      if (value == null) {
        unsetComponent_type();
      } else {
        setComponent_type((ComponentType)value);
      }
      break;

    case ACC_TYPE:
      if (value == null) {
        unsetAcc_type();
      } else {
        setAcc_type((AccType)value);
      }
      break;

    case TOPOLOGY_ID:
      if (value == null) {
        unsetTopology_id();
      } else {
        setTopology_id((String)value);
      }
      break;

    case TOPOLOGY_NAME:
      if (value == null) {
        unsetTopology_name();
      } else {
        setTopology_name((String)value);
      }
      break;

    case NUM_EXECUTORS:
      if (value == null) {
        unsetNum_executors();
      } else {
        setNum_executors((Integer)value);
      }
      break;

    case NUM_TASKS:
      if (value == null) {
        unsetNum_tasks();
      } else {
        setNum_tasks((Integer)value);
      }
      break;

    case WINDOW_TO_STATS:
      if (value == null) {
        unsetWindow_to_stats();
      } else {
        setWindow_to_stats((Map<String,ComponentAggregateStats>)value);
      }
      break;

    case GSID_TO_INPUT_STATS:
      if (value == null) {
        unsetGsid_to_input_stats();
      } else {
        setGsid_to_input_stats((Map<GlobalStreamId,ComponentAggregateStats>)value);
      }
      break;

    case SID_TO_OUTPUT_STATS:
      if (value == null) {
        unsetSid_to_output_stats();
      } else {
        setSid_to_output_stats((Map<String,ComponentAggregateStats>)value);
      }
      break;

    case EXEC_STATS:
      if (value == null) {
        unsetExec_stats();
      } else {
        setExec_stats((List<ExecutorAggregateStats>)value);
      }
      break;

    case ERRORS:
      if (value == null) {
        unsetErrors();
      } else {
        setErrors((List<ErrorInfo>)value);
      }
      break;

    case EVENTLOG_HOST:
      if (value == null) {
        unsetEventlog_host();
      } else {
        setEventlog_host((String)value);
      }
      break;

    case EVENTLOG_PORT:
      if (value == null) {
        unsetEventlog_port();
      } else {
        setEventlog_port((Integer)value);
      }
      break;

    case DEBUG_OPTIONS:
      if (value == null) {
        unsetDebug_options();
      } else {
        setDebug_options((DebugOptions)value);
      }
      break;

    case TOPOLOGY_STATUS:
      if (value == null) {
        unsetTopology_status();
      } else {
        setTopology_status((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COMPONENT_ID:
      return getComponent_id();

    case COMPONENT_TYPE:
      return getComponent_type();

    case ACC_TYPE:
      return getAcc_type();

    case TOPOLOGY_ID:
      return getTopology_id();

    case TOPOLOGY_NAME:
      return getTopology_name();

    case NUM_EXECUTORS:
      return getNum_executors();

    case NUM_TASKS:
      return getNum_tasks();

    case WINDOW_TO_STATS:
      return getWindow_to_stats();

    case GSID_TO_INPUT_STATS:
      return getGsid_to_input_stats();

    case SID_TO_OUTPUT_STATS:
      return getSid_to_output_stats();

    case EXEC_STATS:
      return getExec_stats();

    case ERRORS:
      return getErrors();

    case EVENTLOG_HOST:
      return getEventlog_host();

    case EVENTLOG_PORT:
      return getEventlog_port();

    case DEBUG_OPTIONS:
      return getDebug_options();

    case TOPOLOGY_STATUS:
      return getTopology_status();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COMPONENT_ID:
      return isSetComponent_id();
    case COMPONENT_TYPE:
      return isSetComponent_type();
    case ACC_TYPE:
      return isSetAcc_type();
    case TOPOLOGY_ID:
      return isSetTopology_id();
    case TOPOLOGY_NAME:
      return isSetTopology_name();
    case NUM_EXECUTORS:
      return isSetNum_executors();
    case NUM_TASKS:
      return isSetNum_tasks();
    case WINDOW_TO_STATS:
      return isSetWindow_to_stats();
    case GSID_TO_INPUT_STATS:
      return isSetGsid_to_input_stats();
    case SID_TO_OUTPUT_STATS:
      return isSetSid_to_output_stats();
    case EXEC_STATS:
      return isSetExec_stats();
    case ERRORS:
      return isSetErrors();
    case EVENTLOG_HOST:
      return isSetEventlog_host();
    case EVENTLOG_PORT:
      return isSetEventlog_port();
    case DEBUG_OPTIONS:
      return isSetDebug_options();
    case TOPOLOGY_STATUS:
      return isSetTopology_status();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ComponentPageInfo)
      return this.equals((ComponentPageInfo)that);
    return false;
  }

  public boolean equals(ComponentPageInfo that) {
    if (that == null)
      return false;

    boolean this_present_component_id = true && this.isSetComponent_id();
    boolean that_present_component_id = true && that.isSetComponent_id();
    if (this_present_component_id || that_present_component_id) {
      if (!(this_present_component_id && that_present_component_id))
        return false;
      if (!this.component_id.equals(that.component_id))
        return false;
    }

    boolean this_present_component_type = true && this.isSetComponent_type();
    boolean that_present_component_type = true && that.isSetComponent_type();
    if (this_present_component_type || that_present_component_type) {
      if (!(this_present_component_type && that_present_component_type))
        return false;
      if (!this.component_type.equals(that.component_type))
        return false;
    }

    boolean this_present_acc_type = true && this.isSetAcc_type();
    boolean that_present_acc_type = true && that.isSetAcc_type();
    if (this_present_acc_type || that_present_acc_type) {
      if (!(this_present_acc_type && that_present_acc_type))
        return false;
      if (!this.acc_type.equals(that.acc_type))
        return false;
    }

    boolean this_present_topology_id = true && this.isSetTopology_id();
    boolean that_present_topology_id = true && that.isSetTopology_id();
    if (this_present_topology_id || that_present_topology_id) {
      if (!(this_present_topology_id && that_present_topology_id))
        return false;
      if (!this.topology_id.equals(that.topology_id))
        return false;
    }

    boolean this_present_topology_name = true && this.isSetTopology_name();
    boolean that_present_topology_name = true && that.isSetTopology_name();
    if (this_present_topology_name || that_present_topology_name) {
      if (!(this_present_topology_name && that_present_topology_name))
        return false;
      if (!this.topology_name.equals(that.topology_name))
        return false;
    }

    boolean this_present_num_executors = true && this.isSetNum_executors();
    boolean that_present_num_executors = true && that.isSetNum_executors();
    if (this_present_num_executors || that_present_num_executors) {
      if (!(this_present_num_executors && that_present_num_executors))
        return false;
      if (this.num_executors != that.num_executors)
        return false;
    }

    boolean this_present_num_tasks = true && this.isSetNum_tasks();
    boolean that_present_num_tasks = true && that.isSetNum_tasks();
    if (this_present_num_tasks || that_present_num_tasks) {
      if (!(this_present_num_tasks && that_present_num_tasks))
        return false;
      if (this.num_tasks != that.num_tasks)
        return false;
    }

    boolean this_present_window_to_stats = true && this.isSetWindow_to_stats();
    boolean that_present_window_to_stats = true && that.isSetWindow_to_stats();
    if (this_present_window_to_stats || that_present_window_to_stats) {
      if (!(this_present_window_to_stats && that_present_window_to_stats))
        return false;
      if (!this.window_to_stats.equals(that.window_to_stats))
        return false;
    }

    boolean this_present_gsid_to_input_stats = true && this.isSetGsid_to_input_stats();
    boolean that_present_gsid_to_input_stats = true && that.isSetGsid_to_input_stats();
    if (this_present_gsid_to_input_stats || that_present_gsid_to_input_stats) {
      if (!(this_present_gsid_to_input_stats && that_present_gsid_to_input_stats))
        return false;
      if (!this.gsid_to_input_stats.equals(that.gsid_to_input_stats))
        return false;
    }

    boolean this_present_sid_to_output_stats = true && this.isSetSid_to_output_stats();
    boolean that_present_sid_to_output_stats = true && that.isSetSid_to_output_stats();
    if (this_present_sid_to_output_stats || that_present_sid_to_output_stats) {
      if (!(this_present_sid_to_output_stats && that_present_sid_to_output_stats))
        return false;
      if (!this.sid_to_output_stats.equals(that.sid_to_output_stats))
        return false;
    }

    boolean this_present_exec_stats = true && this.isSetExec_stats();
    boolean that_present_exec_stats = true && that.isSetExec_stats();
    if (this_present_exec_stats || that_present_exec_stats) {
      if (!(this_present_exec_stats && that_present_exec_stats))
        return false;
      if (!this.exec_stats.equals(that.exec_stats))
        return false;
    }

    boolean this_present_errors = true && this.isSetErrors();
    boolean that_present_errors = true && that.isSetErrors();
    if (this_present_errors || that_present_errors) {
      if (!(this_present_errors && that_present_errors))
        return false;
      if (!this.errors.equals(that.errors))
        return false;
    }

    boolean this_present_eventlog_host = true && this.isSetEventlog_host();
    boolean that_present_eventlog_host = true && that.isSetEventlog_host();
    if (this_present_eventlog_host || that_present_eventlog_host) {
      if (!(this_present_eventlog_host && that_present_eventlog_host))
        return false;
      if (!this.eventlog_host.equals(that.eventlog_host))
        return false;
    }

    boolean this_present_eventlog_port = true && this.isSetEventlog_port();
    boolean that_present_eventlog_port = true && that.isSetEventlog_port();
    if (this_present_eventlog_port || that_present_eventlog_port) {
      if (!(this_present_eventlog_port && that_present_eventlog_port))
        return false;
      if (this.eventlog_port != that.eventlog_port)
        return false;
    }

    boolean this_present_debug_options = true && this.isSetDebug_options();
    boolean that_present_debug_options = true && that.isSetDebug_options();
    if (this_present_debug_options || that_present_debug_options) {
      if (!(this_present_debug_options && that_present_debug_options))
        return false;
      if (!this.debug_options.equals(that.debug_options))
        return false;
    }

    boolean this_present_topology_status = true && this.isSetTopology_status();
    boolean that_present_topology_status = true && that.isSetTopology_status();
    if (this_present_topology_status || that_present_topology_status) {
      if (!(this_present_topology_status && that_present_topology_status))
        return false;
      if (!this.topology_status.equals(that.topology_status))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_component_id = true && (isSetComponent_id());
    list.add(present_component_id);
    if (present_component_id)
      list.add(component_id);

    boolean present_component_type = true && (isSetComponent_type());
    list.add(present_component_type);
    if (present_component_type)
      list.add(component_type.getValue());

    boolean present_acc_type = true && (isSetAcc_type());
    list.add(present_acc_type);
    if (present_acc_type)
      list.add(acc_type.getValue());

    boolean present_topology_id = true && (isSetTopology_id());
    list.add(present_topology_id);
    if (present_topology_id)
      list.add(topology_id);

    boolean present_topology_name = true && (isSetTopology_name());
    list.add(present_topology_name);
    if (present_topology_name)
      list.add(topology_name);

    boolean present_num_executors = true && (isSetNum_executors());
    list.add(present_num_executors);
    if (present_num_executors)
      list.add(num_executors);

    boolean present_num_tasks = true && (isSetNum_tasks());
    list.add(present_num_tasks);
    if (present_num_tasks)
      list.add(num_tasks);

    boolean present_window_to_stats = true && (isSetWindow_to_stats());
    list.add(present_window_to_stats);
    if (present_window_to_stats)
      list.add(window_to_stats);

    boolean present_gsid_to_input_stats = true && (isSetGsid_to_input_stats());
    list.add(present_gsid_to_input_stats);
    if (present_gsid_to_input_stats)
      list.add(gsid_to_input_stats);

    boolean present_sid_to_output_stats = true && (isSetSid_to_output_stats());
    list.add(present_sid_to_output_stats);
    if (present_sid_to_output_stats)
      list.add(sid_to_output_stats);

    boolean present_exec_stats = true && (isSetExec_stats());
    list.add(present_exec_stats);
    if (present_exec_stats)
      list.add(exec_stats);

    boolean present_errors = true && (isSetErrors());
    list.add(present_errors);
    if (present_errors)
      list.add(errors);

    boolean present_eventlog_host = true && (isSetEventlog_host());
    list.add(present_eventlog_host);
    if (present_eventlog_host)
      list.add(eventlog_host);

    boolean present_eventlog_port = true && (isSetEventlog_port());
    list.add(present_eventlog_port);
    if (present_eventlog_port)
      list.add(eventlog_port);

    boolean present_debug_options = true && (isSetDebug_options());
    list.add(present_debug_options);
    if (present_debug_options)
      list.add(debug_options);

    boolean present_topology_status = true && (isSetTopology_status());
    list.add(present_topology_status);
    if (present_topology_status)
      list.add(topology_status);

    return list.hashCode();
  }

  @Override
  public int compareTo(ComponentPageInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetComponent_id()).compareTo(other.isSetComponent_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComponent_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.component_id, other.component_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComponent_type()).compareTo(other.isSetComponent_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComponent_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.component_type, other.component_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcc_type()).compareTo(other.isSetAcc_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcc_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acc_type, other.acc_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopology_id()).compareTo(other.isSetTopology_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopology_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topology_id, other.topology_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopology_name()).compareTo(other.isSetTopology_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopology_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topology_name, other.topology_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_executors()).compareTo(other.isSetNum_executors());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_executors()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_executors, other.num_executors);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_tasks()).compareTo(other.isSetNum_tasks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_tasks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_tasks, other.num_tasks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWindow_to_stats()).compareTo(other.isSetWindow_to_stats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWindow_to_stats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.window_to_stats, other.window_to_stats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGsid_to_input_stats()).compareTo(other.isSetGsid_to_input_stats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGsid_to_input_stats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gsid_to_input_stats, other.gsid_to_input_stats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSid_to_output_stats()).compareTo(other.isSetSid_to_output_stats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSid_to_output_stats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sid_to_output_stats, other.sid_to_output_stats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExec_stats()).compareTo(other.isSetExec_stats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExec_stats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exec_stats, other.exec_stats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrors()).compareTo(other.isSetErrors());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrors()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errors, other.errors);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventlog_host()).compareTo(other.isSetEventlog_host());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventlog_host()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventlog_host, other.eventlog_host);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventlog_port()).compareTo(other.isSetEventlog_port());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventlog_port()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventlog_port, other.eventlog_port);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDebug_options()).compareTo(other.isSetDebug_options());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDebug_options()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.debug_options, other.debug_options);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopology_status()).compareTo(other.isSetTopology_status());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopology_status()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topology_status, other.topology_status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ComponentPageInfo(");
    boolean first = true;

    sb.append("component_id:");
    if (this.component_id == null) {
      sb.append("null");
    } else {
      sb.append(this.component_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("component_type:");
    if (this.component_type == null) {
      sb.append("null");
    } else {
      sb.append(this.component_type);
    }
    first = false;
    if (isSetAcc_type()) {
      if (!first) sb.append(", ");
      sb.append("acc_type:");
      if (this.acc_type == null) {
        sb.append("null");
      } else {
        sb.append(this.acc_type);
      }
      first = false;
    }
    if (isSetTopology_id()) {
      if (!first) sb.append(", ");
      sb.append("topology_id:");
      if (this.topology_id == null) {
        sb.append("null");
      } else {
        sb.append(this.topology_id);
      }
      first = false;
    }
    if (isSetTopology_name()) {
      if (!first) sb.append(", ");
      sb.append("topology_name:");
      if (this.topology_name == null) {
        sb.append("null");
      } else {
        sb.append(this.topology_name);
      }
      first = false;
    }
    if (isSetNum_executors()) {
      if (!first) sb.append(", ");
      sb.append("num_executors:");
      sb.append(this.num_executors);
      first = false;
    }
    if (isSetNum_tasks()) {
      if (!first) sb.append(", ");
      sb.append("num_tasks:");
      sb.append(this.num_tasks);
      first = false;
    }
    if (isSetWindow_to_stats()) {
      if (!first) sb.append(", ");
      sb.append("window_to_stats:");
      if (this.window_to_stats == null) {
        sb.append("null");
      } else {
        sb.append(this.window_to_stats);
      }
      first = false;
    }
    if (isSetGsid_to_input_stats()) {
      if (!first) sb.append(", ");
      sb.append("gsid_to_input_stats:");
      if (this.gsid_to_input_stats == null) {
        sb.append("null");
      } else {
        sb.append(this.gsid_to_input_stats);
      }
      first = false;
    }
    if (isSetSid_to_output_stats()) {
      if (!first) sb.append(", ");
      sb.append("sid_to_output_stats:");
      if (this.sid_to_output_stats == null) {
        sb.append("null");
      } else {
        sb.append(this.sid_to_output_stats);
      }
      first = false;
    }
    if (isSetExec_stats()) {
      if (!first) sb.append(", ");
      sb.append("exec_stats:");
      if (this.exec_stats == null) {
        sb.append("null");
      } else {
        sb.append(this.exec_stats);
      }
      first = false;
    }
    if (isSetErrors()) {
      if (!first) sb.append(", ");
      sb.append("errors:");
      if (this.errors == null) {
        sb.append("null");
      } else {
        sb.append(this.errors);
      }
      first = false;
    }
    if (isSetEventlog_host()) {
      if (!first) sb.append(", ");
      sb.append("eventlog_host:");
      if (this.eventlog_host == null) {
        sb.append("null");
      } else {
        sb.append(this.eventlog_host);
      }
      first = false;
    }
    if (isSetEventlog_port()) {
      if (!first) sb.append(", ");
      sb.append("eventlog_port:");
      sb.append(this.eventlog_port);
      first = false;
    }
    if (isSetDebug_options()) {
      if (!first) sb.append(", ");
      sb.append("debug_options:");
      if (this.debug_options == null) {
        sb.append("null");
      } else {
        sb.append(this.debug_options);
      }
      first = false;
    }
    if (isSetTopology_status()) {
      if (!first) sb.append(", ");
      sb.append("topology_status:");
      if (this.topology_status == null) {
        sb.append("null");
      } else {
        sb.append(this.topology_status);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (component_id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'component_id' was not present! Struct: " + toString());
    }
    if (component_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'component_type' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (debug_options != null) {
      debug_options.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ComponentPageInfoStandardSchemeFactory implements SchemeFactory {
    public ComponentPageInfoStandardScheme getScheme() {
      return new ComponentPageInfoStandardScheme();
    }
  }

  private static class ComponentPageInfoStandardScheme extends StandardScheme<ComponentPageInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ComponentPageInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMPONENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.component_id = iprot.readString();
              struct.setComponent_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMPONENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.component_type = org.apache.storm.generated.ComponentType.findByValue(iprot.readI32());
              struct.setComponent_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ACC_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.acc_type = org.apache.storm.generated.AccType.findByValue(iprot.readI32());
              struct.setAcc_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOPOLOGY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.topology_id = iprot.readString();
              struct.setTopology_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TOPOLOGY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.topology_name = iprot.readString();
              struct.setTopology_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NUM_EXECUTORS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_executors = iprot.readI32();
              struct.setNum_executorsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NUM_TASKS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_tasks = iprot.readI32();
              struct.setNum_tasksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // WINDOW_TO_STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map542 = iprot.readMapBegin();
                struct.window_to_stats = new HashMap<String,ComponentAggregateStats>(2*_map542.size);
                String _key543;
                ComponentAggregateStats _val544;
                for (int _i545 = 0; _i545 < _map542.size; ++_i545)
                {
                  _key543 = iprot.readString();
                  _val544 = new ComponentAggregateStats();
                  _val544.read(iprot);
                  struct.window_to_stats.put(_key543, _val544);
                }
                iprot.readMapEnd();
              }
              struct.setWindow_to_statsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // GSID_TO_INPUT_STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map546 = iprot.readMapBegin();
                struct.gsid_to_input_stats = new HashMap<GlobalStreamId,ComponentAggregateStats>(2*_map546.size);
                GlobalStreamId _key547;
                ComponentAggregateStats _val548;
                for (int _i549 = 0; _i549 < _map546.size; ++_i549)
                {
                  _key547 = new GlobalStreamId();
                  _key547.read(iprot);
                  _val548 = new ComponentAggregateStats();
                  _val548.read(iprot);
                  struct.gsid_to_input_stats.put(_key547, _val548);
                }
                iprot.readMapEnd();
              }
              struct.setGsid_to_input_statsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SID_TO_OUTPUT_STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map550 = iprot.readMapBegin();
                struct.sid_to_output_stats = new HashMap<String,ComponentAggregateStats>(2*_map550.size);
                String _key551;
                ComponentAggregateStats _val552;
                for (int _i553 = 0; _i553 < _map550.size; ++_i553)
                {
                  _key551 = iprot.readString();
                  _val552 = new ComponentAggregateStats();
                  _val552.read(iprot);
                  struct.sid_to_output_stats.put(_key551, _val552);
                }
                iprot.readMapEnd();
              }
              struct.setSid_to_output_statsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // EXEC_STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list554 = iprot.readListBegin();
                struct.exec_stats = new ArrayList<ExecutorAggregateStats>(_list554.size);
                ExecutorAggregateStats _elem555;
                for (int _i556 = 0; _i556 < _list554.size; ++_i556)
                {
                  _elem555 = new ExecutorAggregateStats();
                  _elem555.read(iprot);
                  struct.exec_stats.add(_elem555);
                }
                iprot.readListEnd();
              }
              struct.setExec_statsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ERRORS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list557 = iprot.readListBegin();
                struct.errors = new ArrayList<ErrorInfo>(_list557.size);
                ErrorInfo _elem558;
                for (int _i559 = 0; _i559 < _list557.size; ++_i559)
                {
                  _elem558 = new ErrorInfo();
                  _elem558.read(iprot);
                  struct.errors.add(_elem558);
                }
                iprot.readListEnd();
              }
              struct.setErrorsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // EVENTLOG_HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.eventlog_host = iprot.readString();
              struct.setEventlog_hostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // EVENTLOG_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.eventlog_port = iprot.readI32();
              struct.setEventlog_portIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // DEBUG_OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.debug_options = new DebugOptions();
              struct.debug_options.read(iprot);
              struct.setDebug_optionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // TOPOLOGY_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.topology_status = iprot.readString();
              struct.setTopology_statusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ComponentPageInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.component_id != null) {
        oprot.writeFieldBegin(COMPONENT_ID_FIELD_DESC);
        oprot.writeString(struct.component_id);
        oprot.writeFieldEnd();
      }
      if (struct.component_type != null) {
        oprot.writeFieldBegin(COMPONENT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.component_type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.acc_type != null) {
        if (struct.isSetAcc_type()) {
          oprot.writeFieldBegin(ACC_TYPE_FIELD_DESC);
          oprot.writeI32(struct.acc_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.topology_id != null) {
        if (struct.isSetTopology_id()) {
          oprot.writeFieldBegin(TOPOLOGY_ID_FIELD_DESC);
          oprot.writeString(struct.topology_id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.topology_name != null) {
        if (struct.isSetTopology_name()) {
          oprot.writeFieldBegin(TOPOLOGY_NAME_FIELD_DESC);
          oprot.writeString(struct.topology_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNum_executors()) {
        oprot.writeFieldBegin(NUM_EXECUTORS_FIELD_DESC);
        oprot.writeI32(struct.num_executors);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNum_tasks()) {
        oprot.writeFieldBegin(NUM_TASKS_FIELD_DESC);
        oprot.writeI32(struct.num_tasks);
        oprot.writeFieldEnd();
      }
      if (struct.window_to_stats != null) {
        if (struct.isSetWindow_to_stats()) {
          oprot.writeFieldBegin(WINDOW_TO_STATS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.window_to_stats.size()));
            for (Map.Entry<String, ComponentAggregateStats> _iter560 : struct.window_to_stats.entrySet())
            {
              oprot.writeString(_iter560.getKey());
              _iter560.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.gsid_to_input_stats != null) {
        if (struct.isSetGsid_to_input_stats()) {
          oprot.writeFieldBegin(GSID_TO_INPUT_STATS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.STRUCT, struct.gsid_to_input_stats.size()));
            for (Map.Entry<GlobalStreamId, ComponentAggregateStats> _iter561 : struct.gsid_to_input_stats.entrySet())
            {
              _iter561.getKey().write(oprot);
              _iter561.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.sid_to_output_stats != null) {
        if (struct.isSetSid_to_output_stats()) {
          oprot.writeFieldBegin(SID_TO_OUTPUT_STATS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.sid_to_output_stats.size()));
            for (Map.Entry<String, ComponentAggregateStats> _iter562 : struct.sid_to_output_stats.entrySet())
            {
              oprot.writeString(_iter562.getKey());
              _iter562.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.exec_stats != null) {
        if (struct.isSetExec_stats()) {
          oprot.writeFieldBegin(EXEC_STATS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.exec_stats.size()));
            for (ExecutorAggregateStats _iter563 : struct.exec_stats)
            {
              _iter563.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.errors != null) {
        if (struct.isSetErrors()) {
          oprot.writeFieldBegin(ERRORS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.errors.size()));
            for (ErrorInfo _iter564 : struct.errors)
            {
              _iter564.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.eventlog_host != null) {
        if (struct.isSetEventlog_host()) {
          oprot.writeFieldBegin(EVENTLOG_HOST_FIELD_DESC);
          oprot.writeString(struct.eventlog_host);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEventlog_port()) {
        oprot.writeFieldBegin(EVENTLOG_PORT_FIELD_DESC);
        oprot.writeI32(struct.eventlog_port);
        oprot.writeFieldEnd();
      }
      if (struct.debug_options != null) {
        if (struct.isSetDebug_options()) {
          oprot.writeFieldBegin(DEBUG_OPTIONS_FIELD_DESC);
          struct.debug_options.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.topology_status != null) {
        if (struct.isSetTopology_status()) {
          oprot.writeFieldBegin(TOPOLOGY_STATUS_FIELD_DESC);
          oprot.writeString(struct.topology_status);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ComponentPageInfoTupleSchemeFactory implements SchemeFactory {
    public ComponentPageInfoTupleScheme getScheme() {
      return new ComponentPageInfoTupleScheme();
    }
  }

  private static class ComponentPageInfoTupleScheme extends TupleScheme<ComponentPageInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ComponentPageInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.component_id);
      oprot.writeI32(struct.component_type.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetAcc_type()) {
        optionals.set(0);
      }
      if (struct.isSetTopology_id()) {
        optionals.set(1);
      }
      if (struct.isSetTopology_name()) {
        optionals.set(2);
      }
      if (struct.isSetNum_executors()) {
        optionals.set(3);
      }
      if (struct.isSetNum_tasks()) {
        optionals.set(4);
      }
      if (struct.isSetWindow_to_stats()) {
        optionals.set(5);
      }
      if (struct.isSetGsid_to_input_stats()) {
        optionals.set(6);
      }
      if (struct.isSetSid_to_output_stats()) {
        optionals.set(7);
      }
      if (struct.isSetExec_stats()) {
        optionals.set(8);
      }
      if (struct.isSetErrors()) {
        optionals.set(9);
      }
      if (struct.isSetEventlog_host()) {
        optionals.set(10);
      }
      if (struct.isSetEventlog_port()) {
        optionals.set(11);
      }
      if (struct.isSetDebug_options()) {
        optionals.set(12);
      }
      if (struct.isSetTopology_status()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetAcc_type()) {
        oprot.writeI32(struct.acc_type.getValue());
      }
      if (struct.isSetTopology_id()) {
        oprot.writeString(struct.topology_id);
      }
      if (struct.isSetTopology_name()) {
        oprot.writeString(struct.topology_name);
      }
      if (struct.isSetNum_executors()) {
        oprot.writeI32(struct.num_executors);
      }
      if (struct.isSetNum_tasks()) {
        oprot.writeI32(struct.num_tasks);
      }
      if (struct.isSetWindow_to_stats()) {
        {
          oprot.writeI32(struct.window_to_stats.size());
          for (Map.Entry<String, ComponentAggregateStats> _iter565 : struct.window_to_stats.entrySet())
          {
            oprot.writeString(_iter565.getKey());
            _iter565.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetGsid_to_input_stats()) {
        {
          oprot.writeI32(struct.gsid_to_input_stats.size());
          for (Map.Entry<GlobalStreamId, ComponentAggregateStats> _iter566 : struct.gsid_to_input_stats.entrySet())
          {
            _iter566.getKey().write(oprot);
            _iter566.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetSid_to_output_stats()) {
        {
          oprot.writeI32(struct.sid_to_output_stats.size());
          for (Map.Entry<String, ComponentAggregateStats> _iter567 : struct.sid_to_output_stats.entrySet())
          {
            oprot.writeString(_iter567.getKey());
            _iter567.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetExec_stats()) {
        {
          oprot.writeI32(struct.exec_stats.size());
          for (ExecutorAggregateStats _iter568 : struct.exec_stats)
          {
            _iter568.write(oprot);
          }
        }
      }
      if (struct.isSetErrors()) {
        {
          oprot.writeI32(struct.errors.size());
          for (ErrorInfo _iter569 : struct.errors)
          {
            _iter569.write(oprot);
          }
        }
      }
      if (struct.isSetEventlog_host()) {
        oprot.writeString(struct.eventlog_host);
      }
      if (struct.isSetEventlog_port()) {
        oprot.writeI32(struct.eventlog_port);
      }
      if (struct.isSetDebug_options()) {
        struct.debug_options.write(oprot);
      }
      if (struct.isSetTopology_status()) {
        oprot.writeString(struct.topology_status);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ComponentPageInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.component_id = iprot.readString();
      struct.setComponent_idIsSet(true);
      struct.component_type = org.apache.storm.generated.ComponentType.findByValue(iprot.readI32());
      struct.setComponent_typeIsSet(true);
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.acc_type = org.apache.storm.generated.AccType.findByValue(iprot.readI32());
        struct.setAcc_typeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.topology_id = iprot.readString();
        struct.setTopology_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.topology_name = iprot.readString();
        struct.setTopology_nameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.num_executors = iprot.readI32();
        struct.setNum_executorsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.num_tasks = iprot.readI32();
        struct.setNum_tasksIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TMap _map570 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.window_to_stats = new HashMap<String,ComponentAggregateStats>(2*_map570.size);
          String _key571;
          ComponentAggregateStats _val572;
          for (int _i573 = 0; _i573 < _map570.size; ++_i573)
          {
            _key571 = iprot.readString();
            _val572 = new ComponentAggregateStats();
            _val572.read(iprot);
            struct.window_to_stats.put(_key571, _val572);
          }
        }
        struct.setWindow_to_statsIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TMap _map574 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.gsid_to_input_stats = new HashMap<GlobalStreamId,ComponentAggregateStats>(2*_map574.size);
          GlobalStreamId _key575;
          ComponentAggregateStats _val576;
          for (int _i577 = 0; _i577 < _map574.size; ++_i577)
          {
            _key575 = new GlobalStreamId();
            _key575.read(iprot);
            _val576 = new ComponentAggregateStats();
            _val576.read(iprot);
            struct.gsid_to_input_stats.put(_key575, _val576);
          }
        }
        struct.setGsid_to_input_statsIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TMap _map578 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.sid_to_output_stats = new HashMap<String,ComponentAggregateStats>(2*_map578.size);
          String _key579;
          ComponentAggregateStats _val580;
          for (int _i581 = 0; _i581 < _map578.size; ++_i581)
          {
            _key579 = iprot.readString();
            _val580 = new ComponentAggregateStats();
            _val580.read(iprot);
            struct.sid_to_output_stats.put(_key579, _val580);
          }
        }
        struct.setSid_to_output_statsIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list582 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.exec_stats = new ArrayList<ExecutorAggregateStats>(_list582.size);
          ExecutorAggregateStats _elem583;
          for (int _i584 = 0; _i584 < _list582.size; ++_i584)
          {
            _elem583 = new ExecutorAggregateStats();
            _elem583.read(iprot);
            struct.exec_stats.add(_elem583);
          }
        }
        struct.setExec_statsIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list585 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.errors = new ArrayList<ErrorInfo>(_list585.size);
          ErrorInfo _elem586;
          for (int _i587 = 0; _i587 < _list585.size; ++_i587)
          {
            _elem586 = new ErrorInfo();
            _elem586.read(iprot);
            struct.errors.add(_elem586);
          }
        }
        struct.setErrorsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.eventlog_host = iprot.readString();
        struct.setEventlog_hostIsSet(true);
      }
      if (incoming.get(11)) {
        struct.eventlog_port = iprot.readI32();
        struct.setEventlog_portIsSet(true);
      }
      if (incoming.get(12)) {
        struct.debug_options = new DebugOptions();
        struct.debug_options.read(iprot);
        struct.setDebug_optionsIsSet(true);
      }
      if (incoming.get(13)) {
        struct.topology_status = iprot.readString();
        struct.setTopology_statusIsSet(true);
      }
    }
  }

}

